<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>好文推荐</title>
    <url>/posts/227406a3/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="软实力"><a href="#软实力" class="headerlink" title="软实力"></a>软实力</h2><p><a href="https://popring.cn/posts/dfea4626/">职场效率法则</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMjE1ODkuaHRtbA==">如何做一个有质量的技术分享<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUHBUWkEtSlBCMC01cHZDMUo0aVp4dw==">迄今为止最全的前端监控体系搭建篇(长文预警)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jYWVsdW10aWFuLmdpdGh1Yi5pby8yMDE5LzEwLzIyLyVFNSU4OSU4RCVFNyVBQiVBRiVFNiU4MCVBNyVFOCU4MyVCRCVFNyU5QiU5MSVFNiU4RSVBNzEv">前端性能监控（一）指标收集<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGF0dGVybnMuZGV2Lw==">https://www.patterns.dev/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xNmFvTXJNR0hQSVIxaV9lVU5SdmtzZERkd2NERzZLaU9KTjZWZmgtbjgtcy9lZGl0I2hlYWRpbmc9aC4ybzg5bGZ1bm4xbGk=">Google 技术写作<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcTQ2MXNvOWxXazRGS0pHWi1wN1ZjZw==">提问的智慧<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExMjg2NS9hcnRpY2xlL2RldGFpbHMvMTAwOTc5MzYz">页面渲染大量数据的性能优化（时间分片），这篇文章对我影响很大<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VsbWFjaGluZS5naXRib29rcy5pby9zeXN0ZW0tZGVzaWduL2NvbnRlbnQvY24v">系统设计面试题精选<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xMTJIQmlNTnZ1NlRZYkRVT2ZWUmVfTVM0QS1mS2FXWXJwTWxtbnNpTU5pQS9lZGl0P3RhYj10LjAjaGVhZGluZz1oLmJtd2FjeTR5bGtzaA==">彻底击碎行为问题<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/posts/7b67faab/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="2025-年读书笔记"><a href="#2025-年读书笔记" class="headerlink" title="2025 年读书笔记"></a>2025 年读书笔记</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2RhY2hvdS1wZzlndS9ncm93dGgtcGxhbi9xYXJ4ZzA4c3VnZ2MwbGdv">增长黑客<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2RhY2hvdS1wZzlndS9ncm93dGgtcGxhbi9wcG9ncGV1ZTBhYmEzbHd1">认知觉醒<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2RhY2hvdS1wZzlndS9ncm93dGgtcGxhbi91cjUxMmNrZ3hnOGF1eXM5">GTD方法<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>魔方还原教程</title>
    <url>/posts/fba831b4/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhKNDExcDdrNi8/dmRfc291cmNlPTEyNTIyYTBjNWNkOWMxZjhmOGYzNDE1ODIxNTcxOTM0">bilibili<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li><p>黄心白色十字</p>
</li>
<li><p>确定中点和最下层一致 并做成白心白色十字<br> 对齐固定中点与最下层中点一致 翻转向下90度 此时白色为底色 置于最下层</p>
</li>
<li><p>确定最下层与中心方块一致<br> 当第一层有白色混合棱角 移到另外两色块中间 使用右手公式（上左下右） 多次切换</p>
</li>
<li><p>确定第二层与中心方块一致<br> 当第一层有不含黄色方块<br>  将其面向色块与中心色块保持一致 另一色块在其一侧 移动上层 使其远离另一色块<br>  如果方向为左 做右手公式（上左下右） 再将白色方块置于左侧 做左手公式（上右下左）<br>  如果方向为右 做左手公式（上右下左） 再将白色方块置于右侧 做右手公式（上左下右）<br> 当第一层均包含黄色方块<br>  将第二次异常方块置于右手 做右手公式（上左下右） 再将白色方块置于左侧 做左手公式（上右下左）<br>  此时异常方块已移动到最上层 再重复（当第一层有不含黄色方块）</p>
</li>
<li><p>确定最上层黄心十字<br> 当上层无L型或横型 选任意方向 前方顺时针90度 做右手公式（上左下右） 前方逆时针90度<br> 此时为L型  两边朝向右手 前方顺时针90度 做右手公式（上左下右） 前方逆时针90度<br> 此时为横型 平行横线     前方顺时针90度 做右手公式（上左下右） 前方逆时针90度</p>
</li>
<li><p>确定最上层上平面<br> 下右上右下右右上<br> 此时有小鱼图样 （有且只有三个黄色块）<br>  鱼头朝上 下右上右下右右上<br> 此时有两个非黄色色块<br>  侧面黄色置于左上朝外 下右上右下右右上<br>  此时有小鱼图样 （有且只有三个黄色块）<br>  鱼头朝上 下右上右下右右上</p>
</li>
<li><p>确定最上层角块<br> 有角块颜色一致<br>  选择角块颜色一致的朝下 面向黄色 上右上 下面180° 下左上 下面180° 右面180°<br> 无角块颜色一致<br> 选择任意朝下 面向黄色 上右上 下面180° 下左上 下面180° 右面180°<br>  有角块颜色一致</p>
</li>
<li><p>确定最上层中点<br> 有好的一面<br> 好的一面对准自己 下左下右 下右下左 上左180°<br> 没好的一面<br>  任意一面对准自己 下左下右 下右下左 上左180°<br>  好的一面</p>
</li>
</ol>
<p>  完结！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>魔方</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第十章 文件操作</title>
    <url>/posts/7f0409e3/</url>
    <content><![CDATA[<h2 id="第十章-文件操作"><a href="#第十章-文件操作" class="headerlink" title="第十章 文件操作"></a>第十章 文件操作</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><p>也称ASCII码文件，每字符占一个字节存储，每字节保存的是字符的ASCII码。可用文本编辑器打开查看，例如<code>.txt</code>、代码源程序<code>.c</code>、等等</p>
<h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>以二进制编码的形式保存，例如可执行文件（<code>.exe</code>）、位图文件(<code>.bmp</code>)、word文件(<code>.docx</code>)等都属于二进制文件。这种文件不能用文本编辑器打开查看，强行打开会乱码，无法读懂。</p>
<p><strong>优点</strong>：</p>
<p>“全部看作二进制”，输入输出的开始和结束由程序控制而不受换行、空格等字符的限制；比文本文件一般体积小，节省存储空间。</p>
<h3 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h3><h4 id="文件操作步骤"><a href="#文件操作步骤" class="headerlink" title="文件操作步骤"></a>文件操作步骤</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义文件指针</span></span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件（使文件指针关联文件）</span></span><br><span class="line">fp = fopen(文件名，打开方式);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写文件</span></span><br><span class="line"><span class="comment">// 通过调用系统库函数读写文件，函数中都需要一个文件指针参数fp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭文件（断开文件指针和文件的关联）</span></span><br><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure>

<h4 id="向文件写入字符串"><a href="#向文件写入字符串" class="headerlink" title="向文件写入字符串"></a>向文件写入字符串</h4><blockquote>
<p>如果文件事先已经存在，则会被删除重；如不存在，则直接新建。</p>
<p><code>fprintf()</code>为写入文件</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;file.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fopen-char-filename-char-mode"><a href="#fopen-char-filename-char-mode" class="headerlink" title="fopen(char *filename, char *mode)"></a><code>fopen(char *filename, char *mode)</code></h4><p><code>filename</code>：要打开的文件名称</p>
<p><code>mode</code>：文件访问模式</p>
<table>
<thead>
<tr>
<th>mode</th>
<th>introduce</th>
<th>remark</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code></td>
<td>允许读文件（<code>read</code>）</td>
<td>文件必须存在，否则出错</td>
</tr>
<tr>
<td><code>w</code></td>
<td>允许覆盖写文件(<code>write</code>)</td>
<td>文件必须被新建（如文件已存在会删除源文件，然后新建）</td>
</tr>
<tr>
<td><code>a</code></td>
<td>允许追加写文件（<code>append</code>）</td>
<td>文件不存在时才新建，否则只在源文件末尾添加数据</td>
</tr>
<tr>
<td><code>+</code></td>
<td>即允许读也允许写文件</td>
<td></td>
</tr>
<tr>
<td><code>b</code></td>
<td>以二进制格式打开文件（<code>binary</code>）</td>
<td></td>
</tr>
<tr>
<td><code>t</code></td>
<td>以文本格式打开文件（<code>text</code>）</td>
<td></td>
</tr>
</tbody></table>
<h3 id="C语言常用文本文件读写函数"><a href="#C语言常用文本文件读写函数" class="headerlink" title="C语言常用文本文件读写函数"></a>C语言常用文本文件读写函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>fgetc或getc</td>
<td>从当前位置指针处读取文件中的一个字符（1个字符占1个字节），读取后，读写位置指针自动后移1字节</td>
<td>字符变量&#x3D;fgetc(fp);</td>
</tr>
<tr>
<td>fputc或putc</td>
<td>在当前位置指针处向文件中写入一个字符（1个字符占1个字节），写入后，读写位置指针自动后移1字节</td>
<td>fputc(字符, fp);</td>
</tr>
<tr>
<td>fgets</td>
<td>读取文件中的一个字符串，读写位置指针自动后移</td>
<td>fgets(字符数组名,   n, fp);</td>
</tr>
<tr>
<td>fputs</td>
<td>在当前位置指针处向文件中写入一个字符串（不写入’\0’字符，最后也不自动加’\n’）；写入后，位置指针自动后移该字符串长度的字节。</td>
<td>fputs(字符串首地址,   fp);</td>
</tr>
<tr>
<td>fscanf</td>
<td>从当前位置指针处按格式读取文件中的多个数据，类似于scanf，只不过不是从键盘输入，而是从文件中读取；读取后，位置指针自动后移</td>
<td>fscanf(fp,   “格式控制字符串”,   变量1的地址, 变量2的地址, …);</td>
</tr>
<tr>
<td>fprintf</td>
<td>在当前位置指针处按格式向文件中写入多个数据，类似于printf，只不过不是显示到屏幕上，而是写入到文件中；写入后，位置指针自动后移</td>
<td>fprintf(fp,   “格式控制字符串”,   数据1, 数据2, …);</td>
</tr>
</tbody></table>
<h3 id="C语言常用二进制文件读写函数"><a href="#C语言常用二进制文件读写函数" class="headerlink" title="C语言常用二进制文件读写函数"></a>C语言常用二进制文件读写函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>fread</td>
<td>从当前位置指针处读取文件中的一批字节，这批字节由count个数据块、每数据块长size个字节组成，共size*count个字节。所读取的字节存入参数buffer地址开始的一段内存空间。读取后，文件位置指针跟随后移实际读取的字节数。函数返回实际读取的数据块数（如读到文件尾或出错，实际读取的数据块数可能小于count）</td>
<td>fread(buffer, size, count, fp);</td>
</tr>
<tr>
<td>fwrite</td>
<td>在当前位置指针处向文件中写入一批字节，这批字节位于内存中参数buffer地址开始的一段内存空间，由count个数据块、每数据块长size个字节组成，共size*count个字节。写入后，文件位置指针跟随后移实际写入的字节数。函数返回实际写入的数据块数（如写入出错，实际写入的数据块数可能小于count）</td>
<td>fwrite(buffer, size, count, fp);</td>
</tr>
</tbody></table>
<h3 id="C语言常用文件位置指针定位库函数"><a href="#C语言常用文件位置指针定位库函数" class="headerlink" title="C语言常用文件位置指针定位库函数"></a>C语言常用文件位置指针定位库函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>rewind</td>
<td>把文件位置指针移到文件开头</td>
<td>rewind(fp);</td>
</tr>
<tr>
<td>fseek</td>
<td>把文件位置指针从ori开始的位置，向文件尾部(n&gt;0时)或文件首部(n&lt;0时)移动n个字节。ori可有3种取值：   0、1、2分别表示从文件首、当前位置和文件尾开始移动，   0、1、2也可分别写为符号常量SEEK_SET、SEEK_CUR、SEEK_END</td>
<td>fseek(fp, n, ori);    一般n为long型，常量加字母后缀L(l)</td>
</tr>
<tr>
<td>ftell</td>
<td>若执行成功，函数返回当前文件位置指针的位置（文件中第一个字节的位置为0）；若执行失败，函数返回-1</td>
<td>n &#x3D; ftell(fp);</td>
</tr>
<tr>
<td>feof</td>
<td>判断读文件是否已越过了文件末尾</td>
<td>if (feof(fp) )   …</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第二章 数据类型和运算符</title>
    <url>/posts/d46dda9b/</url>
    <content><![CDATA[<h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><blockquote>
<p>Good things are worth the wait.</p>
<p>美好的事物都值得等待。</p>
</blockquote>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>命名规则：</p>
<p>标识符名很简单，字母数字下划线。</p>
<p>字母区分大小写，非数打头非关键。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><blockquote>
<p>程序运行过程中值不会变化的成为常量。</p>
</blockquote>
<h3 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h3><p>C语言源程序 -&gt; 目标程序 -&gt; 可执行程序</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114933.png"></p>
<h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>二进制转换十进制</p>
<p>十进制转换二进制</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114928.png"></p>
<h2 id="第二章-数据类型运算符和表达式"><a href="#第二章-数据类型运算符和表达式" class="headerlink" title="第二章 数据类型运算符和表达式"></a>第二章 数据类型运算符和表达式</h2><h3 id="整形常量"><a href="#整形常量" class="headerlink" title="整形常量"></a>整形常量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line">a = <span class="number">012</span>;</span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line">a = <span class="number">0xA</span>;</span><br><span class="line"><span class="comment">// 不允许写为二进制形式。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>整型常量表示法，十进制数直接打。</p>
<p>数前添零进制八，十六进制再加叉。</p>
</blockquote>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整型类型"><a href="#整型类型" class="headerlink" title="整型类型"></a>整型类型</h4><blockquote>
<p>int, short int, long int, long long int</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">类型</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">short</td>
<td align="center">整数型</td>
<td align="left">2个字节</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">长整型</td>
<td align="left">4个字节</td>
</tr>
<tr>
<td align="center">signed</td>
<td align="center">有符号型</td>
<td align="left">可以保存负数的整型变量（signed可省略）</td>
</tr>
<tr>
<td align="center">unsigned</td>
<td align="center">无符号型</td>
<td align="left">可保存正数和0，但不能保存负数的整型变量</td>
</tr>
<tr>
<td align="center">signed short int a</td>
<td align="center">有符号短整型</td>
<td align="left">2字节，-32768 ~ 32767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">整数型</td>
<td align="left">4个字节</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="浮点类型（也称为实型）"><a href="#浮点类型（也称为实型）" class="headerlink" title="浮点类型（也称为实型）"></a>浮点类型（也称为实型）</h4><blockquote>
<p>float, double, 双精度浮点型</p>
<p>根据精度不同，克表示数据范围不同，根据实际情况选用。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">类型</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">单精度型</td>
<td>4个字节，最大7位有效数字</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">双精度型</td>
<td>8个字节，最大15位有效数字</td>
</tr>
</tbody></table>
<h5 id="小数形式"><a href="#小数形式" class="headerlink" title="小数形式"></a>小数形式</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> f;</span><br><span class="line">f = <span class="number">12.</span>;</span><br><span class="line">f = <span class="number">.36</span>;</span><br><span class="line">f = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以省略正数部分的0</span></span><br><span class="line"><span class="comment">// 也可以省略小数末尾的0</span></span><br><span class="line"><span class="comment">// 但必须有小数点。</span></span><br></pre></td></tr></table></figure>

<h5 id="指数形式"><a href="#指数形式" class="headerlink" title="指数形式"></a>指数形式</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// E(或e)代表 x10</span></span><br><span class="line"><span class="number">2.1E5</span> == <span class="number">2.1</span> * <span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line"><span class="number">-0.8E-2</span> = <span class="number">-0.8</span> * <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">-2</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// E(e)后面必须是正数，前后两边紧相连</span></span><br></pre></td></tr></table></figure>

<h4 id="整型变量和实型变量"><a href="#整型变量和实型变量" class="headerlink" title="整型变量和实型变量"></a>整型变量和实型变量</h4><p>整型变量：只能保存整数，不能保存实数。（例如：int）</p>
<p>实型变量：只能保存实数，不能保存正数。（例如：float, double）</p>
<h4 id="常量后缀"><a href="#常量后缀" class="headerlink" title="常量后缀"></a>常量后缀</h4><h5 id="L-或l"><a href="#L-或l" class="headerlink" title="L(或l)"></a>L(或l)</h5><p>整数后加为长整型(<code>long</code>)，实数后加为长双精度型(<code>long double</code>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0L</span>, <span class="number">12L</span>, <span class="number">1.2L</span></span><br></pre></td></tr></table></figure>

<p>U(或u)</p>
<p>只能加在整数后，表示常量为<code>无符号型</code>，不能表示负数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0U</span>, <span class="number">6U</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可既用L又用U</span></span><br><span class="line"><span class="number">12LU</span>, <span class="number">6LU</span></span><br></pre></td></tr></table></figure>

<h5 id="F-或f"><a href="#F-或f" class="headerlink" title="F(或f)"></a>F(或f)</h5><p>表示常量为单精度型，加在整数后，则此数不为整数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.23f</span>, <span class="number">356F</span></span><br></pre></td></tr></table></figure>

<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><blockquote>
<p>单引号包裹的一个字符，称为字符常量。</p>
<p>单引号内必须为英文，只能有一个字符，每个字符常量占一个字节（8个bit位），单引号是定界符不属于字符内容。</p>
</blockquote>
<h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><blockquote>
<p>标准ASCII码0~127，字符和整数是混用的，字符可边做对应的ASCII码</p>
</blockquote>
<table>
<thead>
<tr>
<th>ASCII码</th>
<th>详情</th>
</tr>
</thead>
<tbody><tr>
<td>0~31, 127</td>
<td>控制字符（不可显示）</td>
</tr>
<tr>
<td>32</td>
<td>空格字符</td>
</tr>
<tr>
<td>48~57</td>
<td>数字’0’~’9’</td>
</tr>
<tr>
<td>65~90</td>
<td>‘A’~’Z’，</td>
</tr>
<tr>
<td>97~122</td>
<td>‘a’~’z’，小写字母比大写多32</td>
</tr>
</tbody></table>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符 &#39;\&#39;"></a>转义字符 <code>&#39;\&#39;</code></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\n 换行符</span><br><span class="line">\a 响铃符</span><br><span class="line">\t 制表符</span><br><span class="line">\\ 表示 \ 字符</span><br><span class="line">\<span class="string">&#x27; 表示 &#x27;</span> 字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote>
<p>末尾 \0 表示字符串结束</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>字符常量</th>
<th>字符串常量</th>
</tr>
</thead>
<tbody><tr>
<td>引号</td>
<td>单引号</td>
<td>双引号</td>
</tr>
<tr>
<td>字符个数</td>
<td>只能占一个字符</td>
<td>可含0~多个字符</td>
</tr>
<tr>
<td>能否将值赋值给char型变量</td>
<td>可以</td>
<td>不可以</td>
</tr>
<tr>
<td>有无对应变量</td>
<td>有字符型变量</td>
<td>无字符型变量</td>
</tr>
<tr>
<td>占用内存字符数</td>
<td>一律一个字节</td>
<td>字符串字符数（长度）+1</td>
</tr>
</tbody></table>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><blockquote>
<p>优先级：</p>
<p>先乘除，后加减</p>
<p><code>*</code> <code>/</code> <code>%</code>优先级相同，高于 <code>+</code> <code>-</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">+ - * / %</span><br></pre></td></tr></table></figure>

<h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>表达式的类型：</p>
<p>两个运算量类型一致时，与两个运算量的类型一致。</p>
<p>两个运算量类型不一致时，表达式的类型与其中较高类型运算量的类型一致（较低类型自动转换为高类型再运算）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> -&gt; <span class="type">int</span> -&gt; <span class="type">float</span> -&gt; <span class="type">double</span></span><br><span class="line">特殊：所有浮点数必然转换为 <span class="type">double</span> 再运算（即使两个 <span class="type">float</span> 型量的运算也会先转换为 <span class="type">double</span> ）</span><br></pre></td></tr></table></figure>

<h4 id="取整数的个、十、百、千…"><a href="#取整数的个、十、百、千…" class="headerlink" title="取整数的个、十、百、千…"></a>取整数的个、十、百、千…</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">123456</span>;</span><br><span class="line"><span class="comment">// 个位</span></span><br><span class="line">a%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十位</span></span><br><span class="line">(a/<span class="number">10</span>)%<span class="number">10</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 百位</span></span><br><span class="line">(a/<span class="number">100</span>)%<span class="number">10</span></span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 取最高位时，a/100000 ，只会有一位数，不%10 也可以</span></span><br></pre></td></tr></table></figure>

<p><strong>习题</strong></p>
<ol>
<li>一个数位78378 取它的所有千位和百位</li>
<li>水仙花</li>
</ol>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><blockquote>
<p>&#x3D; 赋值运算符优先级再C语言中排倒数第二位</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">n = <span class="number">8</span>;</span><br><span class="line">n += n *= n - <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 拆分运算</span></span><br><span class="line">n += n *= <span class="number">6</span>;</span><br><span class="line">n += <span class="number">48</span>;</span><br><span class="line">n = n + <span class="number">48</span>;</span><br><span class="line">n = <span class="number">96</span>;</span><br><span class="line"><span class="comment">// 所以表达式的值为 96，表达式求值后的n的值为 96</span></span><br></pre></td></tr></table></figure>

<h3 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h3><blockquote>
<p>i++</p>
<p>单目运算符 优先级很高，仅次于括号()</p>
<p>只能用于变量</p>
</blockquote>
<p>i++ 计算后会修改<code>i</code> 自身的值</p>
<h4 id="i-和-i-的区别"><a href="#i-和-i-的区别" class="headerlink" title="i++ 和 ++i 的区别"></a><code>i++</code> 和 <code>++i</code> 的区别</h4><p><code>++</code>在先，先加后用；</p>
<p><code>++</code>在后，后加先用；</p>
<p><code>--</code>在先，先减后用；</p>
<p><code>--</code>在后，后减先用；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>, b;</span><br><span class="line">b = <span class="number">5</span> - a++;</span><br><span class="line"><span class="comment">// 计算后，b=4 a=2</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>, b;</span><br><span class="line">b = <span class="number">5</span> - ++a;</span><br><span class="line"><span class="comment">// 计算后，b=3 a=2</span></span><br></pre></td></tr></table></figure>

<h3 id="逗号运算符和逗号表达式"><a href="#逗号运算符和逗号表达式" class="headerlink" title="逗号运算符和逗号表达式"></a>逗号运算符和逗号表达式</h3><blockquote>
<p>逗号运算符优先级最低（倒数第一），顺序自左到右</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运算符</span></span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>, y=<span class="number">2</span>, z;</span><br><span class="line">z = (x++, y++);</span><br><span class="line">z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式亦相同</span></span><br></pre></td></tr></table></figure>

<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><blockquote>
<p>2个条件</p>
<p>数据必须转换为二进制才能进行</p>
<p>只能对整型数据和字符型数据进行</p>
</blockquote>
<h4 id="按位与-和逻辑-不同"><a href="#按位与-和逻辑-不同" class="headerlink" title="按位与 &amp; 和逻辑 &amp;&amp; 不同"></a>按位与 <code>&amp;</code> 和逻辑 <code>&amp;&amp;</code> 不同</h4><h5 id="按位与"><a href="#按位与" class="headerlink" title="按位与 &amp;"></a>按位与 <code>&amp;</code></h5><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114929.png"></p>
<h5 id="按位或"><a href="#按位或" class="headerlink" title="按位或 |"></a>按位或 <code>|</code></h5><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114930.png"></p>
<h5 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或 ^"></a>按位异或 <code>^</code></h5><blockquote>
<p>性质：</p>
<p>任何数与他的本身按位异或，结果都为0</p>
<p>a^k^k &#x3D; a，可根据这个性质对数据加密</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114932.png"></p>
<h5 id="按位求反"><a href="#按位求反" class="headerlink" title="按位求反 ~"></a>按位求反 <code>~</code></h5><blockquote>
<p><code>~</code>是单目运算符，将数据转换为二进制后，将个二进制位反过来，0变1，1变0</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221114931.png"></p>
<h4 id="左移"><a href="#左移" class="headerlink" title="左移 &lt;&lt; 右移 &gt;&gt;"></a>左移 <code>&lt;&lt;</code> 右移 <code>&gt;&gt;</code></h4><h5 id="左移-1"><a href="#左移-1" class="headerlink" title="左移 &lt;&lt;"></a>左移 <code>&lt;&lt;</code></h5><blockquote>
<p>将 <code>&lt;&lt;</code>左边的数的各二进制整体左移若干位，由 <code>&lt;&lt;</code>右边的数指定移动的位数。移出的位将被舍弃。</p>
<p>一个数左移<code>i</code>位，相当于乘以2的<code>i</code>次方</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> &lt;&lt; <span class="number">4</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="number">3</span> * (<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h5><blockquote>
<p>将 <code>&gt;&gt;</code>左边的数的各二进制整体右移若干位，由 <code>&gt;&gt;</code>右边的数指定移动的位数。移出的位将被舍弃。</p>
<p>一个数左移<code>i</code>位，相当于乘以2的<code>i</code>次方</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span> &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="number">15</span> / (<span class="number">2</span>*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h4><blockquote>
<p>void</p>
</blockquote>
<h4 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h4><blockquote>
<ol>
<li>指针类型 *</li>
<li>数组类型 []</li>
<li>结构体类型 struct</li>
<li>共同体类型 union</li>
<li>函数类型</li>
</ol>
</blockquote>
<h3 id="Visual-Stdio-快捷键"><a href="#Visual-Stdio-快捷键" class="headerlink" title="Visual Stdio 快捷键"></a>Visual Stdio 快捷键</h3><p>注释: Ctrl + K, Ctrl + C</p>
<p>取消注释：Ctrl + K , Ctrl + U</p>
]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第三章 顺序结构</title>
    <url>/posts/f561d345/</url>
    <content><![CDATA[<h2 id="第三章-顺序结构"><a href="#第三章-顺序结构" class="headerlink" title="第三章 顺序结构"></a>第三章 顺序结构</h2><blockquote>
<p>You only get one shot, do not miss your chance to blow.</p>
<p>你只有一发子弹，不要错过引爆全场的机会。</p>
</blockquote>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大括号是程序块的分界符，后不跟分号(;)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每条语句后要加分号，语句也可以也在同一行，但要用分号分割</span></span><br></pre></td></tr></table></figure>

<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><blockquote>
<p>C语言程序的 <code>输入/输出</code> 都要通过<strong>库函数</strong>完成</p>
<p>库函数，就是“仓库“里的函数</p>
<p>在C语言要使用“库函数”，首先要用 <code>#include</code> 将一些文件包含到程序中，文件后缀一般为 <code>.h</code> ，称为头文件。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 或者是</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="putchar"><a href="#putchar" class="headerlink" title="putchar()"></a>putchar()</h4><blockquote>
<p>单字符输出</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h4><blockquote>
<p>单字符输入</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">getchar();</span><br></pre></td></tr></table></figure>

<h4 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h4><blockquote>
<p>格式输出函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>格式字符串控全体，</p>
<p>数据替换百分比<code>(%)</code></p>
<p>字符c，正数d</p>
<p>小数f，指数e</p>
<p>欧<code>(o)</code>八叉<code>(x)</code>六<code>u</code>无号</p>
<p>字符串<code>s</code>要牢记</p>
<p>间数全宽点小数</p>
<p>负号表示左对齐</p>
</blockquote>
<h4 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h4><blockquote>
<p>格式输入函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;格式控制字符串&quot;</span>, 变量<span class="number">1</span>的地址, 变量<span class="number">2</span>的地址, ...)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input a,b,c\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a=%d, b=%d, c=%d&quot;</span>, a, b, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>scanf, 键盘输入</p>
<p>后为地址，不能输出。</p>
<p>间数宽度，%c全读。</p>
<p>非格式符，麻烦用户。</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>功能</strong></th>
<th><strong>用法举例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>sqrt(x)</td>
<td>求x的算术平方根，x≥0</td>
<td>sqrt(2)</td>
</tr>
<tr>
<td>abs(x)</td>
<td>求x（整数）的绝对值</td>
<td>abs(-5)</td>
</tr>
<tr>
<td>fabs(x)</td>
<td>求x（实数）的绝对值</td>
<td>fabs(-2.5)</td>
</tr>
<tr>
<td>log(x)</td>
<td>求自然对数ln(x)</td>
<td>log(2)</td>
</tr>
<tr>
<td>exp(x)</td>
<td>求ex的值</td>
<td>exp(2)</td>
</tr>
<tr>
<td>pow(x,y)</td>
<td>求xy的值，注意x^y是“按位异或”不是求xy</td>
<td>pow(2, 3)</td>
</tr>
<tr>
<td>sin(x)</td>
<td>求x的正弦值，x单位为弧度</td>
<td>sin(30*3.14&#x2F;180)</td>
</tr>
<tr>
<td>cos(x)</td>
<td>求x的余弦值，x单位为弧度</td>
<td>cos(3.14)</td>
</tr>
<tr>
<td>tan(x)</td>
<td>求x的正切值，x单位为弧度</td>
<td>tan(1.3)</td>
</tr>
<tr>
<td>asin(x)</td>
<td>求sin-1(x)的值（弧度），-1≤x≤1</td>
<td>asin(1)</td>
</tr>
<tr>
<td>acos(x)</td>
<td>求cos-1(x)的值（弧度），-1≤x≤1</td>
<td>acos(0)</td>
</tr>
<tr>
<td>atan(x)</td>
<td>求tan-1(x)的值（弧度）</td>
<td>atan(-82.24)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第四章 选择结构</title>
    <url>/posts/4e7f3559/</url>
    <content><![CDATA[<h2 id="第四章-选择机构"><a href="#第四章-选择机构" class="headerlink" title="第四章 选择机构"></a>第四章 选择机构</h2><blockquote>
<p>Everthing ending is just a new beginning.</p>
<p>每次结束都是新的开始</p>
</blockquote>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt; &gt; &lt;= &gt;= == !=</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&amp;&amp;	逻辑与（且）</span><br><span class="line">	两者都为真时结果才为真有一个为假，结果为假</span><br><span class="line">||	逻辑或</span><br><span class="line">	有一个为真，结果为真</span><br><span class="line">	两者都为假时，结果才为假</span><br><span class="line">!	逻辑或</span><br><span class="line">	运算量为真时，结果为假</span><br><span class="line">	运算量为假时，结果为真</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1为真 0为假</span></span><br><span class="line"><span class="number">5</span> &gt; <span class="number">0</span>	<span class="number">1</span></span><br><span class="line"><span class="number">5</span> &lt; <span class="number">3</span>	<span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先级 从高到低</span></span><br><span class="line"><span class="number">0.</span> ()</span><br><span class="line"><span class="number">1.</span> 逻辑非(!) ++ -- ~ -</span><br><span class="line"><span class="number">2.</span> 算术运算</span><br><span class="line">	* / % + -</span><br><span class="line">    &lt;&lt; &gt;&gt; [左右移]</span><br><span class="line"><span class="number">3.</span> 关系运算</span><br><span class="line">	&lt; &lt;= &gt; &gt;= </span><br><span class="line">    == !=</span><br><span class="line"><span class="number">4.</span> &amp;&amp; 和 ||</span><br><span class="line">    &amp;&amp; 优先级大于 ||</span><br><span class="line"><span class="number">5.</span> 条件 ? :</span><br><span class="line"><span class="number">6.</span> 赋值运算 += -= *= ...</span><br><span class="line"><span class="number">7.</span> 逗号</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> &amp;&amp; <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 表达式的值为 1</span></span><br></pre></td></tr></table></figure>

<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">?	三目运算符</span><br><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表达式值为非0，执行语句；0不执行语句</span></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"> 	<span class="comment">// 执行语句   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if 单语句要注意（if后无大括号），只能跟一条语句</span></span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">2</span>) a = <span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br></pre></td></tr></table></figure>

<h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第五章 循环结构</title>
    <url>/posts/a3c3250/</url>
    <content><![CDATA[<h2 id="第五章-循环结构"><a href="#第五章-循环结构" class="headerlink" title="第五章 循环结构"></a>第五章 循环结构</h2><blockquote>
<p>You are more powerful than any other person.</p>
<p>你比任何人都强大。</p>
</blockquote>
<h3 id="程序的三种基本结构"><a href="#程序的三种基本结构" class="headerlink" title="程序的三种基本结构"></a>程序的三种基本结构</h3><p>顺序结构</p>
<p>选择结构</p>
<p>循环结构</p>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><blockquote>
<p>先判断后执行，表达式为真，</p>
<p>注意：如果表达式的值一直为真，没有改变，并且没有<code>break;</code>，则会陷入死循环</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><blockquote>
<p>先执行后判断</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    语句</span><br><span class="line">&#125;<span class="keyword">while</span>(表达式);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：do-while的while号后有分号。</span></span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><blockquote>
<p>for 语句中的3个表达式均可省略，但<code>;</code>不可省略。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看成</span></span><br><span class="line"><span class="keyword">for</span>(循环变量赋初值; 循环条件; 循环变量增量)</span><br><span class="line">&#123;</span><br><span class="line">	语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行顺序</p>
<p><code>[括号内为循环]</code></p>
<p>表达式1 -&gt; 表达式2 -&gt; <code>[语句 -&gt; 表达式2 -&gt; 表达式3 -&gt;]</code></p>
<h4 id="for循环内还可以使用逗号表达式"><a href="#for循环内还可以使用逗号表达式" class="headerlink" title="for循环内还可以使用逗号表达式"></a>for循环内还可以使用逗号表达式</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum, i;</span><br><span class="line"><span class="keyword">for</span>(sum=<span class="number">0</span>, i=<span class="number">0</span>; i&lt;<span class="number">100</span>; sum+=i, i++)</span><br><span class="line">&#123;</span><br><span class="line">    语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><blockquote>
<p><code>break</code>：跳出整个循环。</p>
<p><code>continue</code> ：结束本次循环，转到循环的开始判断是否执行下一次循环。</p>
</blockquote>
<h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><blockquote>
<p>穷举法也成为了枚举法，将在此范围内的所有可能情况逐一验证，知道全部情况验证完毕。</p>
</blockquote>
<h4 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h4><blockquote>
<p>输入一个数，判断其是否为素数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input, i, k;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入大于1的数\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"></span><br><span class="line">	k = <span class="built_in">sqrt</span>(input);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;k; i++)</span><br><span class="line">		<span class="keyword">if</span>(input%i == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(i&gt;k)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d是素数\n&quot;</span>, input);</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d不是素数\n&quot;</span>, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第六章 数组</title>
    <url>/posts/76456718/</url>
    <content><![CDATA[<h2 id="第六章-数组"><a href="#第六章-数组" class="headerlink" title="第六章 数组"></a>第六章 数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组的长度</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组也是变量，必须先定义，后使用，不能与其他变量名、数组名重名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义时赋初值</span></span><br><span class="line"><span class="type">int</span> x[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用编程套路，数组与循环结合</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;元素个数; i++)</span><br><span class="line">    对a[i]的操作</span><br></pre></td></tr></table></figure>

<h4 id="一维数组的运用"><a href="#一维数组的运用" class="headerlink" title="一维数组的运用"></a>一维数组的运用</h4><p>已知10名同学的考试成绩，请编程统计及格人数，并计算10名同学成绩的平均分。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> b[N] = &#123;<span class="number">58.0</span>, <span class="number">69.0</span>, <span class="number">92.1</span>, <span class="number">33.3</span>, <span class="number">50.1</span>, <span class="number">66.5</span>, <span class="number">12.5</span>, <span class="number">63.4</span>, <span class="number">68.4</span>, <span class="number">10.1</span>&#125;, sum, avg;</span><br><span class="line">	<span class="type">int</span> i, pass;</span><br><span class="line">	sum = <span class="number">0</span>; pass=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += b[i];</span><br><span class="line">		<span class="keyword">if</span>(b[i]&gt;= <span class="number">60</span>)</span><br><span class="line">			pass++;</span><br><span class="line">	&#125;</span><br><span class="line">	avg = sum / N;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;通过考试人数为: %d\n&quot;</span>, pass);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;平均分数为: %5.1f&quot;</span>, avg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5.1f&quot;</span>, fa);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5表示输出数字长度为五位</p>
<p>1表示输出数字的小数后1位</p>
</blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];<span class="type">int</span> i=<span class="number">3</span>;</span><br><span class="line">a[i]=<span class="number">1</span>;		引用数组时，下标可以是常量</span><br><span class="line"><span class="type">int</span> x[i];	定义数组时不能用变量表示元素个数</span><br><span class="line">a[i++]=<span class="number">2</span>;	a[<span class="number">3</span>]=<span class="number">2</span>;之后i由<span class="number">3</span>变为<span class="number">4</span></span><br><span class="line">			下标必须为整数</span><br><span class="line">			不能一次引用整个数组</span><br></pre></td></tr></table></figure>

<h4 id="一位数组的初始化"><a href="#一位数组的初始化" class="headerlink" title="一位数组的初始化"></a>一位数组的初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">// 如果数组长度多于初始化值得时候，数组中未赋值的元素将默认赋值为0，相当于</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字符型数组，后面元素自动赋&#x27;\0&#x27;实质上仍是赋值0</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">4</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组初始化另一种写法，C会自动计算数组长度</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="程序例"><a href="#程序例" class="headerlink" title="程序例"></a>程序例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 编程删除数组b中下标为<span class="number">2</span>的元素</span><br><span class="line">b[<span class="number">5</span>] = &#123;<span class="number">99</span>, <span class="number">60</span>, <span class="number">75</span>, <span class="number">86</span>, <span class="number">92</span>&#125;;</span><br><span class="line">修改后</span><br><span class="line">b[<span class="number">5</span>] = &#123;<span class="number">99</span>, <span class="number">60</span>, <span class="number">86</span>, <span class="number">92</span>, <span class="number">92</span>&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 编程在数组b中的下标为<span class="number">2</span>的元素之前，插入新元素<span class="number">100</span>。</span><br><span class="line">b[<span class="number">10</span>] = &#123;<span class="number">99</span>, <span class="number">60</span>, <span class="number">75</span>, <span class="number">86</span>, <span class="number">92</span>&#125;;</span><br><span class="line">修改后</span><br><span class="line">b[<span class="number">10</span>] = &#123;<span class="number">99</span>, <span class="number">60</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">86</span>, <span class="number">92</span>&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 选择排序，将数组b从小到大排序</span><br><span class="line">b[<span class="number">5</span>] = &#123;<span class="number">99</span>, <span class="number">60</span>, <span class="number">75</span>, <span class="number">86</span>, <span class="number">92</span>&#125;;</span><br><span class="line">排序后</span><br><span class="line">b[<span class="number">5</span>] = &#123;<span class="number">60</span>, <span class="number">75</span>, <span class="number">86</span>, <span class="number">92.</span> <span class="number">99</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><blockquote>
<p>二维数组又为特殊的一维数组，它的每个元素又是一维数组</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">二维数组的定义</span><br><span class="line">数组类型 数组名[行数][列数]</span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>型的变量名为a的数组，<span class="number">2</span>行<span class="number">3</span>列</span><br></pre></td></tr></table></figure>

<blockquote>
<p>二维数组在内存中的存储形式</p>
<p>硬件存储器（内存）是连续的和线性的，二维表形式的二维数组在内存中是<code>线性存储和按行排列</code>。</p>
<p><strong>注意</strong>：</p>
<p>任何情况下，都不能省略列数（即不能省略第二个[] 内的数）;</p>
<p>在能判断出行数时，可省略行数（即可省略第一个[]内的数）；</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 只有定义时赋初值才能用 =&#123;&#125; 的形式，故上述写法错误</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第七章 函数</title>
    <url>/posts/b010d499/</url>
    <content><![CDATA[<h2 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h2><blockquote>
<p><code>C</code>源程序有函数组成：一个<code>main函数</code>和若干个其他函数组成，<code>main函数</code>调用其他函数</p>
</blockquote>
<h3 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>0<del>多个，有的函数有1</del>多个参数，有的函数没有参数</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>0~1个，有的函数有1个返回值，有的函数没有返回值</p>
<h4 id="函数分两种"><a href="#函数分两种" class="headerlink" title="函数分两种"></a>函数分两种</h4><h5 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h5><p>又称为标准函数或库函数，如<code>sqrt()</code>, <code>fabs()</code>, <code>rand()</code>…</p>
<p>需要包含对应的头文件才能调用: <code>#include &lt;xxx.h&gt;</code></p>
<h5 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h5><p>我们自己编写的函数，需要定义后才能调用</p>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数的返回值类型 函数名(参数类型<span class="number">1</span> 参数<span class="number">1</span>, 参数类型<span class="number">2</span> 参数<span class="number">2</span> ...)</span><br><span class="line">&#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="comment">// 无返回值的</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有返回值的</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数，参数不可以简写成 int a,b</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值类型包括(int, float, double, char...)</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><blockquote>
<p>调用就使用，对有参数的函数，还要同时给出参数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> d=<span class="number">2</span>;</span><br><span class="line">    p=d++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    fun(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="形式参数（简称形参）"><a href="#形式参数（简称形参）" class="headerlink" title="形式参数（简称形参）"></a>形式参数（简称形参）</h4><p>在函数定义头部中的参数，在函数未被调用时，此参数无具体值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的a,b就是形参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实际参数（简称实参）"><a href="#实际参数（简称实参）" class="headerlink" title="实际参数（简称实参）"></a>实际参数（简称实参）</h4><p>调用函数时给出的具体参数，是有具体的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的1,2就属于实参</span></span><br><span class="line">max(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><blockquote>
<p> <code>return</code>调用返回</p>
</blockquote>
<h3 id="函数的好处"><a href="#函数的好处" class="headerlink" title="函数的好处"></a>函数的好处</h3><p>程序功能被细分为若干函数，每个函数负责一个小功能，main函数负责调度、指挥个函数的工作。</p>
<table>
<thead>
<tr>
<th></th>
<th>有return语句</th>
<th>无return语句</th>
</tr>
</thead>
<tbody><tr>
<td>有返回值的函数(名前非void)</td>
<td>返回表达式的值,函数结束，返回系统默认值,函数结束</td>
<td>函数中语句执行结 束后(执行到最后的})，返回系统默认 值，函数结束</td>
</tr>
<tr>
<td>无返回值的函数(名前有void)</td>
<td>函数结束(无返回值)  ；return 表达式 这是错误的</td>
<td>函数中语句执行结 束后(执行到最后 的 } )，函数结束(无返回值)</td>
</tr>
</tbody></table>
<h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><blockquote>
<p>C语言是按照顺序编译，所以要将其他函数放在main函数前面</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 也可提前定义函数，避免出错，注意：在文件头部声明函数的时候，只可省略形参名，<code>;</code>不可省</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote>
<p>函数直接或间接的自己调用自己，称为递归。</p>
<p>递归程序，结构简练，可读性强。但执行时其时间和空间上的开销都比较大。</p>
<p>为防止自调用无休止的进行，在函数内必须设置调用终止的条件，否则程序将无法终止，被称为死递归。</p>
</blockquote>
<h4 id="递归的分析方法"><a href="#递归的分析方法" class="headerlink" title="递归的分析方法"></a>递归的分析方法</h4><p>与嵌套调用类似。</p>
<p>尽管每次调用的都是资深（同一函数），弹药把每次所调用的函数都看作是不同的函数，这些函数都具有相同的参数、返回值和语句。</p>
<h4 id="经典题型"><a href="#经典题型" class="headerlink" title="经典题型"></a>经典题型</h4><p>求阶乘</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">recursion</span><span class="params">(<span class="type">int</span> loop)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(loop == <span class="number">1</span> || loop == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> loop*recursion(loop<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的作用域和存储类别"><a href="#函数的作用域和存储类别" class="headerlink" title="函数的作用域和存储类别"></a>函数的作用域和存储类别</h3><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>只在本函数内有效</p>
<p>若未赋初值，值为随机数</p>
<p>不同函数中可使用同名变量，形参和实参也可同名（形参也是函数内的变量）</p>
<p>在复合语句中定义变量（只在复合语句“块”内有效）</p>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><blockquote>
<p>全局变量在函数外定义的变量、</p>
</blockquote>
<p>作用域：从变量定义处开始，到本程序文件末尾均有效（其中所有函数都能用）。</p>
<p>初始值自动为0。</p>
<p>全局变量可在多个函数中同时起作用，应尽量少用或不用全局变量。</p>
<h4 id="不同存储类别的变量的特点"><a href="#不同存储类别的变量的特点" class="headerlink" title="不同存储类别的变量的特点"></a>不同存储类别的变量的特点</h4><table>
<thead>
<tr>
<th>变量定义前加</th>
<th>auto</th>
<th>static</th>
<th>register</th>
</tr>
</thead>
<tbody><tr>
<td>存储位置</td>
<td>内存动态存储区</td>
<td>内存静态存储区</td>
<td>CPU寄存器(没在内存)</td>
</tr>
<tr>
<td>作用域</td>
<td>所在函数内，或所在复合语句 {  } 内有效</td>
<td>同auto</td>
<td>同auto</td>
</tr>
<tr>
<td>生存期</td>
<td>离开函数或{ }就消失</td>
<td>永久保留</td>
<td>同auto</td>
</tr>
<tr>
<td>初值</td>
<td>随机数,初值重新赋值</td>
<td>值为0，初值只赋一次</td>
<td>同auto</td>
</tr>
</tbody></table>
<h3 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h3><blockquote>
<p>宏定义，只会替换文本，不会计算</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 13</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>先预处理，再编译；预处理部分不编译</p>
</blockquote>
<p>预处理阶段将宏定义字符串替换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M (y*y+3*y)</span></span><br><span class="line"></span><br><span class="line">语句为</span><br><span class="line">s=<span class="number">3</span>*M + <span class="number">4</span>*M;</span><br><span class="line"></span><br><span class="line">预处理后</span><br><span class="line">s=<span class="number">3</span>*(y*y+<span class="number">3</span>*y) + <span class="number">4</span>*(y*y+<span class="number">3</span>*y)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3+5</span></span><br><span class="line">main() </span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span>*N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理后</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() </span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span>*<span class="number">3</span>+<span class="number">5</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此例为错误示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3+5; </span></span><br><span class="line">main() </span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span>*N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理后,这种情况是错的，不能这么写</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main() </span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">2</span>*<span class="number">3</span>+<span class="number">5</span>; ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT printf(<span class="string">&quot;*&quot;</span>); </span></span><br><span class="line">main()</span><br><span class="line">&#123;	PRINT  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理后</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;	 <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><blockquote>
<p>预处理后会将头文件替换掉</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;头文件名.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;头文件名.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>c源程序 -&gt; 预处理 -&gt; 编译 -&gt; 运行</p>
</blockquote>
]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第八章 指针（上）</title>
    <url>/posts/5665f6df/</url>
    <content><![CDATA[<h2 id="第八章-指针（上）"><a href="#第八章-指针（上）" class="headerlink" title="第八章 指针（上）"></a>第八章 指针（上）</h2><h3 id="地址和指针的基本概念"><a href="#地址和指针的基本概念" class="headerlink" title="地址和指针的基本概念"></a>地址和指针的基本概念</h3><blockquote>
<p>内容可变，地址不可变</p>
</blockquote>
<h4 id="有了变量的地址，存取变量就可以通过两种方式"><a href="#有了变量的地址，存取变量就可以通过两种方式" class="headerlink" title="有了变量的地址，存取变量就可以通过两种方式"></a>有了变量的地址，存取变量就可以通过两种方式</h4><ol>
<li>通过变量名</li>
<li>通过变量的地址</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指针变量</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量类型 int *; 变量名为 p</span></span><br><span class="line"><span class="comment">// 指针变量一律占4个字节</span></span><br></pre></td></tr></table></figure>

<h4 id="基类型"><a href="#基类型" class="headerlink" title="基类型"></a>基类型</h4><p>指针变量所指向的变量的类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> b = <span class="number">8.2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">double</span> *q;</span><br><span class="line"><span class="type">void</span> *r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p为int *型，只能指向int型</span></span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="comment">// q为double *型，只能指向double型</span></span><br><span class="line">q = &amp;b;</span><br><span class="line"><span class="comment">// r为void *型，可以指向任何类型</span></span><br><span class="line">r = &amp;a;</span><br><span class="line">r = &amp;b;</span><br></pre></td></tr></table></figure>

<h3 id="指针变量的赋值"><a href="#指针变量的赋值" class="headerlink" title="指针变量的赋值"></a>指针变量的赋值</h3><blockquote>
<p>指针变量值为0（地址值为0）时，表示什么也不指向 - 空指针。【地址值为NULL也表示空指针】</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br></pre></td></tr></table></figure>

<p>赋值语句的方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure>

<p>定义指针变量时初始化（定义时赋初值）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> *q = &amp;b;</span><br></pre></td></tr></table></figure>

<p>允许指针变量之间赋值，但另两个指针变量必须基类型相同</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">q = p;</span><br><span class="line"><span class="type">int</span> *r;</span><br><span class="line">r = q;</span><br></pre></td></tr></table></figure>

<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="comment">// 下面两种情况都表示空指针</span></span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// NULL（全大写），系统定义的宏 #define NULL 0</span></span><br><span class="line">p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="两运算符"><a href="#两运算符" class="headerlink" title="两运算符(&amp;, *)"></a>两运算符(<code>&amp;</code>, <code>*</code>)</h3><h4 id="取地址运算符"><a href="#取地址运算符" class="headerlink" title="&amp;取地址运算符"></a><code>&amp;</code>取地址运算符</h4><blockquote>
<p>获取变量的地址，用法：&amp;变量名</p>
</blockquote>
<h4 id="指针运算符（间接访问运算符）"><a href="#指针运算符（间接访问运算符）" class="headerlink" title="*指针运算符（间接访问运算符）"></a><code>*</code>指针运算符（间接访问运算符）</h4><blockquote>
<p>获取或改写以p为地址的内存内容</p>
</blockquote>
<p><code>*p</code>，<code>*</code>不是获得或改变指针变量本身的值，而是获得或改写它所指向单元的值。</p>
<p><code>int *p</code>，<code>*</code>运算只能用于指针变量，不能用于普通变量（如<code>*a</code>错误）；</p>
<blockquote>
<p><code>&amp;</code>和<code>*</code>互为逆运算</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">p == &amp;a;</span><br><span class="line"></span><br><span class="line">*p == *&amp;a == a;</span><br><span class="line"></span><br><span class="line">&amp;*p == p;</span><br><span class="line"></span><br><span class="line">&amp;*&amp;*&amp;*p == p;</span><br><span class="line"></span><br><span class="line">*&amp;*&amp;*&amp;p == a;</span><br></pre></td></tr></table></figure>

<h3 id="数组的指针"><a href="#数组的指针" class="headerlink" title="数组的指针"></a>数组的指针</h3><h4 id="指针变量的运算"><a href="#指针变量的运算" class="headerlink" title="指针变量的运算"></a>指针变量的运算</h4><blockquote>
<p>指向向前或向后移动n个单元，</p>
<p>p+n&#x3D;p中的地址编号 + (每元素字节数*n)</p>
<p>p-n&#x3D;p中的地址编号 - (每元素字节数*n)</p>
<p>概运算应只针对<code>指向数组的指针变量</code>进行，否则毫无意义</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// p++运算后与&amp;a[2]相等</span></span><br><span class="line">p++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p+=2 运算后与&amp;a[4]相等</span></span><br><span class="line">p+=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>每个 <code>char</code> 型变量占1个字节，对基类型为<code>char</code>的指针变量+n，恰好是地址+n</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c[<span class="number">4</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="type">char</span> *p = &amp;c[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>void 类型的指针不能做+(-)n的运算（也不能++, –的运算）</p>
</blockquote>
<h5 id="指针的变量相减"><a href="#指针的变量相减" class="headerlink" title="指针的变量相减"></a>指针的变量相减</h5><blockquote>
<p>两指针变量的加减乘除运算时没有意义的。</p>
<p>p1 - p2 &#x3D; (p1中的地址编号 - p2中的地址编号)&#x2F;镁元素字节数</p>
</blockquote>
<h5 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h5><p>该运算一般只对指向同一数组的元素的两个指针变量进项，表示他们所指向元素的先后位置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示p1和p2指向数组的同一个元素</span></span><br><span class="line">p1 == p2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示p1所指元素位于p2所指元素之后;</span></span><br><span class="line">p1 &gt; p2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示p1所指元素位于p2所指元素之前;</span></span><br><span class="line">p1 &lt; p2</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与0和NULL比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示p为空指针</span></span><br><span class="line">p == <span class="number">0</span>;</span><br><span class="line">p == <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示p不是空指针</span></span><br><span class="line">p != <span class="number">0</span>;</span><br><span class="line">p != <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h5 id="数组元素的地址转换为元素下标"><a href="#数组元素的地址转换为元素下标" class="headerlink" title="数组元素的地址转换为元素下标"></a>数组元素的地址转换为元素下标</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p, *q;</span><br><span class="line">q = &amp;a[<span class="number">0</span>];</span><br><span class="line">p = &amp;a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">p - a 则得<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="两个重要公式"><a href="#两个重要公式" class="headerlink" title="两个重要公式"></a>两个重要公式</h4><h5 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h5><blockquote>
<p>编译时编译系统将<code>a[i]</code>全部变为<code>*(a+i)</code>.</p>
<p><code>a[i]</code>就是语法糖，便于我们理解而设计的成为语法糖。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">a + i == &amp;a[i];</span><br><span class="line"></span><br><span class="line">a[i] == *(a+i)</span><br></pre></td></tr></table></figure>

<h5 id="指针变量可写为数组的形式"><a href="#指针变量可写为数组的形式" class="headerlink" title="指针变量可写为数组的形式"></a>指针变量可写为数组的形式</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p = x[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">x[i] == *(x+i);</span><br><span class="line"></span><br><span class="line">&amp;x[i] == x+i;</span><br></pre></td></tr></table></figure>

<h4 id="指针变量与一位数组名的统一"><a href="#指针变量与一位数组名的统一" class="headerlink" title="指针变量与一位数组名的统一"></a>指针变量与一位数组名的统一</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"></span><br><span class="line">p = a;</span><br><span class="line">p = &amp;a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>] == *p == a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">p[i] == a[i];</span><br><span class="line">*(p+i) == *(a+i);</span><br><span class="line"></span><br><span class="line">p 和 a 不能互相转换</span><br><span class="line">p的值（地址）可被修改，a的值（地址）不能被修改</span><br><span class="line">p是变量，a是假想的“指针变量”（是常量）</span><br></pre></td></tr></table></figure>

<h4 id="指针运算的优先级"><a href="#指针运算的优先级" class="headerlink" title="指针运算的优先级"></a>指针运算的优先级</h4><p><code>&amp;</code>, <code>*</code>的优先级和<code>++</code>, <code>--</code>相同，都非常高，仅次于<code>()</code></p>
<p>与<code>++</code>, <code>--</code>统计运算时，从右至左结合</p>
<h3 id="二维数组的指针"><a href="#二维数组的指针" class="headerlink" title="二维数组的指针"></a>二维数组的指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 行指针</span></span><br><span class="line"><span class="type">int</span> (*q)[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">q = a; </span><br></pre></td></tr></table></figure>

<h4 id="一个表格、两句法则"><a href="#一个表格、两句法则" class="headerlink" title="一个表格、两句法则"></a>一个表格、两句法则</h4><table>
<thead>
<tr>
<th></th>
<th>草稿写法</th>
<th>±1效果</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>二级指针</td>
<td>[[]]</td>
<td>移动一行</td>
<td>int (*q)[4];     int <code>b[3][4];</code> 中的b</td>
</tr>
<tr>
<td>二级指针</td>
<td>[[]]</td>
<td>必移动4字节</td>
<td>int **r;      int *s[3];   中的s</td>
</tr>
<tr>
<td>一级指针</td>
<td>[]</td>
<td>移动一个单位(int型4字节，char型1字节…)</td>
<td>int *p;   int a[2]; 中的a</td>
</tr>
<tr>
<td>普通变量</td>
<td></td>
<td>变量值±1</td>
<td>int x;</td>
</tr>
</tbody></table>
<p>法则：</p>
<ol>
<li>定义变量时：一个<code>*</code>或一个<code>[]</code>升一级</li>
<li>使用时：一个<code>*</code>或一个<code>[]</code>降一级；一个<code>&amp;</code>升一级</li>
</ol>
<h4 id="两个重要公式-1"><a href="#两个重要公式-1" class="headerlink" title="两个重要公式"></a>两个重要公式</h4><blockquote>
<p>二维数组元素的写法 <code>a[i][j]</code> 是<code>*(*(a+i)+j)</code>的语法糖</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x[i] == *(x+i);</span><br><span class="line"></span><br><span class="line">&amp;x[i] == x+i;</span><br><span class="line"></span><br><span class="line">a[i] == *(a+i) == q[i] == *(q+i);</span><br><span class="line"></span><br><span class="line">q[i][j] == *(a[i]+j) == *(*(a+i)+j)==q[i][j] == *(q[i]+j) == *(*(q+i)+j)；</span><br><span class="line"></span><br><span class="line">特殊的 i=<span class="number">0</span>,j=<span class="number">0</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] == **a;</span><br><span class="line">&amp;a[<span class="number">0</span>][<span class="number">0</span>] == *a;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第八章 指针（下）</title>
    <url>/posts/eed991ba/</url>
    <content><![CDATA[<h2 id="第八章-指针（下）"><a href="#第八章-指针（下）" class="headerlink" title="第八章 指针（下）"></a>第八章 指针（下）</h2><h3 id="指针变量做函数参数"><a href="#指针变量做函数参数" class="headerlink" title="指针变量做函数参数"></a>指针变量做函数参数</h3><blockquote>
<p>如果要改变a, b的值，要使用指针指向a,b</p>
</blockquote>
<p>输入两个数，如果第一个数大于第二个数，则交换两个数，否则直接输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="keyword">if</span>(a&lt;b) swap(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	temp = *p;</span><br><span class="line">	*p = *q;</span><br><span class="line">	*q = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组函数参数"><a href="#数组函数参数" class="headerlink" title="数组函数参数"></a>数组函数参数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] == <span class="type">int</span> *a;</span><br><span class="line"><span class="type">int</span> a[N] == <span class="type">int</span> *a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N][<span class="number">4</span>] = <span class="type">int</span> (*a)[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> a[][<span class="number">4</span>] = <span class="type">int</span> (*a)[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *a[N] == <span class="type">int</span> *a;</span><br><span class="line"><span class="type">int</span> *a[] == <span class="type">int</span> *a;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">double</span> d[<span class="number">3</span>] = &#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">4.3</span>&#125;;</span><br><span class="line">	fun_add(d);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, d[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun_add</span><span class="params">(<span class="type">double</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	p[<span class="number">1</span>] = p[<span class="number">0</span>] + p[<span class="number">2</span>];</span><br><span class="line">	<span class="comment">// 上面一行代码与下一行相同</span></span><br><span class="line">	<span class="comment">//*(p+1) = *p + *(p+2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的指针"><a href="#函数的指针" class="headerlink" title="函数的指针"></a>函数的指针</h3><h3 id="字符串的指针"><a href="#字符串的指针" class="headerlink" title="字符串的指针"></a>字符串的指针</h3><blockquote>
<p>字符串结尾会有<code>\0</code>来标识当前字符串的结束</p>
<p>初值个数不得超过数组大小</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch[<span class="number">20</span>] = <span class="string">&quot;HelloWorld&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>以char *型指针变量保存字符串首地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *ps = <span class="string">&quot;iPhone&quot;</span>;</span><br><span class="line"><span class="comment">// 只是将ps的指向地址改变，而不保存字符串内容本身。</span></span><br><span class="line">ps = <span class="string">&quot;iPad&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;iTouch&quot;</span>;</span><br><span class="line"><span class="comment">// 可以</span></span><br><span class="line">ps = s;</span><br><span class="line"><span class="comment">// 错误，s的值不可以改变</span></span><br><span class="line">s = <span class="string">&quot;iMac&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="字符串的输入输出"><a href="#字符串的输入输出" class="headerlink" title="字符串的输入输出"></a>字符串的输入输出</h3><blockquote>
<p>printf(“%s”, 一级地址);</p>
<p>其含义时从改地址开始逐个字符输出，直到遇到<code>&#39;\0&#39;</code>为止（<code>\0</code>不输出，也不自动换行）</p>
<p>输出字符串其他略有不同，后面要接地址，而不是直接接数据</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, 数据);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, 数据);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, 数据);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, 地址);</span><br></pre></td></tr></table></figure>

<h4 id="puts-一级地址"><a href="#puts-一级地址" class="headerlink" title="puts(一级地址)"></a>puts(一级地址)</h4><blockquote>
<p>其含义是从地址开始逐个字符输出，直至<code>\0</code>为止（<code>\0</code>不输出）；然后自动换行（即最后再多输出一个<code>&#39;\n&#39;</code>）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(ps);</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ps);</span><br></pre></td></tr></table></figure>

<h4 id="scanf-“-s”-一级地址"><a href="#scanf-“-s”-一级地址" class="headerlink" title="scanf(“%s”, 一级地址)"></a>scanf(“%s”, 一级地址)</h4><blockquote>
<p>其含义是：读入键盘键入的一个字符串（最后要键入回车表示结束，但不键入’\0’），存入“一级地址”开始的一顿内存空间（回车符不存入），并自动在最后一个字符的后面添加<code>&#39;\0&#39;</code>。</p>
<p><strong>如果字符串中含有空格或Tab符，只能读入空格或Tab符之前的部分（不读空格和Tab符）。</strong></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line"><span class="comment">// 此时输入 how are you? &lt;回车&gt;</span></span><br><span class="line"><span class="comment">// 只会输出 how</span></span><br></pre></td></tr></table></figure>

<h4 id="gets-一级地址"><a href="#gets-一级地址" class="headerlink" title="gets(一级地址)"></a>gets(一级地址)</h4><blockquote>
<p>其含义是：读入从键盘键入的一行字符（最后一定要键入回车表示结束，但不键入<code>&#39;\0&#39;</code>，存入“一级地址”开始的一顿内存空间（回车符不存入），并自动在最后一个字符的后面添加<code>&#39;\0&#39;</code>。如果字符串中含有空格、Tab符也一起读入并不中断。）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> b[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line"><span class="comment">// 此时输入 how are you? &lt;回车&gt;</span></span><br><span class="line"><span class="comment">// 会整句输出</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串处理（常用套路）"><a href="#字符串处理（常用套路）" class="headerlink" title="字符串处理（常用套路）"></a>字符串处理（常用套路）</h3><h4 id="数组法"><a href="#数组法" class="headerlink" title="数组法"></a>数组法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; s[i]!=<span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(s[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; s[i];i++)</span><br><span class="line">	<span class="built_in">printf</span>(s[i]);</span><br></pre></td></tr></table></figure>

<h4 id="指针法"><a href="#指针法" class="headerlink" title="指针法"></a>指针法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p;</span><br><span class="line">p = 字符串起始地址;</span><br><span class="line"><span class="keyword">while</span>(*p != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    用*p访问或处理每个字符;</span><br><span class="line">    p++;	<span class="comment">//使p指向字符串的下一个字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-和末尾字符定位"><a href="#0-和末尾字符定位" class="headerlink" title="&#39;\0&#39;和末尾字符定位"></a><code>&#39;\0&#39;</code>和末尾字符定位</h4><p>让p指向字符串的最后一个字符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(*p)</span><br><span class="line">	p++;</span><br><span class="line">p--;</span><br></pre></td></tr></table></figure>

<h4 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s1[<span class="number">20</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ps1 = s1;</span><br><span class="line"><span class="keyword">while</span>(*ps1) ps1++;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *ps2 = s2;</span><br><span class="line"><span class="keyword">while</span>(*ps2)</span><br><span class="line">&#123;</span><br><span class="line">    *ps1 = *ps2;</span><br><span class="line">    ps1++;</span><br><span class="line">    ps2++;</span><br><span class="line">&#125;</span><br><span class="line">*ps1=<span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="字符串倒序"><a href="#字符串倒序" class="headerlink" title="字符串倒序"></a>字符串倒序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *p, *q, t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(*q) q--;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(*p)</span><br><span class="line">    &#123;</span><br><span class="line">        t = *q;</span><br><span class="line">        *q = *p;</span><br><span class="line">        *p = t;</span><br><span class="line">        p++;q++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> st[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;正序： %s&quot;</span>, st);</span><br><span class="line">    reverse(st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;倒序： %s&quot;</span>, st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><blockquote>
<p>使用以下函数要包含头文件 <code>#include &lt;string.h&gt;</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>含义</th>
<th>功能详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>strlen(地址)</td>
<td>求字符串长度</td>
<td>函数返回值为字符串的长度，即从地址开始到’\0’的字符个数（不计’\0’，但其中空格、Tab符、回车符等都计数）</td>
</tr>
<tr>
<td>strcat(串1地址,   串2地址)</td>
<td>字符串连接   “串1&#x3D;串1+串2”</td>
<td>把从串2地址开始到’\0’的内容，连接到串1的后面（删去串1最后的’\0’），结果仍存入串1地址开始的空间中，并在结果字符串末尾自动添加新’\0’（串1地址的空间应足够大）</td>
</tr>
<tr>
<td>strcpy(串1地址,   串2地址)</td>
<td>字符串拷贝   “串1&#x3D;串2”</td>
<td>把从串2地址开始到’\0’的内容，拷贝到串1地址开始的空间中，’\0’也一同拷贝（串1地址的空间应足够大）</td>
</tr>
<tr>
<td>strcmp(串1地址,   串2地址)</td>
<td>字符串比较   “串1&gt;串2”   “串1&lt;串2”   “串1&#x3D;&#x3D;串2”</td>
<td>两个字符串的大小结果由函数返回值说明：   若函数返回值 &gt; 0，说明 串1 &gt; 串2    若函数返回值 &lt; 0，说明 串1 &lt; 串2    若函数返回值 &#x3D;&#x3D; 0，说明   串1 &#x3D; &#x3D; 串2</td>
</tr>
</tbody></table>
<h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3><blockquote>
<p>求占用多少字节，结果为整数</p>
<p>sizeof 是运算符，不是函数，同时也是关键字</p>
</blockquote>
<p><code>sizeof(类型 或表达式)</code></p>
<h3 id="常用字符函数"><a href="#常用字符函数" class="headerlink" title="常用字符函数"></a>常用字符函数</h3><blockquote>
<p>需要包含头文件 #include <code>&lt;ctype.h&gt;</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>isalpha(ch)</th>
<th>检查ch是否为字母字符，是返回1，否返回0</th>
</tr>
</thead>
<tbody><tr>
<td>isdigit(ch)</td>
<td>检查ch是否为数字字符，是返回1，否返回0</td>
</tr>
<tr>
<td>isspace(ch)</td>
<td>检查ch是否为空白分隔符，即是否为空格、跳格(Tab,  ‘\t’)、换行符(‘\n’)、回车符(‘\r’)、换页符(‘\f’)5种之一。   如是这些字符返回1，否则返回0</td>
</tr>
<tr>
<td>islower(ch)</td>
<td>检查ch是否为小写字母字符，是返回1，否返回0</td>
</tr>
<tr>
<td>isupper(ch)</td>
<td>检查ch是否为大写字母字符，是返回1，否返回0</td>
</tr>
<tr>
<td>tolower(ch)</td>
<td>将ch转换为小写字母，函数返回转换后的字符</td>
</tr>
<tr>
<td>toupper(ch)</td>
<td>将ch转换为大写字母，函数返回转换后的字符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 第九章 结构体</title>
    <url>/posts/1cbbe043/</url>
    <content><![CDATA[<h2 id="第九章-结构体"><a href="#第九章-结构体" class="headerlink" title="第九章 结构体"></a>第九章 结构体</h2><h3 id="自定义类型-–-结构体"><a href="#自定义类型-–-结构体" class="headerlink" title="自定义类型 – 结构体"></a>自定义类型 – 结构体</h3><blockquote>
<p>结构体类型，不占内存，不能保存数据；</p>
<p>内存空间，可以保存数据</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy1</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>sizeof对类型和变量均可使用</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(boy1);</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu);</span><br></pre></td></tr></table></figure>

<h3 id="结构体类型变量的定义方式"><a href="#结构体类型变量的定义方式" class="headerlink" title="结构体类型变量的定义方式"></a>结构体类型变量的定义方式</h3><h4 id="先定义类型，再定义变量"><a href="#先定义类型，再定义变量" class="headerlink" title="先定义类型，再定义变量"></a>先定义类型，再定义变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy1</span>,<span class="title">boy2</span>;</span></span><br></pre></td></tr></table></figure>

<h4 id="定义类型的同时，定义变量"><a href="#定义类型的同时，定义变量" class="headerlink" title="定义类型的同时，定义变量"></a>定义类型的同时，定义变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;boy1, boy2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy3</span>;</span></span><br></pre></td></tr></table></figure>

<h4 id="定义类型的同时定义变量，但省略类型名"><a href="#定义类型的同时定义变量，但省略类型名" class="headerlink" title="定义类型的同时定义变量，但省略类型名"></a>定义类型的同时定义变量，但省略类型名</h4><blockquote>
<p>因无类型名，无法再重新定义其他变量</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;boy1, boy2;</span><br></pre></td></tr></table></figure>

<h3 id="结构体类型变量的初始化"><a href="#结构体类型变量的初始化" class="headerlink" title="结构体类型变量的初始化"></a>结构体类型变量的初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy1</span>,<span class="title">boy2</span> =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;zhao&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">85.5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以整体赋值，直接将boy2的值直接赋给boy1</span></span><br><span class="line">boy1 = boy2;</span><br></pre></td></tr></table></figure>

<h3 id="结构体类型的数组"><a href="#结构体类型的数组" class="headerlink" title="结构体类型的数组"></a>结构体类型的数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">ss</span>[3];</span></span><br><span class="line"></span><br><span class="line">ss[<span class="number">0</span>].num = <span class="number">1001</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ss[<span class="number">1</span>].name, <span class="string">&quot;Qian&quot;</span>);</span><br><span class="line">ss[<span class="number">2</span>].score=<span class="number">92.0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="结构指针变量"><a href="#结构指针变量" class="headerlink" title="结构指针变量"></a>结构指针变量</h3><blockquote>
<p>结构体变量用 <code>.</code></p>
<p>结构体指针变量用 <code>-&gt;</code></p>
<p>(<code>*</code>结构体指针变量)用<code>.</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span>;</span></span><br><span class="line">p=&amp;boy1;</span><br><span class="line"></span><br><span class="line">p -&gt; num=<span class="number">100</span>;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">boy1.num=<span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;name, <span class="string">&quot;Zhang&quot;</span>);</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="built_in">strcpy</span>(boy1.name, <span class="string">&quot;Zhang&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处()不可省略，点和-&gt;的优先级都最该(与括号相当)</span></span><br><span class="line">(*p).score=<span class="number">92.0</span>;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">boy1.score=<span class="number">92.0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="结构体类型数据做函数参数"><a href="#结构体类型数据做函数参数" class="headerlink" title="结构体类型数据做函数参数"></a>结构体类型数据做函数参数</h3><blockquote>
<p>用法与传普通变量类似，</p>
</blockquote>
<p>结构体类型变量做函数参数，不会改变原来的实参的值。</p>
<p>结构体指针做函数参数，可以修改原来实参的值。</p>
<h3 id="结构体类型的嵌套"><a href="#结构体类型的嵌套" class="headerlink" title="结构体类型的嵌套"></a>结构体类型的嵌套</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">birthday</span>;</span></span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">int</span> year;</span><br><span class="line">        <span class="type">int</span> month;</span><br><span class="line">        <span class="type">int</span> day;</span><br><span class="line">    &#125; birthday;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="类型定义语句typedef"><a href="#类型定义语句typedef" class="headerlink" title="类型定义语句typedef"></a>类型定义语句<code>typedef</code></h3><blockquote>
<p>为类型起“绰号”，并不产生新的数据类型，只是给已有的类型增加新名</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> real;</span><br><span class="line"></span><br><span class="line">real a,b;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="type">double</span> a,b;</span><br></pre></td></tr></table></figure>

<h3 id="C语言常用内存管理库函数（包含stdlib-h）"><a href="#C语言常用内存管理库函数（包含stdlib-h）" class="headerlink" title="C语言常用内存管理库函数（包含stdlib.h）"></a>C语言常用内存管理库函数（包含<code>stdlib.h</code>）</h3><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="left">介绍</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">malloc</td>
<td align="left">分配1块长度为size字节的连续内存空间（不清零），函数返回该空间的首地址；如分配失败函数返回0</td>
<td align="left">(类型说明符*)malloc(size)</td>
</tr>
<tr>
<td align="center">calloc</td>
<td align="left">分配n块、每块长度为size字节的连续内存空间（共size×n字节），并将该空间中的内容全部清零，函数返回该空间的首地址；如分配失败函数返回0</td>
<td align="left">(类型说明符*)calloc(n,size)</td>
</tr>
<tr>
<td align="center">free</td>
<td align="left">释放ptr所指向的一块内存空间，ptr是由malloc或calloc函数所分配空间的地址，即是这两个函数的返回值（或类型转换后的返回值）</td>
<td align="left">free(ptr)（ptr为任意基类型的指针）</td>
</tr>
</tbody></table>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote>
<p>以链接方式存储的线性表，链表各元素的逻辑结构与存储结构一般不一致。</p>
<p>链表类型：单向链表，双向链表，循环链表。。。</p>
</blockquote>
<h4 id="链表介绍"><a href="#链表介绍" class="headerlink" title="链表介绍"></a><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTkzJUJFJUU4JUExJUE4">链表介绍<i class="fa fa-external-link-alt"></i></span></h4><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><blockquote>
<p>一个单向链表的节点分为两个部分，第一部分保存或者显示节点的相关信息，第二部分存储下一个节点的地址。单向链表只向一个方向遍历。</p>
</blockquote>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/612px-Singly-linked-list.svg.png" alt="单向链表"></p>
<p>链表的一种，特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始；列表有节点构成，head指针指向第一个称为表头节点，而终止于最后一个指向NULL的指针。</p>
<h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><blockquote>
<p>比单向链表多一个的是，双向链表每个节点有两个链接，一个指向前一个节点，而另一个指向下一个节点，当为最后一个节点时，指向空值或空列表。</p>
</blockquote>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/915px-Doubly-linked-list.svg.png" alt="双向链表"></p>
<h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><blockquote>
<p>在一个循环链表中，首节点和末节点被连接在一起。这种方式，单向和双向都可实现。</p>
</blockquote>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Circularly-linked-list.svg/525px-Circularly-linked-list.svg.png" alt="循环链表"></p>
<h4 id="链表的创建与输出"><a href="#链表的创建与输出" class="headerlink" title="链表的创建与输出"></a>链表的创建与输出</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nodelist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">	<span class="type">int</span> score;</span><br><span class="line">    <span class="comment">// 指向下一个链表的指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">nodelist</span> *<span class="title">next</span>;</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义结构体类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">nodelist</span> <span class="title">SNODE</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表</span></span><br><span class="line">SNODE *<span class="title function_">create_list</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">	SNODE *head=<span class="literal">NULL</span>, *node=<span class="literal">NULL</span>, *end=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	head = (SNODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SNODE));</span><br><span class="line">	end = head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;data; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		node = (SNODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SNODE));</span><br><span class="line">		node-&gt;score = i;</span><br><span class="line">		end-&gt;next = node;</span><br><span class="line">		end = node;</span><br><span class="line">	&#125;</span><br><span class="line">	end-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">out_list</span><span class="params">(SNODE *h)</span></span><br><span class="line">&#123;</span><br><span class="line">	SNODE *p;</span><br><span class="line">	p = h-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;score);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> data = <span class="number">3</span>;</span><br><span class="line">	SNODE *head;</span><br><span class="line">	head = create_list(data);</span><br><span class="line">	out_list(head);</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表节点的插入和删除"><a href="#链表节点的插入和删除" class="headerlink" title="链表节点的插入和删除"></a>链表节点的插入和删除</h4><h5 id="节点的插入"><a href="#节点的插入" class="headerlink" title="节点的插入"></a>节点的插入</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p = new <span class="keyword">struct</span> node;</span><br><span class="line">p-&gt;data = <span class="number">95.5</span>;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = p;</span><br></pre></td></tr></table></figure>

<h5 id="节点的删除"><a href="#节点的删除" class="headerlink" title="节点的删除"></a>节点的删除</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">delete p;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C Language</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第一天</title>
    <url>/posts/6dc31817/</url>
    <content><![CDATA[<ol>
<li>BFC（块格式化上下文）</li>
<li>首页白屏</li>
<li>函数柯里化</li>
<li>bind、apply、call</li>
<li>如果阻塞了JS中的主线程会发生什么情况</li>
<li>浏览器和Node 事件循环机制区别</li>
</ol>
<hr>
<span id="more"></span>

<h3 id="BFC（块格式化上下文）"><a href="#BFC（块格式化上下文）" class="headerlink" title="BFC（块格式化上下文）"></a>BFC（块格式化上下文）</h3><p>常见的定位方案分为三种：普通流、浮动、绝对定位。</p>
<p><strong>块格式化上下文（Block Formatting Context，BFC）</strong> 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。而这里的 <code>BFC</code> 属于属于普通流，相当于具有 <code>BFC</code> 特性的元素可以看作一个独立的容器，无论容器内部的元素怎么调整，都不会影响到外部的元素。</p>
<p>下列情况会创建BFC：</p>
<ul>
<li>根元素(<code>&lt;html&gt;</code>)</li>
<li>浮动元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float"><code>float</code></a> 不是 <code>none</code>）</li>
<li>绝对定位元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position"><code>position</code></a> 为 <code>absolute</code> 或 <code>fixed</code>）</li>
<li>行内块元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>inline-block</code>）</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> 值不为 <code>visible</code> 的块元素</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 值为 <code>flow-root</code> 的元素</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain"><code>contain</code></a> 值为 <code>layout</code>、<code>content</code>或 paint 的元素</li>
<li>弹性元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>flex</code> 或 <code>inline-flex</code>元素的直接子元素）</li>
<li>网格元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li>
<li>…</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 45%; height: 300px; background-color: red; float: left;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 45%; height: 300px; background-color: blue; float: right;&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这几行代码，如果直接运行会在网页上按照我们的预期显示出来两个色块，但仔细看下，会看出父元素的高度不正常，父元素看起来向空容器一样。原因在于子元素采用浮动，而浮动流不属于普通流，是独立定位的。</p>
<p>解决方法，按照上述规则，使用一个合适的方法，来进行创建BFC，从而告诉浏览器 <code>”我的最外层div需要创建BFC，按照常规方式渲染“</code>。</p>
<p>例如：在最外层 <code>div</code> 添加样式 <code>float: left</code>（上述规则指出只要 <code>float</code> 不为 <code>none</code> 即可创建BFC ） ,  当然如果觉得 float 不够优雅，还可以使用 <code>overflow: hidden;</code> 。（通常情况下，我们可能会使用伪元素添加 <code>clear:both;</code> 占位来清除浮动，从而使最外层 div 恢复正常）。</p>
<p>详情请看，请看<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMDkvMDQvZmxvYXRfY2xlYXJpbmcuaHRtbA==">阮老师的文章<i class="fa fa-external-link-alt"></i></span>。</p>
<p>还有<strong>经典问题 <code>margin</code> 重叠问题</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行之后就会发现 两个 p标签 <code>margin</code> 发生重叠（同一个BFC内，两盒子垂直，就会发生 <code>margin</code> 塌陷重叠，而<code>margin</code> 值会以最大的为主。）</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200624115734.png" alt="image-20200624115733942"></p>
<p>解决方法：</p>
<ol>
<li>将 margin 换为 padding</li>
<li>利用 <code>BFC</code> ，在 p 外层添加个一层 div，并在新添加的元素上添加样式（overflow: hidden;），创建新的BFC，这样两个p标签不属于同一个BFC，则自然不会再发生 margin 重叠问题。</li>
</ol>
<h3 id="首页白屏"><a href="#首页白屏" class="headerlink" title="首页白屏"></a>首页白屏</h3><p>现在多数都使用的为Vue、React和Angular三大框架其中之一，但它们有个共同的特点，均为 JS 驱动，所以在 JS 解析前，网页处于空白页，什么都不显示，这就是我们所说的白屏。</p>
<p>解决方法</p>
<ol>
<li>SSR，服务端渲染，有明显的好处，对SEO友好，还可以加快网页打开速度。</li>
<li>预渲染，插件 <code>prerender-spa-plugin</code>，编译阶段就将对应的页面渲染好，但是是没有数据的</li>
<li>骨架图，数据还未加载出来时，但会显示出网页的大致骨架，相对友好。</li>
</ol>
<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>柯里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> len = fn.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">bindFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; len) &#123;</span><br><span class="line">      <span class="keyword">return</span> bindFn.<span class="title function_">bind</span>(<span class="literal">null</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">call</span>(<span class="literal">null</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原版</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 柯里化后</span></span><br><span class="line"><span class="keyword">var</span> curryAdd = <span class="title function_">curry</span>(add)</span><br><span class="line"><span class="title function_">curryAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h3 id="bind、apply和call"><a href="#bind、apply和call" class="headerlink" title="bind、apply和call"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZA==">bind<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYXBwbHk=">apply<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vY2FsbA==">call<i class="fa fa-external-link-alt"></i></span></h3><p><strong>func.bind(thisArg[, arg1[, arg2[, …]]])</strong></p>
<p>调用函数后，返回绑定 <code>this</code> 之后的函数（以下为mdn文档中的案例），并不会执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unboundGetX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unboundGetX</span>()); <span class="comment">// 直接调用，this指向全局</span></span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundGetX = unboundGetX.<span class="title function_">bind</span>(<span class="variable language_">module</span>); <span class="comment">// 绑定this为module，this指向moudle</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>());</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br></pre></td></tr></table></figure>



<p><strong>func.apply(thisArg, [argsArray])</strong></p>
<p><code>apply</code> 接受一个<strong>参数数组</strong> ，并会执行此函数，如果没有传递参数（或传入 <code>null</code> 、 <code>undefined</code>）则默认指向 <code>window</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="comment">// expected output: 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min);</span><br><span class="line"><span class="comment">// expected output: 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>function.call(thisArg, arg1, arg2, …)</strong></p>
<p> <code>call</code> 接受的是一个<strong>参数列表</strong> ，并会执行此函数，如果没有传递参数（或传入 <code>null</code> 、 <code>undefined</code>）则默认指向 <code>window </code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Product</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Food</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">  <span class="comment">// 将Product的this指向为Food，并传入参数</span></span><br><span class="line">  <span class="title class_">Product</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, price);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">category</span> = <span class="string">&#x27;food&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Food</span>(<span class="string">&#x27;cheese&#x27;</span>, <span class="number">5</span>).<span class="property">name</span>);</span><br><span class="line"><span class="comment">// expected output: &quot;cheese&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="如果阻塞了JS中的主线程会发生什么情况，就是下面的代码。"><a href="#如果阻塞了JS中的主线程会发生什么情况，就是下面的代码。" class="headerlink" title="如果阻塞了JS中的主线程会发生什么情况，就是下面的代码。"></a>如果阻塞了JS中的主线程会发生什么情况，就是下面的代码。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>首先，执行第一行，将 <code>setTimeout</code> 添加到宏任务队列</li>
<li>其次，执行第二行，然后进入死循环，页面卡死</li>
<li>同步代码都没有执行完，自然是不会执行宏任务队列中的任务</li>
</ul>
<h3 id="浏览器和Node-事件循环机制区别"><a href="#浏览器和Node-事件循环机制区别" class="headerlink" title="浏览器和Node 事件循环机制区别"></a>浏览器和Node 事件循环机制区别</h3><p>浏览器和Node 环境下，microtask 任务队列的执行时机不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;children2&#x27;</span>)</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;children2-1&#x27;</span>)&#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;children3&#x27;</span>)</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;children3-1&#x27;</span>)&#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;children1&#x27;</span>)&#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码在node11以下版本的执行结果，执行完一个阶段的所有任务。</span></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// children1</span></span><br><span class="line"><span class="comment">// children2</span></span><br><span class="line"><span class="comment">// children3</span></span><br><span class="line"><span class="comment">// children2-1</span></span><br><span class="line"><span class="comment">// children3-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// children1</span></span><br><span class="line"><span class="comment">// children2</span></span><br><span class="line"><span class="comment">// children2-1</span></span><br><span class="line"><span class="comment">// children3</span></span><br><span class="line"><span class="comment">// children3-1</span></span><br></pre></td></tr></table></figure>



<h4 id="Node完整循环机制"><a href="#Node完整循环机制" class="headerlink" title="Node完整循环机制"></a>Node完整循环机制</h4><blockquote>
<p>引用官方解释文字和图片</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200706184516.png" alt="image-20200706184509079"></p>
<h5 id="阶段概述"><a href="#阶段概述" class="headerlink" title="阶段概述"></a>阶段概述</h5><p><strong>定时器</strong>：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。<br><strong>待定回调</strong>：执行延迟到下一个循环迭代的 I&#x2F;O 回调。<br><strong>idle, prepare</strong>：仅系统内部使用。<br><strong>轮询</strong>：检索新的 I&#x2F;O 事件;执行与 I&#x2F;O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。<br><strong>检测</strong>：setImmediate() 回调函数在这里执行。<br><strong>关闭的回调函数</strong>：一些关闭的回调函数，如：socket.on(‘close’, …)。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>BFC</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvR3VpZGUvQ1NTL0Jsb2NrX2Zvcm1hdHRpbmdfY29udGV4dA==">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMDkvMDQvZmxvYXRfY2xlYXJpbmcuaHRtbA==">http://www.ruanyifeng.com/blog/2009/04/float_clearing.html<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNTljMzcxM2E1MTg4MjUzOTZmNGY2OTY5">https://juejin.im/entry/59c3713a518825396f4f6969<i class="fa fa-external-link-alt"></i></span></p>
<p>面经</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2Rpc2N1c3MvMTc3NDgy">https://www.nowcoder.com/discuss/177482<i class="fa fa-external-link-alt"></i></span></p>
<p>浏览器和Node循环机制区别</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FkdmFuY2VkLUZyb250ZW5kL0RhaWx5LUludGVydmlldy1RdWVzdGlvbi9pc3N1ZXMvMjYjaXNzdWVjb21tZW50LTQ2OTE4ODUwMQ==">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26#issuecomment-469188501<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzMzN2FlMDZmYjlhMDQ5YmM0Y2QyMTgjaGVhZGluZy0w">https://juejin.im/post/5c337ae06fb9a049bc4cd218#heading-0<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2RvY3MvZ3VpZGVzL2V2ZW50LWxvb3AtdGltZXJzLWFuZC1uZXh0dGljay8=">https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>BFC</tag>
        <tag>函数柯里化</tag>
        <tag>JavaScript</tag>
        <tag>js编程题</tag>
        <tag>事件循环机制</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第十天</title>
    <url>/posts/77e29b21/</url>
    <content><![CDATA[<ul>
<li>面向对象实现继承</li>
<li>HTTP 协议类</li>
<li>通信类</li>
<li>安全类</li>
<li>渲染机制类</li>
<li>提升页面性能</li>
<li>错误监控</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="面向对象实现继承"><a href="#面向对象实现继承" class="headerlink" title="面向对象实现继承"></a>面向对象实现继承</h2><h3 id="第一种：借助构造函数实现"><a href="#第一种：借助构造函数实现" class="headerlink" title="第一种：借助构造函数实现"></a>第一种：借助构造函数实现</h3><blockquote>
<p> 可以调用父类构造函数，但获取不到父类原型对象上的方法和属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">P1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">P1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable constant_">P1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;c1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title function_">C1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o1 :&gt;&gt; &quot;</span>, o1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o1.say :&gt;&gt; &#x27;</span>, o1.<span class="title function_">say</span>());</span><br></pre></td></tr></table></figure>

<h3 id="第二种：利用原型链实现"><a href="#第二种：利用原型链实现" class="headerlink" title="第二种：利用原型链实现"></a>第二种：利用原型链实现</h3><blockquote>
<p>缺点：原型链中的原型对象是共用的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">P2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P2&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;c2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">C2</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">P2</span>();</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title function_">C2</span>();</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> <span class="title function_">C2</span>();</span><br><span class="line"><span class="comment">// 理想状态应该是只有 o2.play 发生变化，但实际上 o3.play 也发生了变化</span></span><br><span class="line">o2.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o2 :&gt;&gt; &quot;</span>, o2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o3 :&gt;&gt; &quot;</span>, o3);</span><br></pre></td></tr></table></figure>

<h3 id="第三种：组合继承"><a href="#第三种：组合继承" class="headerlink" title="第三种：组合继承"></a>第三种：组合继承</h3><blockquote>
<p>将前两种方法组合，解决了之前的缺点，但父类被调用了两次</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">P3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P3&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 父类调用第一次</span></span><br><span class="line">  <span class="variable constant_">P3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;C3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类调用第二次</span></span><br><span class="line"><span class="variable constant_">C3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">P3</span>();</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="keyword">new</span> <span class="title function_">C3</span>();</span><br><span class="line"><span class="keyword">var</span> o5 = <span class="keyword">new</span> <span class="title function_">C3</span>();</span><br><span class="line">o4.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o4 :&gt;&gt; &quot;</span>, o4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o5 :&gt;&gt; &quot;</span>, o5);</span><br></pre></td></tr></table></figure>

<h3 id="第四种：组合继承优化1"><a href="#第四种：组合继承优化1" class="headerlink" title="第四种：组合继承优化1"></a>第四种：组合继承优化1</h3><blockquote>
<p>无法判断是子类创建的对象还是父类创建的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">P4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P4&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable constant_">P4</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;C4&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">C4</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable constant_">P4</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="keyword">var</span> o6 = <span class="keyword">new</span> <span class="title function_">C4</span>();</span><br><span class="line"><span class="keyword">var</span> o7 = <span class="keyword">new</span> <span class="title function_">C4</span>();</span><br><span class="line">o6.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o6 :&gt;&gt; &quot;</span>, o6);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o7 :&gt;&gt; &quot;</span>, o7);</span><br></pre></td></tr></table></figure>

<h3 id="第五种：组合继承优化2"><a href="#第五种：组合继承优化2" class="headerlink" title="第五种：组合继承优化2"></a>第五种：组合继承优化2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">P5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P5&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable constant_">P5</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;C5&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">C5</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable constant_">P5</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable constant_">C5</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">C5</span></span><br><span class="line"><span class="keyword">var</span> o8 = <span class="keyword">new</span> <span class="title function_">C5</span>();</span><br><span class="line"><span class="keyword">var</span> o9 = <span class="keyword">new</span> <span class="title function_">C5</span>();</span><br><span class="line">o8.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o8 :&gt;&gt; &quot;</span>, o8);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o9 :&gt;&gt; &quot;</span>, o9);</span><br></pre></td></tr></table></figure>

<h3 id="第六种：ES6-class-定义"><a href="#第六种：ES6-class-定义" class="headerlink" title="第六种：ES6 class 定义"></a>第六种：ES6 class 定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P6</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;P6&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C6</span> <span class="keyword">extends</span> <span class="title class_ inherited__">P6</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&quot;C6&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o10 = <span class="keyword">new</span> <span class="title function_">C6</span>()</span><br><span class="line"><span class="keyword">var</span> o11 = <span class="keyword">new</span> <span class="title function_">C6</span>()</span><br><span class="line">o10.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o10 :&gt;&gt; &#x27;</span>, o10);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o11 :&gt;&gt; &#x27;</span>, o11);</span><br></pre></td></tr></table></figure>

<h2 id="HTTP协议类"><a href="#HTTP协议类" class="headerlink" title="HTTP协议类"></a>HTTP协议类</h2><h3 id="http主要特点"><a href="#http主要特点" class="headerlink" title="http主要特点"></a>http主要特点</h3><ul>
<li>简单</li>
<li>快速</li>
<li>无连接</li>
<li>无状态</li>
</ul>
<h3 id="http报文组成部分"><a href="#http报文组成部分" class="headerlink" title="http报文组成部分"></a>http报文组成部分</h3><p>请求报文</p>
<ul>
<li>请求行：http方法、 页面地址、 http协议以及版本</li>
<li>请求头：key-value值</li>
<li>空行：分割请求头和请求体</li>
<li>请求体</li>
</ul>
<p>响应报文</p>
<ul>
<li>状态行： http协议版本、状态码</li>
<li>响应头：和请求头类似</li>
<li>空行</li>
<li>响应体</li>
</ul>
<h3 id="http-方法"><a href="#http-方法" class="headerlink" title="http 方法"></a>http 方法</h3><ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>HEAD</li>
</ul>
<h3 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h3><ul>
<li>在浏览器回退时，get无害，post则会再次提交请求</li>
<li>url地址，get可以被收藏，post不行</li>
<li>缓存，get会主动缓存，post不回，需手动设置</li>
<li>get请求只能进习惯url编码，post支持多种编码</li>
<li>get请求会在历史记录中，post不会</li>
<li>get请求在URL中传递参数有长度限制，post没有限制</li>
<li>参数的数据类型，get只接受ASCII自负，post没有限制</li>
<li>get比post更不安全，因为参数直接暴露在url中，所以不能传递敏感信息</li>
<li>get参数通过url传递，post放在请求体中</li>
</ul>
<h3 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h3><p>1xx：指示信息，表示请求已接受，继续处理</p>
<p>2xx：成功，表示请求已成功被接收</p>
<p>3xx：重定向</p>
<p>4xx：客户端错误</p>
<p>5xx：服务器错误</p>
<h2 id="通信类"><a href="#通信类" class="headerlink" title="通信类"></a>通信类</h2><h3 id="跨域通信"><a href="#跨域通信" class="headerlink" title="跨域通信"></a>跨域通信</h3><ul>
<li>JSONP</li>
<li>Hash</li>
<li>PostMessage</li>
<li>Websocket</li>
<li>CORS</li>
</ul>
<h2 id="安全类"><a href="#安全类" class="headerlink" title="安全类"></a>安全类</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>跨站脚本攻击</p>
<ul>
<li>存储型XSS：跨站代码存储在数据库</li>
<li>反射型XSS：恶意代码在url中</li>
<li>DOM型XSS：DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>页面注入脚本，执行恶意  js 代码</p>
<h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><ul>
<li>输入内容过滤</li>
<li>转译html</li>
<li>cookie设置http-only，防止恶意获取cookie</li>
<li>少用直接渲染或者执行html的js代码，比如：<code>document.write()</code>、<code>innerHTML</code>、<code>vue中的v-html</code>等</li>
</ul>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>跨站请求伪造</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>用户登陆A网站，A网站下发cookie。用户登陆B网站，B网站诱导用户点击链接，用户点击链接，访问A网站并携带cookie。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200802155816.png" alt="image-20200802155816883"></p>
<h4 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h4><ul>
<li>token 验证</li>
<li>referer 验证</li>
</ul>
<h2 id="渲染机制类"><a href="#渲染机制类" class="headerlink" title="渲染机制类"></a>渲染机制类</h2><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><blockquote>
<p> DTD是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvWE1M">XML<i class="fa fa-external-link-alt"></i></span>文件的<strong>文档类型定义</strong>（Document Type Definition）可以看成一个或者多个XML文件的模板，在这里可以定义XML文件中的元素、元素的属性、元素的排列方式、元素包含的内容等等。</p>
</blockquote>
<p><code>&lt;!DOCTYPE&gt;</code> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</p>
<p><code>&lt;!DOCTYPE&gt;</code> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p>
<h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="html4-01-strict"><a href="#html4-01-strict" class="headerlink" title="html4.01 strict"></a>html4.01 strict</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML-4-01-Transitional"><a href="#HTML-4-01-Transitional" class="headerlink" title="HTML 4.01 Transitional"></a>HTML 4.01 Transitional</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。允许框架集（Framesets）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200802163318.png" alt="image-20200802163318185"></p>
<h4 id="Reflow-重排"><a href="#Reflow-重排" class="headerlink" title="Reflow 重排"></a>Reflow 重排</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>当<code>Render Tree</code>中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为重排（又称为回流）。</p>
<h5 id="触发reflow"><a href="#触发reflow" class="headerlink" title="触发reflow"></a>触发reflow</h5><ul>
<li>增加、删除、修改DOM节点是，会导致reflow或repaint</li>
<li>移动DOM位置或者动画执行时</li>
<li>修改CSS样式时</li>
<li>Resize 窗口时，或者滚动的时候</li>
<li>修改网页的默认字体时</li>
</ul>
<h4 id="Repaint-重绘"><a href="#Repaint-重绘" class="headerlink" title="Repaint 重绘"></a>Repaint 重绘</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p>
<h5 id="触发repaint"><a href="#触发repaint" class="headerlink" title="触发repaint"></a>触发repaint</h5><p>DOM改动</p>
<p>CSS改动</p>
<h5 id="减少repaint频率"><a href="#减少repaint频率" class="headerlink" title="减少repaint频率"></a>减少repaint频率</h5><ul>
<li>使用 DocumentFragment</li>
<li>virtual dom</li>
</ul>
<h2 id="提升页面性能"><a href="#提升页面性能" class="headerlink" title="提升页面性能"></a>提升页面性能</h2><h3 id="资源压缩合并，减少http请求"><a href="#资源压缩合并，减少http请求" class="headerlink" title="资源压缩合并，减少http请求"></a>资源压缩合并，减少http请求</h3><h3 id="非核心代码异步加载"><a href="#非核心代码异步加载" class="headerlink" title="非核心代码异步加载"></a>非核心代码异步加载</h3><ul>
<li>动态脚本加载</li>
<li>defer：html解析完之后执行，如果是多个则按照顺序执行</li>
<li>async：加载完之后立即执行，如果是多个，执行顺序与加载顺序无关</li>
</ul>
<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>请查看备战校招第三天</p>
<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><h3 id="预解析DNS"><a href="#预解析DNS" class="headerlink" title="预解析DNS"></a>预解析DNS</h3><p>浏览器默认会进行<code>a标签</code>dns解析，但https协议的可能会默认不解析，下面这行代码强制开启<code>a标签</code>dns解析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>预解析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//host_name_to_prefetch.com&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误监控"><a href="#错误监控" class="headerlink" title="错误监控"></a>错误监控</h2><h3 id="前端错误的分类"><a href="#前端错误的分类" class="headerlink" title="前端错误的分类"></a>前端错误的分类</h3><ul>
<li>即时运行错误</li>
<li>资源加载错误</li>
</ul>
<h3 id="错误的捕获方式"><a href="#错误的捕获方式" class="headerlink" title="错误的捕获方式"></a>错误的捕获方式</h3><h4 id="运行时错误捕获方式"><a href="#运行时错误捕获方式" class="headerlink" title="运行时错误捕获方式"></a>运行时错误捕获方式</h4><ul>
<li>try..catch</li>
<li>window.onerror</li>
</ul>
<h4 id="资源加载错误"><a href="#资源加载错误" class="headerlink" title="资源加载错误"></a>资源加载错误</h4><ul>
<li>object.onerror</li>
<li>performance.getEntries()</li>
<li>window.Error 事件捕获（冒泡获取不到）</li>
</ul>
<h3 id="上报错误的基本原理"><a href="#上报错误的基本原理" class="headerlink" title="上报错误的基本原理"></a>上报错误的基本原理</h3><ul>
<li><p><code>Ajax</code> 通信方式上报</p>
</li>
<li><p>利用  <code>Image</code> 对象上报</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title class_">Image</span>()).<span class="property">src</span>=<span class="string">&quot;https://baidu.com/uploadError?type=1&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>继承</tag>
        <tag>安全</tag>
        <tag>渲染机制</tag>
        <tag>性能</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第十一天</title>
    <url>/posts/63411c4f/</url>
    <content><![CDATA[<ul>
<li><p><code>Object.keys</code> 和 <code>for...in</code> 区别</p>
</li>
<li><p>异步编程的几种方式</p>
</li>
<li><p><code>load</code> 事件 和 <code>DOMContentLoaded</code> 事件区别</p>
</li>
<li><p>箭头函数</p>
</li>
<li><p><code>for...of</code> 和<code>for...in</code></p>
</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="Object-keys-和-for-in-区别"><a href="#Object-keys-和-for-in-区别" class="headerlink" title="Object.keys 和 for...in 区别"></a><code>Object.keys</code> 和 <code>for...in</code> 区别</h2><p><code>Object.keys</code> 不能遍历原型上的属性</p>
<p><code>for...in</code>  可遍历原型链上的可枚举属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hobbies</span> = [<span class="string">&quot;eat&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 不遍历原型上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(p)); <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br><span class="line"><span class="comment">// 可遍历原型链上的可枚举属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> p) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// name age hobbies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="异步编程的几种方式"><a href="#异步编程的几种方式" class="headerlink" title="异步编程的几种方式"></a>异步编程的几种方式</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><blockquote>
<p>比如：setTimeout、setInterval等</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cb&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>



<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote>
<p>在dom中常用的 addEventListener</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;btn 被点击&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote>
<p>ES6 中新增特性，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==">详情<i class="fa fa-external-link-alt"></i></span> </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">ms = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">delay</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><h3 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><blockquote>
<p>promise 的语法糖，将 <code>promise</code> 的代码稍作修改，得到以下代码</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">ms = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">callBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">callBack</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><h2 id="load-事件-和-DOMContentLoaded-事件区别"><a href="#load-事件-和-DOMContentLoaded-事件区别" class="headerlink" title="load 事件 和 DOMContentLoaded 事件区别"></a><code>load</code> 事件 和 <code>DOMContentLoaded</code> 事件区别</h2><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a><code>load</code> 事件</h3><blockquote>
<p>下面代码具有相同含义，只是写法不同，具体查看文章，备战校招第九天 - DOM事件类 - DOM事件级别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page is fully loaded&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大家可能更熟这种写法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page is fully loaded&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>当整个页面所依赖的资源（样式表、图片、子框架等）加载完毕触发 <code>load</code> 事件。</p>
<h3 id="DOMContentLoaded-事件"><a href="#DOMContentLoaded-事件" class="headerlink" title="DOMContentLoaded 事件"></a><code>DOMContentLoaded</code> 事件</h3><blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`window.addEventListener(&quot;DOMContentLoaded&quot;) 事件`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>当初始的HTML文档完全加载和解析完成，无需等待图片等资源加载完毕，就可以触发 <code>DOMContetnLoaded</code> 事件。注意：**<code>DOMContentLoaded</code>** 事件必须等待其所属script之前的样式表加载解析完成才会触发。</p>
<h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><ul>
<li><code>DOMContentLoaded</code> 优先执行</li>
<li><code>load</code> ，而<code>load</code>事件中的 <code>window.onload</code> 和 <code>window.addEventListener(&quot;load&quot;)</code> 两种写法，则是代码中哪个靠前，哪个先执行（按照顺序执行）</li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数相比函数表达式更加简洁，并且没有<code>自己的this</code>、<code>constructor</code>、<code>arguments</code>、<code>super</code>或<code>new.target</code>。主要适用在一些需要匿名函数的地方，且不需要用到构造函数。</p>
<h3 id="写法简洁"><a href="#写法简洁" class="headerlink" title="写法简洁"></a>写法简洁</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 简单写法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arrow function&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果只需要一个参数，则可以省略圆括号</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">b</span> = (<span class="params">arg1</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arg1 + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 若函数体内只有一句代码，还可以省略花括号</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">c</span> = (<span class="params">arg1, arg2</span>) =&gt; arg1 + arg2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩下的都是按照这几种进行组合的方式，聪明的你一定知道如何做，想确定自己的想法，可以去参考下阮一峰老师的ES6入门书，链接在文章末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如若需要一行代码返回对象，需要用圆括号包起来，防止产生歧义致使没有产生理想的结果</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">d</span> = (<span class="params"></span>) =&gt; (&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>没有自己的 this 指向，但在定义时就确定了this指向，而<code>function</code> 只有在运行时才会确定this指向。</li>
<li>如果使用 call、apply、bind 调用，只能传递参数，第一个参数<code>this</code>则会忽略。</li>
<li>没有构造函数，所以不能使用 new 来创建实例，否则会抛出一个异常（提示没有构造函数）。</li>
<li>没有 prototype 属性。</li>
<li>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</li>
<li>没有 arguements 对象，可以用 es6 rest参数 代替。</li>
</ol>
<h2 id="for-of-和for-in"><a href="#for-of-和for-in" class="headerlink" title="for...of 和for...in"></a><code>for...of</code> 和<code>for...in</code></h2><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><ul>
<li><p>可迭代数组、类数组、String、Map、Set、arguements、DOM 集合等</p>
</li>
<li><p>如果数组过大，执行效率低于传统for循环(<code>for(let i=0; i&lt;arr.length; i++)</code>)</p>
</li>
<li><p>不会迭代原型上的属性。</p>
</li>
<li><p>遍历对象需要可以和 <code>Object.entries()</code>结合使用。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="number">44</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key :&gt;&gt; &quot;</span>, key);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value :&gt;&gt; &quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><blockquote>
<p><strong><code>for...in</code>语句</strong>以任意顺序遍历一个对象的除<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3ltYm9s">Symbol<i class="fa fa-external-link-alt"></i></span>以外的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FbnVtZXJhYmlsaXR5X2FuZF9vd25lcnNoaXBfb2ZfcHJvcGVydGllcw==">可枚举<i class="fa fa-external-link-alt"></i></span>属性。for…in迭代是无序的。</p>
<p><strong>提示：</strong><code>for...in</code>不应该用于迭代一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array"><code>Array</code></a>，其中索引顺序很重要。</p>
</blockquote>
<p>注意</p>
<ul>
<li><code>for..in</code> 会迭代原型上的可迭代属性，如若只需迭代自身属性，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"><code>getOwnPropertyNames()</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>hasOwnProperty()</code></a> 来确定属性是否为自身的属性。</li>
<li>如果使用 <code>for...in</code> 迭代数组，效率远低于 <code>for...of</code></li>
</ul>
<h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>无论是<code>for...in</code>还是<code>for...of</code>语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 语句以任意顺序迭代对象的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FbnVtZXJhYmlsaXR5X2FuZF9vd25lcnNoaXBfb2ZfcHJvcGVydGllcw==">可枚举属性<i class="fa fa-external-link-alt"></i></span>。</p>
<p><code>for...of</code> 语句遍历<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9JdGVyYXRvcnNfYW5kX0dlbmVyYXRvcnMjSXRlcmFibGVz">可迭代对象<i class="fa fa-external-link-alt"></i></span>定义要迭代的数据。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvZnVuY3Rpb24jJUU3JUFFJUFEJUU1JUE0JUI0JUU1JTg3JUJEJUU2JTk1JUIw">阮一峰老师的ES6入门<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第十二天</title>
    <url>/posts/5357f097/</url>
    <content><![CDATA[<ul>
<li>RESTful API</li>
<li>Vue 双向数据绑定原理</li>
<li>元素的 margin&#x2F;padding 的百分比值 是基于父元素的宽度</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><h3 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h3><p>前后端分离，而前端设备又有很多，需要一种统一的机制，来进行规范。</p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul>
<li><code>API</code> 放于专用域名，或主域名下的二级路径</li>
<li>版本号也要放于网址中</li>
<li>每个网址代表一个资源（<code>Resource</code>），所以网址中只能包括名词，若表示集合应为复数</li>
<li><code>HTTP</code> 动词<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
</li>
<li>根据提供参数，筛选返回结果，两种可选提供方式<ul>
<li>params 参数，例如：<code>/api/animals/monkey</code></li>
<li>query 参数，例如：<code>/api/animals/?animal=monkey</code></li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=">状态码<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>Hypermedia API，返回结果中提供链接，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</li>
<li>服务器返回的交互数据格式应为 <code>json</code> ，避免使用 <code>XML</code></li>
</ul>
<h2 id="Vue-双向数据绑定原理"><a href="#Vue-双向数据绑定原理" class="headerlink" title="Vue 双向数据绑定原理"></a>Vue 双向数据绑定原理</h2><ul>
<li>首先需要将数据变得可检测状态，使用函数 <code>Object.defineProperty</code> 进行 <code>Observe</code></li>
<li><code>Object.defineProperty</code> 中最后一个参数中有两个特殊的属性，分别是 <code>set</code> 和 <code>get</code>，在<code>get</code> 中收集依赖，<code>set</code> 中通知更新</li>
<li>并为每一个数据都建立一个依赖管理器 <code>Dep</code></li>
<li>谁用到数据谁就是依赖，就为谁创建一个 <code>Watcher</code></li>
<li>为每一个依赖创建一个 <code>Watcher</code> 实例，当数据发生变化，通知 <code>Watcher</code> 实例，由 <code>Watcher</code> 实例去做真实的更新操作</li>
</ul>
<p><img data-src="https://vue-js.com/learn-vue/assets/img/3.0b99330d.jpg" alt="具体步骤看图"></p>
<h2 id="子元素的-margin-padding-的百分比值-是基于父元素的宽度"><a href="#子元素的-margin-padding-的百分比值-是基于父元素的宽度" class="headerlink" title="子元素的 margin&#x2F;padding 的百分比值 是基于父元素的宽度"></a>子元素的 margin&#x2F;padding 的百分比值 是基于父元素的宽度</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>resetful <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMDUvcmVzdGZ1bF9hcGkuaHRtbA==">http://www.ruanyifeng.com/blog/2014/05/restful_api.html<i class="fa fa-external-link-alt"></i></span></p>
<p>Vue 双向数据绑定原理</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWUtanMuY29tL2xlYXJuLXZ1ZS9yZWFjdGl2ZS9vYmplY3QuaHRtbCNfMS0lRTUlODklOEQlRTglQTglODA=">https://vue-js.com/learn-vue/reactive/object.html#_1-%E5%89%8D%E8%A8%80<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZXNzaWFoaGguZ2l0aHViLmlvL2Jsb2cvZnJvbnRlbmQvdnVlLmh0bWwjdnVlJUU1JThGJThDJUU1JTkwJTkxJUU3JUJCJTkxJUU1JUFFJTlBJUU3JTlBJTg0JUU1JThFJTlGJUU3JTkwJTg2">https://messiahhh.github.io/blog/frontend/vue.html#vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第二天</title>
    <url>/posts/5dd5f4cf/</url>
    <content><![CDATA[<ol>
<li>css 盒模型</li>
<li>css 布局方式</li>
<li>跨域</li>
<li>前端安全（XSS、CSRF）</li>
<li>防抖和节流</li>
</ol>
<hr>

<span id="more"></span>

<h3 id="css-盒模型"><a href="#css-盒模型" class="headerlink" title="css 盒模型"></a>css 盒模型</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 默认值，实际内容宽高度计算方式（width，height） */</span></span><br><span class="line"><span class="attribute">box-sizing</span> : content-box;</span><br><span class="line"><span class="comment">/* 默认值，实际内容宽高度计算方式（width - border - padding） */</span></span><br><span class="line"><span class="attribute">box-sizing</span> : border-box;</span><br></pre></td></tr></table></figure>

<p><strong>content-box</strong></p>
<p>尺寸计算公式：</p>
<p><code>width</code> &#x3D; 内容的宽度</p>
<p><code>height</code> &#x3D; 内容的高度</p>
<p>宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    width: 100px;</span></span></span><br><span class="line"><span class="string"><span class="tag">    height: 100px;</span></span></span><br><span class="line"><span class="string"><span class="tag">    background-color: blue;</span></span></span><br><span class="line"><span class="string"><span class="tag">    border: 1px solid red;</span></span></span><br><span class="line"><span class="string"><span class="tag">    box-sizing: content-box;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200625105733.png" alt="image-20200625105733283"></p>
<p>实际内容区域为 <code>100px</code> ，边框为 <code>1px</code> </p>
<p><strong>border-box</strong></p>
<p>尺寸计算公式：</p>
<p><em><code>width</code> &#x3D; border + padding + 内容的宽度</em></p>
<p><em><code>height</code> &#x3D; border + padding + 内容的高度</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    width: 100px;</span></span></span><br><span class="line"><span class="string"><span class="tag">    height: 100px;</span></span></span><br><span class="line"><span class="string"><span class="tag">    background-color: blue;</span></span></span><br><span class="line"><span class="string"><span class="tag">    border: 1px solid red;</span></span></span><br><span class="line"><span class="string"><span class="tag">    box-sizing: border-box;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200625105910.png" alt="image-20200625105909902"></p>
<p>实际内容区域为 <code>98px</code> ，上下边框各为 <code>1px</code> </p>
<h3 id="css-布局方式"><a href="#css-布局方式" class="headerlink" title="css 布局方式"></a>css 布局方式</h3><p><strong>改变布局的常见属性</strong> </p>
<ul>
<li><p>display: flex; table; grid;</p>
</li>
<li><p>float</p>
</li>
<li><p>position</p>
</li>
</ul>
<p><strong>常见布局</strong></p>
<ul>
<li><p>正常布局流</p>
<p>浏览器默认的 <code>html</code> 布局方式</p>
</li>
<li><p>弹性布局（flex）</p>
<p><strong>介绍</strong>：弹性盒子布局，用于创建横向或纵向的一维页面布局，等分划分。</p>
<p><strong>使用</strong>：只需将父元素设置为 <code>display: flex;</code> 就可以按照 <code>flex</code> 布局。（设置flex布局后，子元素的 <code>float</code>、<code>clear</code>  、<code>vertical-align</code> 属性都会失效）</p>
</li>
<li><p>网格布局（grid）</p>
<p><strong>介绍</strong>：Grid布局被设计用于同时在两个维度上把元素按行和列排列整齐，二维布局。</p>
<p><strong>使用</strong>：父元素设置 <code>display: grid;</code> 也可以设置为行内元素 <code>display: inline-grid;</code></p>
</li>
<li><p>浮动布局（float）</p>
<p>浮动布局，利用 <code>float</code> 属性进行左右浮动。</p>
</li>
<li><p>定位布局（position）</p>
<p>静态定位、相对定位、绝对定位、固定定位、粘性定位（相对定位和固定定位的混合，设置 <code>top</code> 值之后，元素以决定定位的方式显示位置，直到 <code>viewport</code> 视口回滚到阈值之下，以固定定位方式显示，显示 top 所指的值之处。）</p>
</li>
<li><p>表格</p>
<p>现在很少使用 <code>table</code> 进行布局，但显示表格数据你没有选择。</p>
</li>
<li><p>多列布局</p>
<p>简单的进行多列布局，<code>columns</code> 设置列数，<code>column-width</code> 设置列宽。</p>
</li>
</ul>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>同源策略（协议、域名、端口相同），防止信息被恶意利用。</p>
<ul>
<li><p>jsonp</p>
<p>利用 <code>script</code> 标签可以跨域特性，但只支持 <code>GET</code> 请求，且需要服务端进行配合，于是就有了下面代码（通常规范为 url 最后params规定 <code>callback=回调函数名</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> sc = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">      sc.<span class="title function_">setAttribute</span>(</span><br><span class="line">        <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://suggest.taobao.com/sug?code=utf-8&amp;q=%E5%8D%AB%E8%A1%A3&amp;callback=cb&#x27;</span></span><br><span class="line">      )</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(sc)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>代码执行后，将 <code>script</code> 标签添加到网页内，会去自动请求地址，服务器配合后会返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">cb</span>(&#123;<span class="string">&quot;result&quot;</span>:[[<span class="string">&quot;卫衣女&quot;</span>,<span class="string">&quot;183618.0781806928&quot;</span>],[<span class="string">&quot;卫衣男&quot;</span>,<span class="string">&quot;88788.9164616466&quot;</span>],[<span class="string">&quot;卫衣女春秋薄款&quot;</span>,<span class="string">&quot;31281.50912988837&quot;</span>],[<span class="string">&quot;卫衣女宽松韩版&quot;</span>,<span class="string">&quot;108819.03279878093&quot;</span>]...]&#125;)</span><br></pre></td></tr></table></figure>

<p>页面会将请求后的代码进行执行，于是会调用 <code>cb</code> 函数，就可以进行对数据为所欲为了，哈哈哈。</p>
</li>
<li><p>CORS（跨域资源共享）</p>
<p>CORS请求分为两类，简单请求和非简单请求（也称为复杂请求）</p>
<p><strong>简单请求</strong></p>
<p>服务端设置 <code>Access-Control-Allow-Origin</code> 值为请求头的 <code>origin</code> 的值或者 <code>*</code>，指定域名或者接受所有域名。</p>
<p>服务端<code>Access-Control-Allow-Credentials</code> 设置为 <code>true</code>，请求时将 <code>cookie</code> 添加到请求中，一起发送给服务器。本地ajax请求也要将 <code>withCredentials</code> 设置为 <code>true</code>。（注意：如果要发送 cookie，必须指定 <code>Access-Control-Allow-Origin</code> 具体值，不能为 <code>*</code>。）</p>
<p><strong>非简单请求</strong></p>
<p>在请求前会发送一个“预检”请求，<code>OPTIONS</code>请求</p>
<p>比如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://api.alice.com/cors&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;PUT&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>发送 <code>PUT</code> 请求，会先发送一个预检请求，内容如下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://api.bob.com // 请求域</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>PUT // 请求方法</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-Custom-Header // 请求头信息</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.alice.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>服务端如果确认，返回如下信息</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://api.bob.com // 允许跨域地址</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT // 允许跨域方法</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-Custom-Header // 支持首部列表</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br></pre></td></tr></table></figure>

<p>服务端如果否定了，返回一个正常的HTTP响应即可，但不包含跨域相关信息（此时，会触发<code>ajax</code>的 <code>onerror</code> 错误回调）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h3><ul>
<li><p>XSS（Cross-site scripting）</p>
<p>首先推荐一个 <code>XSS</code> 训练平台，链接在这里：<span class="exturl" data-url="aHR0cDovL3Byb21wdC5tbC8w">prompt<i class="fa fa-external-link-alt"></i></span></p>
<p>全称为跨站脚本攻击，一共分为三类</p>
<ul>
<li>存储型 XSS，一般出现在可输入的文本框中，例如留言板、评论、个人资料等地方，将恶意脚本存储到服务器上，当浏览器进行数据请求时，脚本会返回给用户并执行。</li>
<li>反射性 XSS，一般出现在URL参数中，需要点击恶意代码的链接才可以出发。</li>
<li>基于DOM的XSS，通过脚本动态修改页面，不与服务端进行交互，代码可见，获取数据并在本地执行。</li>
</ul>
</li>
<li><p>CSRF（cross-site request forgery）</p>
<p>跨站请求伪造，恶意请求提交。</p>
<p>攻击者往往不会获取 <code>cookie</code> 信息，只会利用本机信息进行恶意操作。登录受信任网站A，访问危险网站B。</p>
<p>防御方法</p>
<ul>
<li>令牌同步模式：当用户发送请求前，服务端生成唯一令牌，发送数据时携带该令牌，在服务端进行校验。</li>
<li>检查Referer字段：确定改请求来源是否安全</li>
<li>添加校验token：恶意请求不会自动添加token，也无法获取，服务端进行校验，就可以排除可疑请求。</li>
</ul>
</li>
</ul>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><p><strong>防抖（debounce）</strong></p>
<p>高频事件在 n 秒内只执行一次，如果 n 秒内事件再次触发，则重新计算时间。</p>
<p>下列代码，没有防抖前，每次用户输入都会触发事件，防抖后，只有在 500ms 内没有进行输入才会执行事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;inp&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> timeout = <span class="literal">null</span> <span class="comment">// 创建一个标记用来存放定时器的返回值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">clearTimeout</span>(timeout) <span class="comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;防抖成功&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> inp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inp&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      inp.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">debounce</span>(sayHi)) <span class="comment">// 防抖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>节流（throttle）</strong></p>
<p>降低高频事件的触发次数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>; <span class="comment">// 通过闭包保存一个标记</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>; <span class="comment">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class="line">    canRun = <span class="literal">false</span>; <span class="comment">// 立即设置为false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerWidth</span>, e.<span class="property">target</span>.<span class="property">innerHeight</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">throttle</span>(sayHi));</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>盒模型</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2JveC1zaXppbmc=">https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing<i class="fa fa-external-link-alt"></i></span></p>
<p>跨域</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTE0NTM2NA==">https://segmentfault.com/a/1190000011145364<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE2LzA0L2NvcnMuaHRtbA==">https://www.ruanyifeng.com/blog/2016/04/cors.html<i class="fa fa-external-link-alt"></i></span></p>
<p>防抖和节流</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FkdmFuY2VkLUZyb250ZW5kL0RhaWx5LUludGVydmlldy1RdWVzdGlvbi9pc3N1ZXMvNQ==">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>盒模型</tag>
        <tag>布局</tag>
        <tag>跨域</tag>
        <tag>防抖</tag>
        <tag>节流</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第三天</title>
    <url>/posts/10cb579d/</url>
    <content><![CDATA[<ol>
<li><p>css 垂直水平居中</p>
</li>
<li><p>闭包</p>
</li>
<li><p>浏览器缓存相关</p>
</li>
<li><p>性能优化</p>
</li>
</ol>
<hr>
<span id="more"></span>

<h3 id="css-垂直水平居中"><a href="#css-垂直水平居中" class="headerlink" title="css 垂直水平居中"></a>css 垂直水平居中</h3><p><strong>第一种 position+transform</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#cbox</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>第二种 flex</strong> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#cbox</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三种 padding + margin</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">250px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#cbox</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上三种代码显示效果均为</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200626093658.png" alt="image-20200626093651504"></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包可以从内部函数访问到外部函数作用域。</p>
<ul>
<li><p><strong>模拟私有方法</strong></p>
<p>Java有私有属性，<code>private</code>，而 js 也可以通过模拟来实现私有变量和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>经典闭包问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = btns[i]</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了第&#x27;</span> + i + <span class="string">&#x27;个按钮&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行上面代码，点击会发现，输出的均为</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200626101322.png" alt="image-20200626101322509"></p>
<p>这是因为虽形成了三个闭包作用域，但他们共享了一个词法作用域，在这个作用域中又只有一个变量 <code>i</code> ，<code>var</code> 的作用域数函数作用域，但定义 <code>i</code> 外并未有函数，所以这里的 <code>i</code> 是挂载在全局的。在循环后执行点击时间前，<code>i</code> 的值都已经指向了最后一个数 <code>5</code>了。</p>
<p><strong>解决方法（修改下列任何一种都可以）</strong></p>
<ul>
<li><p>将 <code>var i=0;</code> 换为 <code>let i=0;</code> ，这种也是最简单的，<code>let</code> 是 ES6 修复 <code>var</code> 的设计缺陷而出现的</p>
</li>
<li><p>使用更多的闭包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">i</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了第&#x27;</span> + i + <span class="string">&#x27;个按钮&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = btns[i]</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="title function_">handleClick</span>(i)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名闭包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    ;(<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = btns[i]</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了第&#x27;</span> + i + <span class="string">&#x27;个按钮&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)(i)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>性能</p>
<p>在处理速度和内存消耗方面都是有负面影响，所以原则是少用，别再不必要的地方使用。</p>
</li>
</ul>
<h3 id="缓存相关"><a href="#缓存相关" class="headerlink" title="缓存相关"></a>缓存相关</h3><p><img data-src="https://user-images.githubusercontent.com/25027560/38461517-c7f2f422-3b04-11e8-8e94-20bbeb2a32b8.png" alt="缓存"></p>
<h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>浏览器加载资源前，会根据请求头 <code>expires</code>和 <code>cache-control</code> 判断是否命中强缓存，如果命中，则不会发送请求到服务器。</p>
<p><strong>Expires</strong></p>
<p><strong>http1.0</strong> 提出，表示资源过期时间的 header，描述为一个绝对时间，服务器返回。（如果修改本地时间，可能会造成缓存失效。）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">expires</span><span class="punctuation">: </span>Tue, 14 Jul 2020 13:13:53 GMT</span><br></pre></td></tr></table></figure>

<p><strong>Cache-Control</strong></p>
<p><strong>http1.1</strong> 提出，优先级高于 <code>Expires</code> ，表示相对时间</p>
<p>缓存请求指令</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=&lt;seconds&gt;</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-stale[=&lt;seconds&gt;]	// 表示客户端接受一个已过期的资源</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>min-fresh=&lt;seconds&gt;		// 表示客户端获取一个在指定的秒数内保持最新状态的响应</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>no-cache 							// 在发布缓存前，强制要求把缓存提交给服务器进行验证（协商缓存验证）</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>no-store								// 不存储和不使用任何缓存</span><br></pre></td></tr></table></figure>

<p>缓存响应指令</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>must-revalidate</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>no-cache					// 如缓存请求指令</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>no-store					// 如缓存请求指令</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>public						// 表示响应可以为任何对象（客户端、代理服务器等，包括通常不可缓存的</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>private					// 只能被单个用户缓存（私有缓存）</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=&lt;seconds&gt;	// 缓存存储最大周期，单位秒</span><br><span class="line"><span class="attribute">Cache-control</span><span class="punctuation">: </span>s-maxage=&lt;seconds&gt;	// 覆盖 max-age或 expires 头，仅在共享缓存中有效</span><br></pre></td></tr></table></figure>



<h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>如果没有命中强缓存，浏览器会发送一个请求到服务器，通过 <code>last-modified</code> 和 <code>etag</code> 验证资源是否命中协商缓存，如果命中，会将这个请求返回，但不返回资源的数据，依旧从缓存中读取资源。</p>
<p><strong>Last-Modified 和 If-Modified-Since</strong></p>
<p><strong>http1.0</strong> 引入，<code>Last-Modified</code> 是响应头中的属性，表示资源的修改时间。浏览器请求时会在请求头上加上 <code>If-Modified-Since</code> （上次返回的<code>Last-Modified</code>的值），询问是否资源有更新，如有立刻将新的资源返回。</p>
<p>准确性不如 <code>Etag</code>，所以这个为备用机制。</p>
<p><strong>ETag 和 If-None-Match</strong></p>
<p><strong>http1.1</strong> 引入，<code>Etag</code>就像一个指纹，资源变化都会导致ETag变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的。优先级高于 <code>Last-Modified</code> 。</p>
<p><code>If-None-Match</code>的header会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来</p>
<p><img data-src="https://user-images.githubusercontent.com/25027560/38223495-d02aec3e-371d-11e8-92ae-fe7c729ab6e5.png"></p>
<h4 id="异同点总结"><a href="#异同点总结" class="headerlink" title="异同点总结"></a>异同点总结</h4><ul>
<li>相同点，都是从客户端缓存中加载资源，而不是从服务器加载资源。</li>
<li>不同点，强缓存不发送请求到服务器，协商缓存会发送请求到服务器。</li>
</ul>
<h4 id="缓存优先级顺序（由低到高）"><a href="#缓存优先级顺序（由低到高）" class="headerlink" title="缓存优先级顺序（由低到高）"></a>缓存优先级顺序（由低到高）</h4><p>强缓存</p>
<ul>
<li><strong>Expire</strong></li>
<li><strong>Cache-Control</strong></li>
</ul>
<p>协商缓存</p>
<ul>
<li><strong>Last-Modified 和 If-Modified-Since</strong></li>
<li><strong>ETag 和 If-None-Match</strong></li>
</ul>
<h4 id="用户操作和行为"><a href="#用户操作和行为" class="headerlink" title="用户操作和行为"></a>用户操作和行为</h4><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200730175925.png" alt="img"></p>
<ul>
<li>普通F5刷新，强缓存失效，只进行协商缓存</li>
<li>Ctrl+F5刷新，强缓存和协商缓存均失效</li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p><strong>图片优化</strong>，可以减少 <code>http</code> 请求数量</p>
<ul>
<li>雪碧图、精灵图</li>
<li>Base64</li>
<li>字体图标</li>
</ul>
<p><strong>压缩资源</strong>大小</p>
<ul>
<li>HTML压缩</li>
<li>css 压缩</li>
<li>js 压缩与混淆</li>
<li>图片压缩，（可以尝试webp格式）</li>
<li>开启 gzip</li>
</ul>
<p><strong>缓存</strong></p>
<ul>
<li>DNS 缓存</li>
<li>http 缓存</li>
<li>浏览器缓存</li>
</ul>
<p>其他优化</p>
<ul>
<li><p>数据校验，避免无用数据重复发送</p>
</li>
<li><p>不使用 <code>css @import</code> </p>
</li>
<li><p>比如你使用空的 src 和 href（会重定向到当前页面地址）</p>
</li>
<li><p>使用CDN</p>
</li>
<li><p>减少重绘回流</p>
</li>
<li><p>webpack 打包使用优化插件</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>闭包</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9DbG9zdXJlcw==">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures<i class="fa fa-external-link-alt"></i></span></p>
<p>缓存</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtYW5kYWtlbGFrZS9ibG9nL2lzc3Vlcy80MQ==">https://github.com/amandakelake/blog/issues/41<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTI0ODY5NA==">https://segmentfault.com/a/1190000021248694<i class="fa fa-external-link-alt"></i></span></p>
<p>性能优化</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhb2h1b2NoYWkvcC85MTc4MzkwLmh0bWw=">https://www.cnblogs.com/xiaohuochai/p/9178390.html<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>性能</tag>
        <tag>http</tag>
        <tag>布局</tag>
        <tag>闭包</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第四天</title>
    <url>/posts/a7e64ef8/</url>
    <content><![CDATA[<ol>
<li>为什么css放头部，script放底部</li>
<li><code>@import</code> 的使用方式</li>
<li>flex-shrink</li>
<li>a.x &#x3D; a &#x3D; {n:2} 问题</li>
<li>let 和 var 编程题</li>
</ol>
<hr>
<span id="more"></span>

<h3 id="为什么css放头部，script放底部"><a href="#为什么css放头部，script放底部" class="headerlink" title="为什么css放头部，script放底部"></a>为什么css放头部，script放底部</h3><p>mdn官方解释</p>
<blockquote>
<p><strong>注：</strong>我们将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script"><code>script</code></a> 放在HTML文件的底部附近的原因是浏览器会按照代码在文件中的顺序加载 HTML。如果先加载的 JavaScript 期望修改其下方的 HTML，那么它可能由于 HTML 尚未被加载而失效。因此，将 JavaScript 代码放在 HTML页面的底部附近通常是最好的策略。</p>
</blockquote>
<p>CSS 不会阻塞 DOM 的解析，但会阻塞 DOM 渲染。<br>JS 阻塞 DOM 解析，但浏览器会”偷看”DOM，预先下载相关资源。<br>浏览器遇到 <code> &lt;script&gt;</code> 且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。</p>
<h3 id="import-的使用方式"><a href="#import-的使用方式" class="headerlink" title="@import 的使用方式"></a><code>@import</code> 的使用方式</h3><blockquote>
<p> <code>@import</code> 会导致重新重新创建一个<code>http</code> 链接，性能有所下降，所以不建议使用。</p>
</blockquote>
<ul>
<li><p>link属于html标签，而@import是css提供的。</p>
</li>
<li><p>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</p>
</li>
<li><p>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</p>
</li>
<li><p>link方式样式的权重高于@import的。</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li><strong>import规则一定要先于除了@charset的其他任何CSS规则</strong>，相当于 <code>@import</code> 必须处于当前样式表中最开始的位置</li>
</ul>
<p><strong>&#x2F;css&#x2F;style.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./style2.css&quot;</span>;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: sandybrown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;css&#x2F;style2.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>自动忽略后两个请求（vscode 插件的额外请求），可以看出 加载 style.css 后，又会加载 style2.css</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200628073105.png" alt="http请求数"></p>
<h3 id="对于如下代码，-box1、-box2、-box3、-box4从顶到底的层叠顺序是？"><a href="#对于如下代码，-box1、-box2、-box3、-box4从顶到底的层叠顺序是？" class="headerlink" title="对于如下代码，.box1、.box2、.box3、.box4从顶到底的层叠顺序是？"></a>对于如下代码，.box1、.box2、.box3、.box4从顶到底的层叠顺序是？</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span></span><br><span class="line">  box1 relative</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span></span><br><span class="line">    box2 &gt; box2 absolute</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span></span><br><span class="line">  box3 absolute</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span></span><br><span class="line">    .box3 &gt; box4  relative</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  * &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">4</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">3</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">2</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">130px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">5</span>; </span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>正确顺序：2、1、4、3</strong></p>
<p><strong>解析</strong></p>
<ul>
<li><p>首先看 <code>box1</code> 与 <code>box2</code> ，两元素为父子元素，子元素层级默认高于父元素（尽管本例中设置 <code>z-index</code> 值 父元素大于子元素）</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200628112808.png"></p>
</li>
<li><p>其次， <code>box3</code> 和 <code>box4</code> 也一样</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200628112924.png" alt="image-20200628112924359">、</p>
</li>
<li><p>接着比较 <code>box1</code> 和 <code>box3</code> 两兄弟元素 <code>box1</code>的 <code>z-index</code> 值大于 <code>box3</code> 所以在上层，而子元素也随着父级的层级进行排列</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200628120158.png" alt="image-20200628120158373"></p>
</li>
<li><p>本文讲的不够详细，仅供参考</p>
</li>
</ul>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><blockquote>
<p>前辈探索：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAyMzAzMjM3OCNjb21tZW50LWFyZWE=">https://segmentfault.com/q/1010000023032378#comment-area<i class="fa fa-external-link-alt"></i></span></p>
<p>非官方文档解释：</p>
<p><span class="exturl" data-url="aHR0cDovL2Nzcy5jdWlzaGlmZW5nLmNuL2ZsZXguaHRtbA==">http://css.cuishifeng.cn/flex.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>父元素设置 <code>display: flex;</code> ，若子元素溢出，则根据规则计算平均分配每个元素缩放比例。</p>
<p>计算方式是先求所有item <code>flex-shrink * flex-basis(width)</code> 之和,</p>
<h3 id="a-x-a-n-2-问题"><a href="#a-x-a-n-2-问题" class="headerlink" title="a.x &#x3D; a &#x3D; {n:2} 问题"></a>a.x &#x3D; a &#x3D; {n:2} 问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">a.<span class="property">x</span> = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">x</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 前辈探索：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly95YW5oYWlqaW5nLmNvbS9qYXZhc2NyaXB0LzIwMTIvMDQvMDUvamF2YXNjcmlwdC1jb250aW51b3VzLWFzc2lnbm1lbnQtb3BlcmF0b3Iv">https://yanhaijing.com/javascript/2012/04/05/javascript-continuous-assignment-operator/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="let-和-var-编程题"><a href="#let-和-var-编程题" class="headerlink" title="let 和 var 编程题"></a>let 和 var 编程题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">b</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">foo</span>()) 					<span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span>.<span class="title function_">call</span>())			<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">bar</span>())					<span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span>.<span class="title function_">call</span>(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;))		<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>注意</p>
<ul>
<li><p>var 有全局作用域提升特性，全局定义的 <code>var</code> 变量会自动绑定到 window 上，但 let 定义的变量则不可以</p>
</li>
<li><p>全局对象 <code>window</code>只读，不可修改，还有，不可以用 <code> delete</code> 语法删除全局对象 <code>window</code> 其中的属性</p>
</li>
<li><p>全局定义函数，也会绑定到window上</p>
</li>
</ul>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>js编程题</tag>
        <tag>css编程题</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第五天</title>
    <url>/posts/c8788bbf/</url>
    <content><![CDATA[<ol>
<li>状态码304 原理</li>
<li>http1.0、http1.1和http2.0</li>
</ol>
<hr>
<span id="more"></span>

<h3 id="状态码304-原理"><a href="#状态码304-原理" class="headerlink" title="状态码304 原理"></a>状态码304 原理</h3><blockquote>
<p>来自百度百科：如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。简单的表达就是：服务端已经执行了GET，但文件未变化。</p>
</blockquote>
<p>因为只有协商缓存才会发送请求到服务器，所以只有 <code>Last-Modified、If-Modified-Since</code> 和 <code>Etag、If-None-Match</code> 相关</p>
<p>服务器返回字段 <code>Last-Modified</code> 、 <code>Etag</code></p>
<p>客户端请求字段 <code>If-Modified-Since</code> 、 <code>If-None-Match</code></p>
<p>以 <code>Etag</code> 为例，首次请求资源访问地址 <code>example.com</code> ，状态码（Status Code）为200，响应头包括字段 <code>Etag：”3147526947“</code></p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200629085908.png" alt="image-20200629085901263"></p>
<p>我们此时再刷新一次页面，查看控制台，会发现请求字段自动添加了 <code>If-None-Match: &quot;3147526947&quot;</code> 表示本地资源的 <code>Etag</code> 值，服务端校验 <code>If-None-Match</code> 和服务器的资源是否一致，若一致（像下图），会看到状态码为 304，表示服务器校验资源发现没有变化，所以返回给客户端 304。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200629091734.png" alt="image-20200629091734519"></p>
<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>HTTP 是基于 TCP&#x2F;IP 的应用层协议，端口 80。</p>
<h4 id="http0-9"><a href="#http0-9" class="headerlink" title="http0.9"></a>http0.9</h4><p>该版本只有 <code>GET</code> 请求，协议规定只能返回 html 格式字符串，不能响应其他格式。服务器相应完毕，关闭连接。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /index.html</span><br></pre></td></tr></table></figure>



<h4 id="http1-0"><a href="#http1-0" class="headerlink" title="http1.0"></a>http1.0</h4><ul>
<li>除<code>GET</code> 外又引入 <code>POST</code> 请求</li>
<li>除数据部分，每次通必须要包含<strong>头信息</strong></li>
<li>增加状态码</li>
<li>多字符集支持</li>
<li>多部份发送</li>
<li>权限</li>
<li>缓存<ul>
<li><code>expires</code></li>
<li><code>Last-Modified, If-Modified-Since</code></li>
</ul>
</li>
<li>内容编码</li>
</ul>
<h5 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br></pre></td></tr></table></figure>

<p>第一行是请求命令，必须在尾部添加协议版本（<code>HTTP/1.0</code>）。后面就是多行头信息，描述客户端的情况</p>
<h5 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>137582</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Thu, 05 Dec 1997 16:00:00 GMT</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 5 August 1996 15:55:28 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache 0.84</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>回应的格式是”头信息 + 一个空行（<code>\r\n</code>） + 数据”。其中，第一行是”协议版本 + 状态码（status code） + 状态描述”。</p>
<h5 id="Content-Type-字段"><a href="#Content-Type-字段" class="headerlink" title="Content-Type 字段"></a>Content-Type 字段</h5><p>关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是<code>Content-Type</code>字段的作用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text/plain</span><br><span class="line">text/html</span><br><span class="line">text/css</span><br><span class="line">image/jpeg</span><br><span class="line">image/png</span><br><span class="line">video/mp4</span><br><span class="line">application/javascript</span><br></pre></td></tr></table></figure>

<p>这类数据称为 <code>MIME type</code> ，每个值包括一级类型和二级类型，斜杠分割，厂商也可自定义。</p>
<h5 id="Content-Encoding-字段"><a href="#Content-Encoding-字段" class="headerlink" title="Content-Encoding 字段"></a>Content-Encoding 字段</h5><p>数据压缩格式</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>compress</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>deflate</span><br></pre></td></tr></table></figure>

<p>客户端在请求时，用<code>Accept-Encoding</code>字段说明自己可以接受哪些压缩方法。</p>
<blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>每个 TCP 只能发送一个请求，而 TCP 连接建立成本高，所以就出现了一个非标准的 <code>Connection</code> 字段</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>

<p>服务器也返回同样的字段，服务器就不会关闭连接，以便复用。</p>
<h4 id="http1-1"><a href="#http1-1" class="headerlink" title="http1.1"></a>http1.1</h4><ul>
<li><p>持久连接</p>
<p>无需再添加 <code>Connection: keep-alive</code> 字段，服务器默认不会关闭TCP连接。如果客户端和服务器发送长时间没有进行通信，才会关闭。规范做法：客户端最后一个请求，发送<code>Connection: close</code> 表示关闭连接。</p>
</li>
<li><p>管道机制</p>
<p>同一个 TCP 连接中，可以同时发送多个请求，但服务器响应还是按照顺序响应。</p>
</li>
<li><p>Content-Length 字段</p>
<p>根据管道机制，就需要区分数据包属于哪个回应。 而 <code>Content-Length</code> 字段表示本次响应数据长度，后面的字节就属于下一个回应了。</p>
<p>而在 <code>http1.0</code> 版本中，<code>Content-Length</code> 则不是必须的，关闭TCP连接则表示当前数据包接收完毕。</p>
</li>
<li><p>分块传输编码</p>
<p>对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用”流模式”（stream）取代”缓存模式”（buffer）。</p>
<p>因此，1.1版规定可以不使用<code>Content-Length</code>字段，而使用<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg4JTg2JUU1JTlEJTk3JUU0JUJDJUEwJUU4JUJFJTkzJUU3JUJDJTk2JUU3JUEwJTgx">“分块传输编码”<i class="fa fa-external-link-alt"></i></span>（chunked transfer encoding）。只要请求或回应的头信息有<code>Transfer-Encoding</code>字段，就表明回应将由数量未定的数据块组成。</p>
</li>
<li><p>缓存（具体详看<code>备战校招第三天</code>）</p>
<ul>
<li>cache-control</li>
<li>Etag</li>
</ul>
</li>
<li><p>其他</p>
<p>添加方法： PUT、PATCH、HEAD、OPTIOPS、DELETE</p>
<p>请求头中添加 <code>Host</code> 字段，将请求发往同一台服务器上的不同网站，（为后来的虚拟主机兴起打下基础）。</p>
</li>
<li><p>缺点</p>
<p>一个TCP连接虽然可以发送多个请求，但响应还是按照顺序来，如果第一个响应慢，会导致阻塞后面的请求，这称为”队头堵塞“。</p>
<p>为了避免这个问题，解决方法</p>
<ul>
<li>减少请求数</li>
<li>同时多开持久连接</li>
</ul>
</li>
</ul>
<h4 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h4><ul>
<li><p>二进制协议</p>
<p>http1.1 中头信息是文本，数据体可以为文本和二进制，而 http2.0 是一个彻底的二进制协议，头信息和数据体都是二进制，统称为 ”帧“，头信息帧和数据帧。</p>
</li>
<li><p>多工（多路复用）</p>
<p>解决了 http1.1 中缺点（队头堵塞），举例，在一个TCP连接中，服务器同时收到 A和B 请求，先响应 请求A，但发现处理非常耗时，于是就发送A请求已经处理好的部分，紧接着响应请求B，完成后，继续处理请求A，并返回。</p>
<p>这样双向的、实时的通信，就叫做多工，也成为多路复用（Multiplexing）。</p>
</li>
<li><p>数据流</p>
<p>http2.0 的数据包不按照顺序发送，所以每个需要一个独立的ID作为标记。</p>
<p>规定：客户端发送出的数据流，ID为奇数。服务端发送的，ID为偶数。</p>
<p>数据流发送一般时候，如果需要取消这个数据流，服务器或客户端都可以发送信号（RST_STREAM帧）。也就是说，取消这次请求还可以保持TCP连接打开。而 http1.0 取消数据流的唯一方法，只能关闭 TCP 连接。</p>
</li>
<li><p>头信息压缩</p>
<p>http 无状态，请求必须携带所有信息。但每次很多时候字段都是重复的，比如：<code>cookie</code>、<code>user-agent</code>，在 http2.0 进行了优化，头信息使用 <code>gzip</code>、<code>compress</code> 压缩后再发送，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成索引号，之后只需要发送索引号即可，可以提高速度。</p>
</li>
<li><p>服务器推送</p>
<p>HTTP&#x2F;2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。</p>
<p>常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>http 协议</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE2LzA4L2h0dHAuaHRtbA==">https://www.ruanyifeng.com/blog/2016/08/http.html<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>http status codes</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第六天</title>
    <url>/posts/ad76c066/</url>
    <content><![CDATA[<ol>
<li>setState </li>
<li>useEffect</li>
</ol>
<hr>
<span id="more"></span>

<h3 id="React-this-setState"><a href="#React-this-setState" class="headerlink" title="React this.setState()"></a>React this.setState()</h3><h4 id="1-编程题练手"><a href="#1-编程题练手" class="headerlink" title="1. 编程题练手"></a>1. 编程题练手</h4><p>思考点击按钮后， <code>count</code> 的值为多少，<code>countB</code> 的值为多少？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">countB</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickBtn()&#125;&gt;add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.countB&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clickBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">countB</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">countB</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>));</span><br></pre></td></tr></table></figure>



<details> 
  <summary>点击查看结果</summary> 
  <pre>
    点击按钮执行完毕后，count: 1, countB: 1
    </pre> 
</details>



<h4 id="setState-总结"><a href="#setState-总结" class="headerlink" title="setState 总结"></a><code>setState</code> 总结</h4><ol>
<li><strong><code>setState</code> 只在合成事件和钩子函数中是“异步”的，在原生事件和 <code>setTimeout</code> 中都是同步的。</strong></li>
<li><strong><code>setState</code>的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。</strong></li>
<li><strong><code>setState</code> 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 <code>setState</code> ， <code>setState</code> 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 <code>setState</code> 多个不同的值，在更新时会对其进行合并批量更新。</strong></li>
</ol>
<p>总结来自<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjQ1YzU3YzUxODgyNTE5NzkwYzc0NDEjaGVhZGluZy03">掘金虹晨<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="2-进阶编程题"><a href="#2-进阶编程题" class="headerlink" title="2. 进阶编程题"></a><strong>2. 进阶编程题</strong></h4><p>点击 <code>add</code> 按钮后，<code>this.state.count</code> 值会在页面显示为多少？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickBtn()&#125;&gt;add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clickBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">2</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">2</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">3</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">fun</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fun</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">4</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Counter</span>;</span><br></pre></td></tr></table></figure>

<details> 
  <summary>点击查看结果</summary> 
  <pre>
    点击按钮执行完毕后，count: 11
    </pre> 
</details>

<p>根据上述总结，分析代码</p>
<ul>
<li>18 行 和 39行 的 <code>setState</code>  同处于一个 react 事件中（即<code>count+1 和 count+4</code>），又因为两个设置的属性相同，所以会被合并，只保留最后一个，<code>count + 4</code></li>
<li>22 行的 <code>setTimeout</code> 执行 <code>setState</code> 时为同步，且不会合并，会执行两次，并 render 两次， <code>(count + 2) *2</code> （注：实际运行时，根据<span class="exturl" data-url="aHR0cHM6Ly9wb3ByaW5nLmdpdGh1Yi5pby8yMDIwLzA2LzI0LyVFNSVBNCU4NyVFNiU4OCU5OCVFNiVBMCVBMSVFNiU4QiU5Qi8lRTUlQTQlODclRTYlODglOTglRTYlQTAlQTElRTYlOEIlOUIlRTclQUMlQUMlRTQlQjglODAlRTUlQTQlQTkvIyVFNiVCNSU4RiVFOCVBNyU4OCVFNSU5OSVBOCVFNSU5MiU4Q05vZGUtJUU0JUJBJThCJUU0JUJCJUI2JUU1JUJFJUFBJUU3JThFJUFGJUU2JTlDJUJBJUU1JTg4JUI2JUU1JThDJUJBJUU1JTg4JUFC">浏览器事件循环机制<i class="fa fa-external-link-alt"></i></span>，会在最后执行，）</li>
<li>31 行执行 <code>Promise.resolve().then</code> 的回调中，所以也同样不会合并， <code>count + 3</code> </li>
<li>将以上 <code>count</code> 值相加，<code>count: 11</code></li>
</ul>
<h4 id="Hooks-中的-state"><a href="#Hooks-中的-state" class="headerlink" title="Hooks 中的 state"></a>Hooks 中的 state</h4><p>在两秒内点击按钮五次，会输出什么，最后 <code>count</code> 的值为多少？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TestUse</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outer&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner&#x27;</span>);</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TestUse</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<details> 
  <summary>点击查看结果</summary> 
  <br>
  <img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200702200405.png" />
</details>

<p>分析</p>
<ul>
<li>两秒内点击五次按钮，<code>increment</code> 函数会执行五次</li>
<li>输出五次 <code>outer</code> 和  <code>inner</code></li>
<li>而这里的 <code>setTimeout</code> 读取到的 <code>count</code> 是通过闭包获取的，所以这里一直是获取的是初始值0，虽然加了五次，却每次都是 <code>0 +1</code></li>
<li>在前几个题 <code>class</code> 声明的组件中 <code>this.setState</code> 为什么会正常？每次获取 <code>count</code> 值是使用 <code>this.state.count</code> 获取到最新值。</li>
</ul>
<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>这段代码如何解释？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="keyword">function</span> fn1 &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []); </span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtZWZmZWN0Lmh0bWwjdGlwLW9wdGltaXppbmctcGVyZm9ybWFuY2UtYnktc2tpcHBpbmctZWZmZWN0cw==">react 官方文档<i class="fa fa-external-link-alt"></i></span>解释道</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200701114722.png" alt="image-20200701114715247"></p>
<p>由此可得出，此段代码只会在挂在时输出1，卸载时输出2。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>setState相关</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3Mvc3RhdGUtYW5kLWxpZmVjeWNsZS5odG1sI3N0YXRlLXVwZGF0ZXMtbWF5LWJlLWFzeW5jaHJvbm91cw==">https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjQ1YzU3YzUxODgyNTE5NzkwYzc0NDEjaGVhZGluZy03">https://juejin.im/post/5b45c57c51882519790c7441#heading-7<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNDQ5ODE5Ng==">https://segmentfault.com/a/1190000014498196<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EVTNOek01TWc9PSZtaWQ9MjI0NzQ4NTUzMyZpZHg9MSZzbj05NTNhOGRmNmYxYjk5MDg0YTI4Yjc0MjljMDA0NjRlNyZjaGtzbT1lOWMyNTdjMmRlYjVkZWQ0OGE4Y2QyOTkzZmZiMGEzN2I1YmM1NzE4OWY5ZGJhYWUyNzllNmFlMDE4YWYyMDI2Zjk2MWI0M2FiZGM2Jm1wc2hhcmU9MSZzY2VuZT0yMyZzcmNpZD0mc2hhcmVyX3NoYXJldGltZT0xNTkzNjUxMzc3MzQ0JnNoYXJlcl9zaGFyZWlkPWU4NzkzMGM0ZTQzZGYxZjBiMGUyYTQ4NDA0NGEwMTAxI3Jk">https://mp.weixin.qq.com/s?__biz=MzI1NDU3NzM5Mg==&amp;mid=2247485533&amp;idx=1&amp;sn=953a8df6f1b99084a28b7429c00464e7&amp;chksm=e9c257c2deb5ded48a8cd2993ffb0a37b5bc57189f9dbaae279e6ae018af2026f961b43abdc6&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1593651377344&amp;sharer_shareid=e87930c4e43df1f0b0e2a484044a0101#rd<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>js编程题</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第七天</title>
    <url>/posts/7f76b7f9/</url>
    <content><![CDATA[<ul>
<li><p>统计文档内所有标签</p>
</li>
<li><p>三栏布局，高度已知，左右两栏各<code>300px</code>，中间自适应</p>
</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="统计文档内所有标签"><a href="#统计文档内所有标签" class="headerlink" title="统计文档内所有标签"></a>统计文档内所有标签</h2><p>统计下列标签，返回结果放在一个数组内，均为小写，可以不按照顺序，示例如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回</span></span><br><span class="line">[<span class="string">&quot;html&quot;</span>, <span class="string">&quot;head&quot;</span>, <span class="string">&quot;body&quot;</span>, <span class="string">&quot;div&quot;</span>, <span class="string">&quot;p&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="第一种：根据js内置函数递归获取-document-all"><a href="#第一种：根据js内置函数递归获取-document-all" class="headerlink" title="第一种：根据js内置函数递归获取(document.all)"></a>第一种：根据<code>js</code>内置函数递归获取(<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/all"><del>document.all</del></a>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTags</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tags = <span class="variable language_">document</span>.<span class="title function_">all</span>()</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> tags) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(item.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种：getElmentByTagNames"><a href="#第二种：getElmentByTagNames" class="headerlink" title="第二种：getElmentByTagNames(&#39;*&#39;)"></a>第二种：<code>getElmentByTagNames(&#39;*&#39;)</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTags</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tags = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> tags) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(item.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三栏布局，高度已知，左右两栏各300px，中间自适应"><a href="#三栏布局，高度已知，左右两栏各300px，中间自适应" class="headerlink" title="三栏布局，高度已知，左右两栏各300px，中间自适应"></a>三栏布局，高度已知，左右两栏各<code>300px</code>，中间自适应</h2><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200727170756.png" alt="image-20200727170756952"></p>
<p>介绍下方法和思路</p>
<ol>
<li><p>float 布局</p>
<p>左栏和右栏浮动，中间默认</p>
</li>
<li><p>绝对定位</p>
<p>左栏 <code>left:0</code> 右栏 <code>right:0</code> 中间<code>left:300px; right:300px;</code></p>
</li>
<li><p>flex布局</p>
<p>父元素设置为 <code>display: flex;</code></p>
<p>设置左右宽为300px</p>
<p>中间设置 <code>flex: 1;</code> 相当于 <code>flex-grow:1;</code></p>
</li>
<li><p>table布局</p>
<p>父元素 <code>display: table;</code></p>
<p>子元素 <code>display: table-cell; </code></p>
<p>左右各为 <code>300px</code></p>
</li>
<li><p>grid布局</p>
<p>通过设置 <code>row</code> 和 <code>column</code> 来控制</p>
</li>
</ol>
<blockquote>
<p>建议将如下代码粘贴到编辑器里查看</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.layout</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left-center-right</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left-center-right</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left-center-right</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left-center-right</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 浮动布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.float</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.float</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.float</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right float&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">          1. 浮动布局</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定位布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.absoulte</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.absoulte</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;<span class="selector-class">.absoulte</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.absoulte</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right absoulte&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">          2. 定位布局</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. flex布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-top</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flex</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right flex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            3. flex布局</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- table 布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.table</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.table</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.table</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.table</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">          4. table 布局</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- grid 布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.grid</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">grid-template-columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">grid-template-rows</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right grid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">          5. grid 布局</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第八天</title>
    <url>/posts/881d9fba/</url>
    <content><![CDATA[<ul>
<li><code>display:none</code> 和 <code>visibilty: hidden</code> 区别</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="display-none-和-visibility-hidden-区别"><a href="#display-none-和-visibility-hidden-区别" class="headerlink" title="display:none 和 visibility: hidden 区别"></a><code>display:none</code> 和 <code>visibility: hidden</code> 区别</h2><p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一个ul<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个ul<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>第二个ul<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个ul<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>显示如下</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200730115508.png" alt="image-20200730115503519"></p>
<p>可以看出</p>
<ul>
<li><p>占据位置</p>
<p>visibility 隐藏元素而不更改文档的布局，相当于此元素变成透明。</p>
<p>display 直接将元素完全隐藏（就好像这个元素不存在一样）。</p>
</li>
<li><p>属性继承</p>
<p>visibility 是继承属性，<strong>要注意若将其子元素设为 <code>visibility: visible</code>，则该子元素依然可见。</strong></p>
<p>display 若父元素设置为 <code>none</code> ，子元素也随之隐藏。</p>
</li>
<li><p>页面修改相关值后，是否会重新渲染</p>
<p>visibility 不会重新渲染，</p>
<p>display 会重新渲染</p>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2Rpc3BsYXk=">https://developer.mozilla.org/zh-CN/docs/Web/CSS/display<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3Zpc2liaWxpdHk=">https://developer.mozilla.org/zh-CN/docs/Web/CSS/visibility<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>备战校招第九天</title>
    <url>/posts/f2d0bee5/</url>
    <content><![CDATA[<ul>
<li>CSS模型<ul>
<li>标准盒模型和IE盒模型</li>
<li>设置两种模型</li>
<li>获取盒模型的宽高</li>
<li>BFC</li>
</ul>
</li>
<li>DOM事件类<ul>
<li>DOM事件级别</li>
<li>DOM事件模型</li>
<li>事件 捕获&#x2F;冒泡 流程</li>
<li>Event 事件</li>
</ul>
</li>
<li>原型链类<ul>
<li>创建对象的几种方法</li>
<li>原型、构造函数、原型链、实例关系</li>
<li>instanceof 原理</li>
<li>new 运算符</li>
<li>模拟 new</li>
</ul>
</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h2><h3 id="两种模型介绍"><a href="#两种模型介绍" class="headerlink" title="两种模型介绍"></a>两种模型介绍</h3><p><a href="./%E5%A4%87%E6%88%98%E6%A0%A1%E6%8B%9B%E7%AC%AC%E4%BA%8C%E5%A4%A9.md">之前文章</a></p>
<p>标准模型</p>
<p>width（总宽度） &#x3D; width（内容宽度）</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200801151343.jpg" alt="img"></p>
<p>IE模型</p>
<p>width（总宽度） &#x3D; width（内容宽度） + padding + border</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200801151353.jpg" alt="img"></p>
<h3 id="设置两种模型"><a href="#设置两种模型" class="headerlink" title="设置两种模型"></a>设置两种模型</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 标准盒子模型，大多数浏览器默认设置 */</span></span><br><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE盒子模型 */</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br></pre></td></tr></table></figure>



<h3 id="js获取盒模型的宽高"><a href="#js获取盒模型的宽高" class="headerlink" title="js获取盒模型的宽高"></a>js获取盒模型的宽高</h3><blockquote>
<p>样式导入的方式有三种</p>
<ul>
<li>通过 link 标签外联</li>
<li>style标签</li>
<li>内联样式（元素内添加style属性）</li>
</ul>
</blockquote>
<h4 id="dom-style-width-height"><a href="#dom-style-width-height" class="headerlink" title="dom.style.width&#x2F;height"></a>dom.style.width&#x2F;height</h4><p>只能取出内联样式的属性，也就表示只能获取到内联属性的宽和高，对于使用其他两种方式导入获取不到</p>
<h4 id="Element-currentStyle-width-height"><a href="#Element-currentStyle-width-height" class="headerlink" title="Element.currentStyle.width&#x2F;height"></a>Element.currentStyle.width&#x2F;height</h4><p>可以获取到即使运行的结果，但只支持IE</p>
<h4 id="Window-getComputedStyle-dom-width-height"><a href="#Window-getComputedStyle-dom-width-height" class="headerlink" title="Window.getComputedStyle(dom).width&#x2F;height"></a>Window.getComputedStyle(dom).width&#x2F;height</h4><p>等同于上面的 <code>Element.currentStyle.width/height</code>，但兼容firefox、chrome</p>
<h4 id="Element-getBoundingClientRect-width-height"><a href="#Element-getBoundingClientRect-width-height" class="headerlink" title="Element.getBoundingClientRect().width&#x2F;height"></a>Element.getBoundingClientRect().width&#x2F;height</h4><p>方法返回元素的大小及其相对于视口的位置。</p>
<h3 id="BFC（块格式化上下文）"><a href="#BFC（块格式化上下文）" class="headerlink" title="BFC（块格式化上下文）"></a>BFC（块格式化上下文）</h3><p><a href="%E5%A4%87%E6%88%98%E6%A0%A1%E6%8B%9B%E7%AC%AC%E4%B8%80%E5%A4%A9.md">之前的总结</a></p>
<p>与BFC相对应的还有IFC（内联格式化上下文）、GFC（网格格式化上下文 ）、FFC（自适应格式化上下文）</p>
<h4 id="BFC基本概念"><a href="#BFC基本概念" class="headerlink" title="BFC基本概念"></a>BFC基本概念</h4><p>块格式化上下文</p>
<h4 id="BFC原理"><a href="#BFC原理" class="headerlink" title="BFC原理"></a>BFC原理</h4><ul>
<li>在BFC元素垂直方向会发生边距重叠</li>
<li>BFC元素的边距不会与浮动元素的边距重叠 </li>
<li>BFC元素是一个独立的容器，外面元素不回影响内部的元素，里面的元素也不回影响外面的元素</li>
<li>计算BFC元素高度时，浮动元素 也会参加计算</li>
</ul>
<h4 id="如何创建BFC"><a href="#如何创建BFC" class="headerlink" title="如何创建BFC"></a>如何创建BFC</h4><p><a href="%E5%A4%87%E6%88%98%E6%A0%A1%E6%8B%9B%E7%AC%AC%E4%B8%80%E5%A4%A9.md">之前的总结</a></p>
<h4 id="BFC使用场景"><a href="#BFC使用场景" class="headerlink" title="BFC使用场景"></a>BFC使用场景</h4><ul>
<li>margin 重叠问题</li>
<li>清除浮动</li>
</ul>
<h2 id="DOM事件类"><a href="#DOM事件类" class="headerlink" title="DOM事件类"></a>DOM事件类</h2><h3 id="DOM事件级别"><a href="#DOM事件级别" class="headerlink" title="DOM事件级别"></a>DOM事件级别</h3><h4 id="DOM0"><a href="#DOM0" class="headerlink" title="DOM0"></a>DOM0</h4><p>定义方式为 js 中的 <code>element.onclick = function() &#123;&#125;</code>，或者在html标签中使用 <code>onclick</code> 属性定义。</p>
<h4 id="DOM1"><a href="#DOM1" class="headerlink" title="DOM1"></a>DOM1</h4><blockquote>
<p>没有涉及和DOM事件相关的</p>
</blockquote>
<h4 id="DOM2"><a href="#DOM2" class="headerlink" title="DOM2"></a>DOM2</h4><p>element.addEventListener(‘click’, function() {}, false)</p>
<h4 id="DOM3"><a href="#DOM3" class="headerlink" title="DOM3"></a>DOM3</h4><blockquote>
<p>添加鼠标键盘等事件</p>
</blockquote>
<p>element.addEventListener(‘keyup’, function() {}, false)</p>
<h3 id="DOM事件模型"><a href="#DOM事件模型" class="headerlink" title="DOM事件模型"></a>DOM事件模型</h3><h4 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h4><ul>
<li><p>执行顺序，从上往下</p>
</li>
<li><p>定义事件时，addEventListener 的第三个参数为是否捕获事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><ul>
<li><p>执行顺序，从下往上</p>
</li>
<li><p>阻止继续冒泡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="事件捕获流程"><a href="#事件捕获流程" class="headerlink" title="事件捕获流程"></a>事件捕获流程</h3><blockquote>
<p>冒泡的流程与之相反</p>
</blockquote>
<p>window - document - html - body - xxx - 目标元素</p>
<h3 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h3><p>event.preventDefault()</p>
<blockquote>
<p>阻止默认行为（事件）</p>
</blockquote>
<p>event.stopPropagation()</p>
<blockquote>
<p>阻止冒泡</p>
</blockquote>
<p>event.stopImmediatePropagation()</p>
<blockquote>
<p>阻止click事件冒泡,并且阻止当前元素上绑定的其他同类事件的事件监听函数的执行.</p>
</blockquote>
<p>event.currentTarget</p>
<blockquote>
<p>指向事件绑定的元素</p>
</blockquote>
<p>event.target</p>
<blockquote>
<p>事件触发的元素</p>
</blockquote>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><h4 id="new-Event-typeArg-eventInit"><a href="#new-Event-typeArg-eventInit" class="headerlink" title="new Event(typeArg, eventInit);"></a>new Event(typeArg, eventInit);</h4><ul>
<li>dispatchEvent 触发事件</li>
</ul>
<h4 id="new-CustomEvent-typeArg-customEventInit"><a href="#new-CustomEvent-typeArg-customEventInit" class="headerlink" title="new CustomEvent(typeArg, customEventInit);"></a>new CustomEvent(typeArg, customEventInit);</h4><ul>
<li>dispatchEvent(event); 触发事件</li>
</ul>
<h3 id="原型链类"><a href="#原型链类" class="headerlink" title="原型链类"></a>原型链类</h3><h4 id="创建对象的几种方法"><a href="#创建对象的几种方法" class="headerlink" title="创建对象的几种方法"></a>创建对象的几种方法</h4><p>第一种 字面量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;name : <span class="string">&#x27;o1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>第二种（与第一种属于一类 ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;o1&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>第三种 通过构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> <span class="title function_">M</span>(<span class="string">&#x27;o3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第四种 Object.create</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> P = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;o4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="title class_">Object</span>.<span class="title function_">create</span>(P)</span><br></pre></td></tr></table></figure>

<h4 id="原型、构造函数、原型链、实例关系"><a href="#原型、构造函数、原型链、实例关系" class="headerlink" title="原型、构造函数、原型链、实例关系"></a>原型、构造函数、原型链、实例关系</h4><p>以上面的第三种举例</p>
<ul>
<li>构造函数为 M</li>
<li>原型对象为 M.prototype</li>
<li>实例为 o3</li>
<li>原型对象的原型对象 <code>o3.__proto__.__proto__</code></li>
</ul>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2L2Fuc3dlci81ODE1NTg3OA==">总结<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>对象有属性__proto__,指向该对象的构造函数的原型对象。</li>
<li>方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。</li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9Jbmhlcml0YW5jZV9hbmRfdGhlX3Byb3RvdHlwZV9jaGFpbg==">mdn 总结<i class="fa fa-external-link-alt"></i></span></p>
<p>每个实例对象（ object ）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（<strong>prototype</strong> ）。该原型对象也有一个自己的原型对象( <code>__proto__</code> ) ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200801185112.png" alt="image-20200801185112618"></p>
<h4 id="instanceof-原理"><a href="#instanceof-原理" class="headerlink" title="instanceof 原理"></a>instanceof 原理</h4><blockquote>
<p>mdn 文档解释这一句话解释的很清楚。</p>
</blockquote>
<p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p>
<h4 id="typeof-原理"><a href="#typeof-原理" class="headerlink" title="typeof 原理"></a>typeof 原理</h4><blockquote>
<p><strong><code>typeof</code></strong> 操作符返回一个字符串，表示未经计算的操作数的类型。除基本类型外，无论引用的是什么类型的对象，都会返回 <code>object</code>。</p>
</blockquote>
<p>typeof 可能返回值的类型</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS91bmRlZmluZWQ=">Undefined<i class="fa fa-external-link-alt"></i></span></td>
<td align="left"><code>&quot;undefined&quot;</code></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9OdWxs">Null<i class="fa fa-external-link-alt"></i></span></td>
<td align="left"><code>&quot;object&quot;</code> (见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3R5cGVvZiNudWxs">下文<i class="fa fa-external-link-alt"></i></span>)</td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9Cb29sZWFu">Boolean<i class="fa fa-external-link-alt"></i></span></td>
<td align="left"><code>&quot;boolean&quot;</code></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9OdW1iZXI=">Number<i class="fa fa-external-link-alt"></i></span></td>
<td align="left"><code>&quot;number&quot;</code></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9CaWdJbnQ=">BigInt<i class="fa fa-external-link-alt"></i></span>(ECMAScript 2020 新增)</td>
<td align="left"><code>&quot;bigint&quot;</code></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS8lRTUlQUQlOTclRTclQUMlQTYlRTQlQjglQjI=">String<i class="fa fa-external-link-alt"></i></span></td>
<td align="left"><code>&quot;string&quot;</code></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9TeW1ib2w=">Symbol<i class="fa fa-external-link-alt"></i></span> (ECMAScript 2015 新增)</td>
<td align="left"><code>&quot;symbol&quot;</code></td>
</tr>
<tr>
<td align="left">宿主对象（由 JS 环境提供）</td>
<td align="left"><em>取决于具体实现</em></td>
</tr>
<tr>
<td align="left"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9GdW5jdGlvbg==">Function<i class="fa fa-external-link-alt"></i></span> 对象 (按照 ECMA-262 规范实现 [[Call]])</td>
<td align="left"><code>&quot;function&quot;</code></td>
</tr>
<tr>
<td align="left">其他任何对象</td>
<td align="left"><code>&quot;object&quot;</code></td>
</tr>
</tbody></table>
<h4 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&#x27;o33&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> <span class="title function_">M</span>()</span><br></pre></td></tr></table></figure>

<p>以上代码new步骤</p>
<ol>
<li>创建一个新对象，继承自 <code>M.prototype</code></li>
<li>构造函数 M 执行，相应的参数传入（如果不传递参数，可以用 <code>new M</code> 代替 <code>new M()</code>）。this指向这个新实例。</li>
<li>如果构造函数没有返回对象，则默认为 new 的结果。如果构造函数返回一个对象，那么返回的这个对象取代整个 new 出来的结果。</li>
</ol>
<h4 id="自己动手实现-new"><a href="#自己动手实现-new" class="headerlink" title="自己动手实现 new"></a>自己动手实现 new</h4><p>可以根据 new 步骤实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;o33&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> P = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(M.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">var</span> k = M.<span class="title function_">call</span>(obj, ...<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> k === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">  	<span class="keyword">return</span> k</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  	<span class="keyword">return</span> obj </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> <span class="title function_">M</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o3 :&gt;&gt; &quot;</span>, o3);</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="title function_">P</span>(<span class="string">&#x27;o4&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o4 :&gt;&gt; &quot;</span>, o4);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>备战</category>
      </categories>
      <tags>
        <tag>BFC</tag>
        <tag>js</tag>
        <tag>盒模型</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年度总结</title>
    <url>/posts/f982cd1d/</url>
    <content><![CDATA[<p>新的一年，应继续保持学习，计划</p>
<ul>
<li><code>vue</code> 深入学习，之前还是学习的不够深入</li>
<li><code>TypeScript</code> 也应该入手了，都 <code>0202</code> 年了，总不能还不会 <code>ts</code> 吧</li>
<li>走进后端，<code>koa</code>, <code>eggjs</code> 等学一个</li>
<li>不挂科</li>
<li>不挂科</li>
<li>不挂科</li>
</ul>
<span id="more"></span>

<h1 id="2019年度总结"><a href="#2019年度总结" class="headerlink" title="2019年度总结"></a>2019年度总结</h1><blockquote>
<p>吾日三省吾身，今年又是菜鸡的一年</p>
</blockquote>
<h2 id="github-提交记录"><a href="#github-提交记录" class="headerlink" title="github 提交记录"></a>github 提交记录</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmc/dGFiPW92ZXJ2aWV3JmZyb209MjAxOS0xMi0wMSZ0bz0yMDE5LTEyLTMx">github<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>删除了一些仓库，响应的提交记录也被移除了</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200107130123.png"></p>
<h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><p>由于上半年都在公司实习和准备考试，所以新学的知识不多，主要集中在下半年。</p>
<p>不过还是遇到些问题（主要原因是当时的知识不成体系，有点杂乱）</p>
<ul>
<li>箭头函数</li>
</ul>
<p>当时在chrome中使用箭头函数调试，一点问题都没有，但在 <code>iOS</code> 中怎么先显示不出来。</p>
<p>经过多次排查，才发现，<code>iOS</code> 版本不够高，底层 <code>webkit</code> 内核版本自然也不高，所以不支持箭头函数。</p>
<p>这也算是兼容性问题，都怪我当时年少无知。。。</p>
<ul>
<li>微信网页 下拉刷新问题</li>
</ul>
<p>代码就不贴了，正常情况下微信网页内下拉会显示当前网址的域名等信息。</p>
<p>所以我们实现下拉刷新就不能以常规的方式实现了，在全局内容的最外层加一个 <code>div</code>，每次滚动都是值滚动内层的 <code>div</code>，如果到了顶部，仍继续下拉，则可以执行下拉刷新操作。当时用的是 <code>jquery-weui</code> ，<span class="exturl" data-url="aHR0cDovL3d3dy5qcXdldWkuY24vZXh0ZW5kcyNwdWxsLXRvLXJlZnJlc2glRUYlQkMlOEMlRTQlQjklOEIlRTUlODklOEQlRTQlQjklOUYlRTclOTQlQTg=">http://www.jqweui.cn/extends#pull-to-refresh，之前也用<i class="fa fa-external-link-alt"></i></span> <code>swiper</code> 做过类似功能。</p>
<ul>
<li>获取表单的值</li>
</ul>
<p>记得当时的我用 <code>jQuery</code> ，傻傻的每次获取表单值的时候，都是傻傻的用 <code>$(&#39;#xx&#39;).value()</code>，然后一个页面写了五六个（心疼以后维护我代码的小伙伴）。直到又来偶然看到一篇文章，一行代码获取表单值，我惊了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#form&quot;</span>).<span class="title function_">serialize</span>(); <span class="comment">// 序列化为字符串</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#form&quot;</span>).<span class="title function_">serializeArray</span>(); <span class="comment">// 序列化为数组</span></span><br></pre></td></tr></table></figure>



<p>然后就是今年下半年</p>
<ul>
<li><p>vue 做了一个类似 去哪儿网，这个项目唯一的特色就是城市选择列表，可以滑动右边的字母，左边城市列表也会调到响应的字母，<code>better-scroll</code> 插件实现。</p>
<p>滚动原理</p>
<p><img data-src="http://static.galileo.xiaojukeji.com/static/tms/shield/scroll-4.png"></p>
</li>
<li><p>小黄车后台管理系统，使用 <code>react</code> 全家桶，大致了解下 <code>react</code> 生态圈，主要是<code>react</code>, <code>react-router</code>, <code>redux</code>, <code>ant-design</code>，顺带了解了下 <code>Echarts</code> 绘图（主要是 <code>d3.js</code> 中文学习资料太少，英文看起来慢，目前还停留在画个简单的柱形图）。</p>
<p><code>react</code> 全家桶用过之后，感觉很类似 <code>vue</code>，不过又与<code>vue</code>不同，<code>react</code> 体现的更加开放，更加注重原生<code>js</code>，所以意味这你要封装很多的组件，也意味着代码水平决定了你的组件的健壮度。而 <code>vue</code> 相对于新手来说就友好很多了，很多常用的功能官方都已经封装好了，上手很快。所以 <code>vue</code> 更适合快速开发项目，而 <code>react</code> 更加适合大项目。</p>
<p>就最近遇到的问题，<code>vue-router</code> 中内置了 <code>beforeEach</code> 路由守卫功能，而 <code>react</code> 中则需要自己写，引用作者的话 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvcmVhY3Qtcm91dGVyL2lzc3Vlcy80OTYyI2lzc3VlY29tbWVudC0zNTU1NzI2MjI=">You can do this from within your render function. JSX doesn’t need an API for this because it’s more flexible.<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="新年新气象"><a href="#新年新气象" class="headerlink" title="新年新气象"></a>新年新气象</h2><p>新的一年，应继续保持学习，计划</p>
<ul>
<li><code>vue</code> 深入学习，之前还是学习的不够深入</li>
<li><code>TypeScript</code> 也应该入手了，都 <code>0202</code> 年了，总不能还不会 <code>ts</code> 吧</li>
<li>走进后端，<code>koa</code>, <code>eggjs</code> 等学一个</li>
<li>不挂科</li>
<li>不挂科</li>
<li>不挂科</li>
</ul>
<hr>
<p>来还愿，除了 深度学习 <code>vue</code> ，其他计划都圆满完成</p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
  </entry>
  <entry>
    <title>2020年度总结</title>
    <url>/posts/276e22e/</url>
    <content><![CDATA[<p>写这篇文章的时候，已经在2021年的七月份了，也是拖延了半年才终才想起来。</p>
<span id="more"></span>



<h1 id="2020年度总结"><a href="#2020年度总结" class="headerlink" title="2020年度总结"></a>2020年度总结</h1><blockquote>
<p>有些事情不是看到希望才会去坚持，而是坚持了才会看到希望。</p>
</blockquote>
<h2 id="github提交记录"><a href="#github提交记录" class="headerlink" title="github提交记录"></a>github提交记录</h2><blockquote>
<p>主要还是在写毕设的项目，前端Vue+ElementUI，后端Express+Sequelize+MySQL</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702204903.png" alt="image-20210702204856883"></p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上半年因为疫情原因，就出了很多表情包，是蛮有趣的。🐶</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702213713.jpg" alt="mmexport1579599860300"></p>
<p>也看到很多博主科普真假口罩，很不幸我就高价买过口罩，，</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702213849.png" alt="mask"></p>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>开学后，由于学校有课就没有抓住秋招，到了十月份学校的课程才结束，而那会儿秋招基本快已经结束，我才开始投简历。</p>
<p>不出意外，投了很多简历石沉大海（当然一部分也是简历的原因）。</p>
<p>知道大公司没戏之后，就投了几家小公司（说实话当然看着同学一个一个都出去实习，自己还是有点着急的）。</p>
<p>最后我去了厦门。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702222937.jpg" alt="P10223-143934"></p>
<p>当时的老板还是比较认可我的，也给了我一些比较艰巨的任务，说实话我都不知道我怎么扛下来的，，作为实习生的我第一次接到大活，还是有点小慌，好在最后也做完了，没啥大问题。</p>
<p>在实习这段时间自己也沉淀了很多东西，为后来的春招打下了基础，很多东西也都是写项目时候遇到真真实实存在的问题。当然对 <code>Vue</code> 全家桶的使用也越来越熟练，为了方便些业务，自己封装了几个组件、Vue的指令之类的，还有将 <code>ElementUI</code> 魔改（以后要维护这些代码的兄弟受苦了）。</p>
<p>同时也是在厦门的这段时间，看到的大圣老师的早起打卡，渐渐的养成了早睡早起的习惯。晚上下班回家后，真的的没有经历去学习啥的，但早上却是一天的开始，读书学习精力很充沛，有时候不想看书就早起锻炼一下活动活动身体。</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>两个月时间把 <code>深入浅出Nodejs</code> 和 <code>白帽子讲Web攻防</code> 看完了，当然这两本书也只是看完第一遍了，很多东西只停留在了表面理解，还需后续的多刷几遍来加深理解。</p>
<p>这一年，还看了两篇传记 <code>阿迅</code>、<code>平均分</code>，光鲜亮丽的面前，都是背后经过了不为人知的心酸。其中阿迅有一段写的很好，就摘抄出来了。</p>
<blockquote>
<p>曾经历了背叛，才知道忠诚的价值；曾直面了磨难，才激起奋斗的意志；曾被嘲笑损贬，才清楚尊重的意义；曾被四面围困，才倾听内心的声音；曾被病痛折磨，才领悟健康的攸关；曾感受了孤独，才珍惜真爱的陪伴；曾遭遇了绝望，才明白梦想的力量；曾经历了生死，才懂得因果的必然。</p>
</blockquote>
<h3 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h3><p>随手拍的几张不错的，就丢出来了。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702225811.jpg" alt="P01120-060921"></p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20210702225821.jpg" alt="P01108-172257"></p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>今年在技术上或许没啥好总结的，更多的是在原来技术上进行的一种熟练。</p>
<p>遇到的问题也有输出成文章。（争取早日将文章补完😂）</p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
  </entry>
  <entry>
    <title>2021年度总结</title>
    <url>/posts/dfe03bab/</url>
    <content><![CDATA[<h1 id="2021年度总结"><a href="#2021年度总结" class="headerlink" title="2021年度总结"></a>2021年度总结</h1><p>这是在我入职后，一位同事机缘巧合下送给我的一句话。</p>
<blockquote>
<p>这个世界缺的不是完美的人，而是从心底给出的真心、正义、无谓与同情。</p>
<p>—出自《无问东西》</p>
</blockquote>
<p>这句话是我今年说的最多的口头禅，无论是对自己，还是对别人。</p>
<blockquote>
<p>Everything will be okay in the end. If it’s not okay, it’s not the end. </p>
<p>一切都将会好起来的。</p>
</blockquote>
<span id="more"></span>

<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>这一年深知自己无论是硬技能还是软技能都欠缺太多，所以这一年买了很多课程，想一口气吃成一个胖子，然而直到年末也有很多课还没开始看。明年还是得按照自己的节奏来，就像我朋友经常说的：<strong>心态要好</strong>。</p>
<p>这一年我收获了：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
读书</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNTE3NTMyMS8=">JavaScript 高级程序设计<i class="fa fa-external-link-alt"></i></span>（目前进度看了过半）</li>
<li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xNzc1NjkxLw==">少有人走的路<i class="fa fa-external-link-alt"></i></span></li>
<li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDg0MzM2Lw==">小王子<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
一份还可以的工作</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
国内随处走走（旅游）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
早睡早起（上半年打卡完成）</p>
</li>
</ul>
<p>这一年也活跃在社区：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmc/dGFiPW92ZXJ2aWV3JmZyb209MjAyMS0wMS0wMSZ0bz0yMDIxLTEyLTMx">github<i class="fa fa-external-link-alt"></i></span>：主要也是随着接触的业务越来越多，场景也变得复杂起来，遇到的问题越来越多，很多时候 <code>google</code> 和 <code>baidu</code> 并不能解决问题，只能去寻求原作者帮助。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vdXNlci80NDA2NDk4MzM0ODgwODYyL3Bvc3Rz">掘金<i class="fa fa-external-link-alt"></i></span>：除去打卡文章，也写了两篇文章，虽技术含量不算高，但也确为实践中总结出。</p>
<h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>年初这段时间公司不算特别忙，基本上都还能准点下班，哈哈哈，每天准点下班就是为了可以早睡早起。</p>
<p>在工作中渐渐的也得心应手了，处理问题能力也提高了不少，相对于入职前还是提高了不少，遇到了很多实际开发中会碰到的问题，也为公司现有的系统做了一些优化，主要是在用户体验和性能上下了些功夫，说实话这些都没有专门进行衡量，也没有具体数值 <sup>[坑点1]</sup> 。但现在所折腾的一些事，也确实在我春招面试时帮了我很多。</p>
<h3 id="过年"><a href="#过年" class="headerlink" title="过年"></a>过年</h3><p>因为疫情，响应国家号召就地过年，还好在厦门还有几位好友，过了一个不一样的年。</p>
<h3 id="备战"><a href="#备战" class="headerlink" title="备战"></a>备战</h3><p>因为各种各样的原因错过了秋招，为了不给自己留遗憾，在 <code>3</code> 月初辞职，专心备战春招。春招有一些公司会开始提前批，现在看来 3 月初进行备战也有点晚。</p>
<p>辞职后，就每天朝九晚九到图书馆复习和投简历，那段时间真的没感觉到累，每天都特别充实，收集招聘信息，复习专业知识。最忙的时候，一天都在面试+笔试，基本就是上一场刚结束，休息10-20分钟左右就开始下一场。</p>
<p>不过在没有接到 offer 时仍然会感到焦虑，每当我焦虑时，就会选择继续复习或者出门散步之类的，避免陷入自我怀疑的状态，容易恶性循环（现在看，当时的我太睿智了，也有一部分原因是真的需要做的事情还有很多，没有时间去焦虑）。</p>
<blockquote>
<p>在我求学的时候，我看到了很多比我优秀的人才，无论是智力还是背景，但是你知道吗，我不觉得没钱没背景就是平庸，那是别人贴给你标签。唯有你自己内心的平庸，才是毁掉你人生的平庸。你内心的平庸，就是你失去追求卓越信念的那个瞬间。(Your internal mediocrity is the moment when you lost the faith of being excellent.) 你以后会遇到很多机遇，但你的平庸会毁掉它们。当你觉得自己做的还不错的时候，你已经杀死了那个能够让你做的更好的自己。(When you get the feeling that your work is OK, you have got killed another ‘you’ who can make it much better.)”</p>
<p>— <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL2FwcHZpZXcvdjIvYW5zd2VyLzczNjQ1NDIwP2lzX3ZpZGVvX2Fuc3dlcl9wYWdlPTAmb21uaT0xJlgtQUQ9Y2FudmFzX3ZlcnNpb246dj01LjE7c2V0dGluZzpjYWQ9MCZhZF9wdl90cmFjaz0x">知乎-山羊月-为什么越努力，越焦虑<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>大概过了十天左右，收到了一个实习offer（需要实习才能转正）和一个校招offer，而待遇和我的理想薪资也差不多，基本已经想躺平了，但是转念一想，都辞职了，为什么不干票大的，冲一冲，万一进大厂呢？</p>
<p>经过朋友和社区内的同学引荐和内推，也如愿以偿的收到了几个来自大厂的面试邀请，虽然最后没有杀到决赛圈，但也渐渐的找到面试技巧。</p>
<blockquote>
<p>总结为以下几点（知乎上各路大佬也聊了很多，这里就不细聊了）：</p>
<ul>
<li>写好简历</li>
<li>准备一段三分钟以内的自我介绍</li>
<li>项目（若有）、专业知识准备充分</li>
<li>心态要好</li>
<li>提前准备反问问题（你想要了解公司什么）</li>
</ul>
<p>应届生的话，其实可以把面试当成和前辈交流的一次机会，把你的想法，你所做过认为比较有成就的事儿与面试官聊一下，如果恰好遇到热心的面试官甚至可以在面试过程中有什么不懂的地方进行请教。</p>
</blockquote>
<p>面试的多了，也不惧场了，渐渐的好了起来。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>最后选择了上海一家公司，虽不是大厂，但公司渐渐的有了大厂的样子。之前我一直心心念念的想去深圳，却怎么也没有想到会到上海，不是缘分是什么？</p>
<p>工作比较忙碌，过着996的日子，但现在回顾一下这半年，与实习时相比收获还是蛮大的。</p>
<p>长话短说，归为以下几点：</p>
<ul>
<li><p>项目开发、上线的流程</p>
<ul>
<li><p>规范开发，减少事故</p>
</li>
<li><p>对于代码版本管理若使用 <code>git</code> ，使用可视化软件 <code>SourceTree</code> 也不错</p>
</li>
</ul>
</li>
<li><p>对于<span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL3R1dG9yaWFsLzEwMDM3L2FkYjE5ZTVhNmQ0ZDQxNzFhNGY1OTY2NTZiOWE2YTQy">B端的业务<i class="fa fa-external-link-alt"></i></span>也有了一些初步的认识</p>
<ul>
<li><p>更注重效率、工具是否好用</p>
</li>
<li><p>除了根据用户反馈，还需通过一些埋点数据，来进行分析行为</p>
</li>
</ul>
</li>
<li><p>找到适合自己的工作节奏方式</p>
<ul>
<li><p>开会中可以快速抓住别人讲话重点，若恰巧自己有观点，可以在适当的时候进行输出。</p>
</li>
<li><p>合理安排需求时间。</p>
</li>
<li><p>若需求比较庞大且复杂，最好根据PRD捋一遍顺序，将不确定点、边界条件等进行明确，整理出适合自己看的文档（不需要多漂亮，可以直观的让自己明白所做之事即可）。</p>
</li>
<li><p>在编码时，手机调至勿扰模式，电脑关闭无关消息提醒，专注编码，效率 max+。</p>
</li>
</ul>
</li>
<li><p>提高沟通效率</p>
<ul>
<li><p>经典的 <span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA4MDQuaHRtbA==">X-Y Problem<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYW53dS9Ib3ctVG8tQXNrLVF1ZXN0aW9ucy1UaGUtU21hcnQtV2F5">提问的智慧<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
</li>
</ul>
<h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><ul>
<li><p><input disabled="" type="checkbox"> 
继续保持好的心态</p>
</li>
<li><p><input disabled="" type="checkbox"> 
养成良好作息</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
坚持早睡早起</p>
</li>
<li><p><input disabled="" type="checkbox"> 
每周适当地进行体育锻炼</p>
</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
提升自信心</p>
</li>
<li><p><input disabled="" type="checkbox"> 
养成读书习惯</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
JavaScript 高级程序设计</p>
</li>
<li><p><input disabled="" type="checkbox"> 
<span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNTk3NjU0NC8=">故事<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><input disabled="" type="checkbox"> 
<span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjM2OTY5OS8=">被讨厌的勇气<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
科学、有技巧的提升</p>
<ul>
<li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDYxNDAx">爱上跑步<i class="fa fa-external-link-alt"></i></span></li>
<li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDUxOTAx">互联网人的英语私教课<i class="fa fa-external-link-alt"></i></span></li>
<li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTAwMDY0NTAxP3RhYj1jYXRhbG9n">大厂指南<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
  </entry>
  <entry>
    <title>2022年度总结</title>
    <url>/posts/622a5765/</url>
    <content><![CDATA[<h1 id="2022年度总结"><a href="#2022年度总结" class="headerlink" title="2022年度总结"></a>2022年度总结</h1><blockquote>
<p>Now I have come to the crossroads in my life, I always knew what the right path was.<br>Without exception, I knew, but I never took it.<br>You know why?<br>It was too damn hard.<br>如今我走到了人生十字路口，我知道哪条路是对的，毫无例外，我就知道，但我从不走，为什么？因为tm的太苦了。<br>—出自《闻香识女人》电影末尾 <code>Al Pacino</code> 的演讲，全文演讲堪称经典，推荐去看原片。</p>
</blockquote>
<span id="more"></span>



<p>在写这篇总结之前，把之前写的全部都回顾了一遍，却仍然不知道这篇该如何落笔，发现并不是没有什么可写，而是没有什么让我印象特别深刻的东西。</p>
<p>这一年，</p>
<p>感觉自己的自控力下降了，</p>
<p>生活作息也越来越不规律，</p>
<p>缺少了那种对于生活的热情和向往，</p>
<p>如果不是因为还有工作，每天肯定是活的浑浑噩噩。</p>
<p>脑子里想法千千万，付出实际行动的不足一两个。</p>
<p>回想当初刚毕业的自己，像当初一样充满迷茫，又缺少了当初的对未来的激情。</p>
<p>有时又觉得人还是知道的越少越好，傻傻的活着，没有任何烦恼。</p>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>以下这两个理论无论是对我的生活还是工作，都有很大的帮助，推荐一下。</p>
<h3 id="时间管理理论"><a href="#时间管理理论" class="headerlink" title="时间管理理论"></a>时间管理理论</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU2JTk3JUI2JUU5JTk3JUI0JUU3JUFFJUExJUU3JTkwJTg2">时间管理<i class="fa fa-external-link-alt"></i></span>并不是要把所有事情做完，而是更有效的运用时间。时间管理的目的除了要决定该做些什么事情之外，另一个很重要的目的也是决定什么事情不应该做；时间管理不是完全的掌控，而是降低变动性。时间管理最重要的功能是透过事先的规划，做为一种提醒与指引。</p>
<h4 id="第一代时间管理：备忘时代"><a href="#第一代时间管理：备忘时代" class="headerlink" title="第一代时间管理：备忘时代"></a>第一代时间管理：备忘时代</h4><p>强调使用便笺和备忘录，一项一项完成，确保不会有事情遗漏。</p>
<h4 id="第二代时间管理：计划时代"><a href="#第二代时间管理：计划时代" class="headerlink" title="第二代时间管理：计划时代"></a>第二代时间管理：计划时代</h4><p>使用日程计划表来安排时间，今日以及对未来的规划。</p>
<h4 id="第三代时间管理：效率时代"><a href="#第三代时间管理：效率时代" class="headerlink" title="第三代时间管理：效率时代"></a>第三代时间管理：效率时代</h4><p>将事情根据优先级进行安排，根据事情的轻重缓急成都进行设定短、中、长期目标，并对其进行拆分颗粒化到每天，甚至于每个时间段。</p>
<h4 id="第四代时间管理：价值时代"><a href="#第四代时间管理：价值时代" class="headerlink" title="第四代时间管理：价值时代"></a>第四代时间管理：价值时代</h4><p>将重心放在维持产出和产能的平衡上。</p>
<p>比较经典的就是下面的这个四象限图，把事情分为四类：重要紧急的，重要不紧急，不重要紧急，不重要不紧急的，合理的安排时间让我们把精力放在关注重要不紧急的事情上，这样就可以避免重要紧急的事情变多，从而带来的时间压迫感，实现未雨绸缪。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202302190217282.webp" alt="艾森豪威尔法则和费曼技巧- 知乎"></p>
<h3 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h3><p>费曼学习法可以简化为四个单词：Concept （概念）、Teach （教给别人）、Review （评价）、Simplify （简化）。</p>
<p>四个步骤</p>
<p>第一步：想象把它教给一个小孩子，用小孩子能听懂的语句和概念解释</p>
<p>第二步：回顾，将刚才卡壳或解释不出来的地方进行去原材料回顾，认识到的自己的知识边界。</p>
<p>第三步：将语言条理化简化，用自己的话语解释出来。</p>
<p>第四步：传授，检测是否学会最简单的方法就是将它传授与另一人。</p>
<h2 id="NEW-FLAG"><a href="#NEW-FLAG" class="headerlink" title="NEW FLAG"></a>NEW FLAG</h2><p>2023年，这一年，我觉得自己需要静下心来做一些事了，不再求做多的事，而是要让自己做一些有意义且值得做的事。</p>
<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>这一年，计划中安排上了三本书：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDEzMjA4Lw==">如何阅读一本书<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjg5NTk5My8=">刻意练习<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC81MzI1NjE4Lw==">高效能人士的七个习惯<i class="fa fa-external-link-alt"></i></span></p>
<p>前两本更多的是希望可以养成一种习惯，看一本书可以知道自己在看什么，想学习一个新技能，如何可以有效的练习并进行学习。</p>
<p>最后一本则是更加注重自我管理，当时第一次接触看这本书时，里面的内容令我大受震撼，真的是感觉在和一位学者进行交流，这一定是让我做出改变并能不断提升自我的那本书，<strong>强烈推荐！！！</strong></p>
<h3 id="练字"><a href="#练字" class="headerlink" title="练字"></a>练字</h3><p>最近去办护照，需要手动签字，发现自己写的字很丑，才知道自己很久没有手写过字了，今年要把练字也要提上日程了。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>随遇而安</p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
  </entry>
  <entry>
    <title>2023年度总结</title>
    <url>/posts/bfbc8ee0/</url>
    <content><![CDATA[<h1 id="2023-年度总结"><a href="#2023-年度总结" class="headerlink" title="2023 年度总结"></a>2023 年度总结</h1><blockquote>
<p>凡事先从本质开始思考，然后再从本质一层层往回反推。在这样的思维模式下，你不会因为暂时的困难而对结果失去信心，也不会因为好高骛远而做出徒劳的努力——因为你非常清楚自己的目标是“第一原理”推导出的必然结果。这种理性的思维方式尤其值得我们学习。</p>
<p>—来自《硅谷钢铁侠：埃隆马斯克》</p>
</blockquote>
<span id="more"></span>

<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>今年读书基本没有看过什么技术书，更多的是看一些效率和一些感兴趣的书籍。（本次复盘的时候才发现，以前看的书都忘了内容是啥了，今年要将如何阅读一本书放到首位看一下了，读书没技巧，看起来累还效率低。另外对于一些值得反复看的书籍，打算写一感想心得总结。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjg5NTk5My8=">刻意练习<i class="fa fa-external-link-alt"></i></span>：0%</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC81MzI1NjE4Lw==">高效能人士的七个习惯<i class="fa fa-external-link-alt"></i></span>：100%，后面有空打算精读一遍；本书的内容感觉不止可以应用在工作，在生活上有些事情也是相同的，秉承着原则做事，不会因其他而“后悔”。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDEzMjA4Lw==">如何阅读一本书<i class="fa fa-external-link-alt"></i></span>：30%</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNDgxNTEzMi8=">圆圈正义<i class="fa fa-external-link-alt"></i></span>： 100%</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNTE0Mzc5MC8=">蛤蟆先生去看心理医生<i class="fa fa-external-link-alt"></i></span>：100%</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjc1OTUwOC8=">硅谷钢铁侠：埃隆·马斯克<i class="fa fa-external-link-alt"></i></span>：30%</p>
<h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><p>对于学习代码新技能，跟着文档入门过了一遍nextjs，小有收获，大而全的集成一些现有技术，用起来确实爽很多。</p>
<p>还有一些代码编写范式，原来代码还可以这么写，比如 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5zdW1pL2Rp">DI<i class="fa fa-external-link-alt"></i></span> ，也逐渐对后端一些技术产生了兴趣。</p>
<p>附上 github 提交记录，没有很多</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202402171931607.png" alt="image-20240217192729124"></p>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>健康分为身体和心理两部分：</p>
<p>上半年还经常去健身房跑个步，撸个铁啥的，肺活量和肌肉保持有活力状态，每天精神气也好。后面段时间工作压力有点大，也渐渐的搁置下来了，导致体重也逐渐上涨；后续还是要保持一定的运动量，让身体保持活力状态。</p>
<p>心理方面，本身在互联网公司工作，免不了心理压力大，更要做好心理、情绪调节，我个人的释放压力主要是靠运动和冥想，后来有幸接触到了正念冥想，让自己将更多的关注放回自身身体，清空大脑，放空，感兴趣可以尝试跟练一段时间试试。<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU5NNHkxZDdhQy8=">21天系统学习冥想<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="展望2024"><a href="#展望2024" class="headerlink" title="展望2024"></a>展望2024</h2><ul>
<li>体态改善，保持身体活力。</li>
<li>掌握读书技巧，保持读书的习惯。</li>
<li>掌握一个新技能。</li>
<li>提升思维逻辑，表达能力清晰。</li>
</ul>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
  </entry>
  <entry>
    <title>[每周] 第一期</title>
    <url>/posts/c4d908b/</url>
    <content><![CDATA[<blockquote>
<p>webpack 常用命令</p>
<ul>
<li><code>webpack</code> building for development</li>
<li><code>webpack -p</code> building for production, minification (压缩，打包)</li>
<li><code>webpack --watch</code> for continuous incremental building (监听变动并自动打包)</li>
<li><code>webpack -d</code> including source maps(生成map映射文件，告知哪些模块最终打包到哪里了)</li>
<li><code>webpack --colors</code> making building output pretty (美化展示信息)</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS9jb25jZXB0cy8=">webpack中文网<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWJwYWNrLWRlbW9z">阮一峰的webpack-demo<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rvbmd5dWFueGluL3dlYnBhY2stZGVtb3M=">dongyuanxin webpack教程<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>全局安装 webpack and webpack-dev-server</p>
<p>webpack 常用命令</p>
<ul>
<li><code>webpack</code> building for development</li>
<li><code>webpack -p</code> building for production, minification (压缩，打包)</li>
<li><code>webpack --watch</code> for continuous incremental building (监听变动并自动打包)</li>
<li><code>webpack -d</code> including source maps(生成map映射文件，告知哪些模块最终打包到哪里了)</li>
<li><code>webpack --colors</code> making building output pretty (美化展示信息)</li>
</ul>
</blockquote>
<p>脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;script&quot;: &#123;</span><br><span class="line">        &quot;dev&quot;: &quot;webpack-dev-server --open&quot;,</span><br><span class="line">        &quot;build&quot;: &quot;webpack -p&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Entry-File（入口文件）"><a href="#Entry-File（入口文件）" class="headerlink" title="Entry File（入口文件）"></a>Entry File（入口文件）</h3><p>**入口起点(entry point)*<em>指示 webpack 应该使用哪个模块，来作为构建其内部</em>依赖图*的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exprots</span> =&#123;</span><br><span class="line">    <span class="comment">// 入口文件位置</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多入口文件"><a href="#多入口文件" class="headerlink" title="多入口文件"></a><strong>多入口文件</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="comment">// bundle1或bundle2 代表输出的文件名</span></span><br><span class="line">        <span class="attr">bundle1</span>: <span class="string">&#x27;./main1.js&#x27;</span>,</span><br><span class="line">        <span class="attr">bundle2</span>: <span class="string">&#x27;./main2.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Output-（出口）"><a href="#Output-（出口）" class="headerlink" title="Output （出口）"></a>Output （出口）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./main&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">    	<span class="comment">//生成 bundle.js 的路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), </span><br><span class="line">        <span class="comment">// 生成 bundle.js 文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>loader 用来处理非 JavaScript 文件，webpakck 本身也只能理解 JavaScript。</p>
<p>webpack 中 loader 有了两个配置属性：</p>
<ol>
<li><code>test</code> 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li>
<li><code>use</code> 属性，表示进行转换时，应该使用哪个 loader 。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：当 webpack 碰到 [ 在 <code>require()/import</code> 语句中被解析为 <code>.txt</code> ] 时，在对它打包前，先用 <code>raw-loader</code> 转换一下。</p>
<p>rules 规则 在 module 下。</p>
</blockquote>
<h3 id="Plugins（插件）"><a href="#Plugins（插件）" class="headerlink" title="Plugins（插件）"></a>Plugins（插件）</h3><p>loader 被用于转换某些类型的模块，而插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>

<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><blockquote>
<p>development 开发环境</p>
<p>production 生产环境</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="标准盒子模型（content-box，默认）"><a href="#标准盒子模型（content-box，默认）" class="headerlink" title="标准盒子模型（content-box，默认）"></a>标准盒子模型（content-box，默认）</h3><p>height &#x3D;  内容高度<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221115332.jpg"></p>
<h3 id="IE盒子模型（border-box）"><a href="#IE盒子模型（border-box）" class="headerlink" title="IE盒子模型（border-box）"></a>IE盒子模型（border-box）</h3><p>height&#x3D;  内容高度 + border + padding</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221115333.jpg"></p>
<p>box-sizing 属性可以被用来调整这些表现（MDN 文档）:</p>
<ul>
<li><code>content-box</code>  是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>
<li><code>border-box</code> 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高。</li>
</ul>
<p>由此可得，当你定义一个元素的宽或高时，元素又需要加padding or border ，但又不希望元素的宽高被改变，用border-box 再合适不过了。</p>
<p>文章图片引用自：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5ncGluODE1L2FydGljbGUvZGV0YWlscy83NjY1MTY4MA==">https://blog.csdn.net/huangpin815/article/details/76651680<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="将requres请求封装"><a href="#将requres请求封装" class="headerlink" title="将requres请求封装"></a>将requres请求封装</h3><p>将 <code>wx.request</code> 请求进行 Promise封装，使用，以及后期维护更加方便</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* request.js */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">url, method, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://api.douban.com/&#x27;</span>;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">            url,</span><br><span class="line">            method,</span><br><span class="line">            data,</span><br><span class="line">            <span class="attr">success</span>: resolve,</span><br><span class="line">            <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* index.js */</span></span><br><span class="line"><span class="comment">// 导入 request.js 文件</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request.js&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&#x27;v2/movie/in_theaters&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">	<span class="comment">/* 处理函数 */</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="添加编译模式"><a href="#添加编译模式" class="headerlink" title="添加编译模式"></a>添加编译模式</h3><p>添加编译模式，方便调试，直接针对某一页面进行调式，还可以传入进入页面的参数</p>
<blockquote>
<p>模式名称：list页面<br>启动页面：pages&#x2F;list&#x2F;list<br>启动参数：id&#x3D;5<br>进入场景：默认</p>
</blockquote>
<h3 id="WeUI-框架（其实和网页版的一样）"><a href="#WeUI-框架（其实和网页版的一样）" class="headerlink" title="WeUI 框架（其实和网页版的一样）"></a>WeUI 框架（其实和网页版的一样）</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvd2V1aS13eHNz">WeUI 小程序 版本<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvd2V1aQ==">WeUI 网页版<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="wxs-函数"><a href="#wxs-函数" class="headerlink" title="wxs 函数"></a>wxs 函数</h3><p> <strong><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4bWwvZXZlbnQuaHRtbA==">官方文档<i class="fa fa-external-link-alt"></i></span></strong></p>
<p>友情提醒：（此方法不支持一些新特性）</p>
<p>可以直接在模板中直接调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; util.<span class="title function_">xxHandle</span>(<span class="string">&#x27;123&#x27;</span>) &#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 直接在 wxml 中写方法 */</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">name</span>=<span class="string">&quot;util&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    module.exports = &#123;</span></span><br><span class="line"><span class="language-xml">        xxHandle: function(str)&#123;</span></span><br><span class="line"><span class="language-xml">			return &#x27;-&#x27;+str;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">	&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span></span><br><span class="line"><span class="comment">/* 也可以引入js文件 */</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">&quot;util&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../util.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="leetcode-刷题"><a href="#leetcode-刷题" class="headerlink" title="leetcode 刷题"></a>leetcode 刷题</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv">有效的括号<i class="fa fa-external-link-alt"></i></span></p>
<p>本题其实并没有那么特别复杂，就像是自己写编译器，匹配括号。</p>
<p><code>[], &#123;&#125;, ()</code></p>
<p>匹配不匹配，短一点的人眼可以直接识别出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;([)]&quot;</span>  <span class="comment">// 很明显不和谐</span></span><br><span class="line"><span class="string">&quot;([])&quot;</span>	<span class="comment">// 这个就舒服很多了</span></span><br></pre></td></tr></table></figure>

<p>由于这个可能性，可能有点多，之前的那种思路时不可行了，还是官方推荐的哪个思路给力。</p>
<p>根据栈的原理。</p>
<p>假如 需要检测的时这个字符串 <code>([]())&#123;&#125;[]</code></p>
<ol>
<li>当遇到左括号，也可称为开括号，将其压入栈中</li>
<li>当遇到闭括号，将栈中的最顶部的元素推出与当前的闭括号比较是否匹配</li>
<li>如果匹配，则继续，不匹配，表示当前当前字符串时无效字符串。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> regs = &#123;</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// 拆分字符串</span></span><br><span class="line">    <span class="keyword">let</span> stack = [],</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> e = s[i];</span><br><span class="line">        <span class="keyword">if</span> (regs[e] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != regs[stack.<span class="title function_">pop</span>()]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>完成于 2019年1月27日 22点29分</p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>前端工程化</tag>
        <tag>webpack</tag>
        <tag>html</tag>
        <tag>小程序</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[每周] 第二期</title>
    <url>/posts/3c5b7c53/</url>
    <content><![CDATA[<p>本周总结：</p>
<ul>
<li>Yarn 学习</li>
<li>Ajax 中 XHR 和 Fetch 的区别</li>
</ul>
<span id="more"></span>

<h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><h3 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a><span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS96aC1IYW5zL2RvY3MvaW5zdGFsbCN3aW5kb3dzLXN0YWJsZQ==">安装 Yarn<i class="fa fa-external-link-alt"></i></span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当然，官方不建议这么安装</span></span><br><span class="line">npm i yarn -g</span><br></pre></td></tr></table></figure>

<h3 id="更换为淘宝镜像"><a href="#更换为淘宝镜像" class="headerlink" title="更换为淘宝镜像"></a>更换为淘宝镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询当前源</span></span><br><span class="line">yarn config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换为淘宝镜像</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 同理也可换</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="Yarn-命令"><a href="#Yarn-命令" class="headerlink" title="Yarn 命令"></a>Yarn 命令</h3><p>创建一个新项目，执行以下命令会生成 <code>package.json</code>，里面有些配置和项目依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init </span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速创建，跳过问题</span></span><br><span class="line">yarn init -y</span><br></pre></td></tr></table></figure>

<p>添加&#x2F;移除 项目依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加项目依赖</span></span><br><span class="line">yarn add [package]</span><br><span class="line"><span class="comment"># 默认为 dependencies, 代码运行时所需要的。</span></span><br><span class="line">yarn add babel-loader -D</span><br><span class="line"><span class="comment"># devDependencies 开发依赖，只是在开发阶段需要，而运行时不需要的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除项目依赖</span></span><br><span class="line">yarn remove [package]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yarn install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">yarn upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装包</span></span><br><span class="line">yarn global add [package]</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS96aC1IYW5zL2RvY3MvZGVwZW5kZW5jeS10eXBlcyN0b2MtZGV2LWRlcGVuZGVuY2llcw==">详细依赖类型<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="CLI-命令比较"><a href="#CLI-命令比较" class="headerlink" title="CLI 命令比较"></a>CLI 命令比较</h3><table>
<thead>
<tr>
<th>npm (v5)</th>
<th>Yarn</th>
</tr>
</thead>
<tbody><tr>
<td><code>npm install</code></td>
<td><code>yarn install</code></td>
</tr>
<tr>
<td><strong>(不适用)</strong></td>
<td><code>yarn install --flat</code></td>
</tr>
<tr>
<td><strong>(不适用)</strong></td>
<td><code>yarn install --har</code></td>
</tr>
<tr>
<td><code>npm install --no-package-lock</code></td>
<td><code>yarn install --no-lockfile</code></td>
</tr>
<tr>
<td><strong>(不适用)</strong></td>
<td><code>yarn install --pure-lockfile</code></td>
</tr>
<tr>
<td><code>npm install [package]</code></td>
<td><code>yarn add [package]</code></td>
</tr>
<tr>
<td><code>npm install [package] --save-dev</code></td>
<td><code>yarn add [package] --dev</code></td>
</tr>
<tr>
<td><strong>(不适用)</strong></td>
<td><code>yarn add [package] --peer</code></td>
</tr>
<tr>
<td><code>npm install [package] --save-optional</code></td>
<td><code>yarn add [package] --optional</code></td>
</tr>
<tr>
<td><code>npm install [package] --save-exact</code></td>
<td><code>yarn add [package] --exact</code></td>
</tr>
<tr>
<td><strong>(不适用)</strong></td>
<td><code>yarn add [package] --tilde</code></td>
</tr>
<tr>
<td><code>npm install [package] --global</code></td>
<td><code>yarn global add [package]</code></td>
</tr>
<tr>
<td><code>npm update --global</code></td>
<td><code>yarn global upgrade</code></td>
</tr>
<tr>
<td><code>npm rebuild</code></td>
<td><code>yarn install --force</code></td>
</tr>
<tr>
<td><code>npm uninstall [package]</code></td>
<td><code>yarn remove [package]</code></td>
</tr>
<tr>
<td><code>npm cache clean</code></td>
<td><code>yarn cache clean [package]</code></td>
</tr>
<tr>
<td><code>rm -rf node_modules &amp;&amp; npm install</code></td>
<td><code>yarn upgrade</code></td>
</tr>
</tbody></table>
<h2 id="Ajax-请求"><a href="#Ajax-请求" class="headerlink" title="Ajax 请求"></a>Ajax 请求</h2><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0">MDN XMLHttpRequest<i class="fa fa-external-link-alt"></i></span></p>
<p>简单的来写一个 <code>XMLHttpRequest </code> 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化一个对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(),</span><br><span class="line">    method = <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url = <span class="string">&quot;https://developer.mozilla.org/&quot;</span>;;</span><br><span class="line"><span class="comment">// 设置请求超时事件</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span>;</span><br><span class="line"><span class="comment">// 初始话一个请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 当 readyState 改变时 触发的函数</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span>  = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 请求成功的 处理函数</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span>  == <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerText</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>XMLHttpRequest.DONE &#x3D; 4 表示请求完成</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221115231.png"></p>
<blockquote>
<p>ps：原生的写起来有点费劲，不如直接用 <code>jquery</code> 来的快，一条龙服务，还带 <code>jsonp</code> 跨域请求，舒服的一匹，但是随着事件的推移，又发现问题了，如果多次接连不断的请求就会产生回调地狱。于是 <code>fetch</code> 就和 <code>Promise</code>就是出现了。</p>
</blockquote>
<h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><p>与上面功能一样实现 <code>get</code> 访问 <code>MDN</code> 官方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://developer.mozilla.org/&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://developer.mozilla.org/&#x27;</span>);</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<p>代码简化了不知一点点，完爆XHR。</p>
<p>由于 <code>fetch</code> 内封装了 <code>Promise</code>，也解决了回调地狱的问题，好用了很多很多。</p>
<p>就是兼容性有点遗憾</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221115232.jpg"></p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>ajax</tag>
        <tag>XMLHttpRequest</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>em、rem和vw(vh)区别</title>
    <url>/posts/efd120c3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS的<strong>单位长度</strong>分为</p>
<ul>
<li>绝对长度单位</li>
<li>相对长度单位</li>
</ul>
<p>其中</p>
<p>绝对长度单位分为 <code>cm</code>（厘米）, <code>mm</code>（毫米）, <code>in</code>（英寸）. <code>pt</code>（点）, <code>px</code>（像素）</p>
<p>相对长度单位分为 <code>em</code>（父元素字体大小）, <code>rem</code>（根元素字体大小）, <code>vw</code>（视窗宽度）, <code>vh</code>（视窗高度）</p>
<p>大家都喜欢只对比 <code>em</code> 和 <code>rem</code> ，但 <code>vw</code> <code>vh</code> 也是属于绝对长度，并且也比较常用，所以这里我放在一起对比了。</p>
<span id="more"></span>

<h2 id="vw-和-vh"><a href="#vw-和-vh" class="headerlink" title="vw 和 vh"></a><code>vw</code> 和 <code>vh</code></h2><p><code>vw</code> 和 <code>vh</code> 都是展现的为视窗的高度，也就是页面显示内容的总高度，分为 100 份</p>
<blockquote>
<p>假如你的页面显示宽度为 1920，那么当你设置你的元素为 <code>10vw</code> ，那么当前元素的宽度则为 192。</p>
</blockquote>
<p><strong>example</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>111<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css">	</span></span><br><span class="line"><span class="language-css">		* &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#fa</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fa&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200328163110.png"></p>
<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p><code>em</code> ，<strong>在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</strong></p>
<p><a href="#show-you-code">代码</a></p>
<p><strong>如果不定义元素自身字体大小，默认继承父节点字体大小</strong></p>
<blockquote>
<p>当父元素的字体设置为 <code>20px</code>，那么当前子元素的 <code>1em</code> 的值可以认为是 <code>20px</code> ，则可以得出 子元素设置宽度为 <code>5em</code> 可以换算成 <code>100px</code> </p>
</blockquote>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p><code>rem</code> 和 <code>em</code> 他们不光像亲兄弟，因为他们的使用方法也很像。</p>
<p><code>rem</code> 这里的 <code>r</code> 指的是 <code>root</code> ，连起来就是 <code>root em</code>。此时你应该可以理解了吧。</p>
<p><code>rem</code> 是根据根节点元素的字体大小来定义的，这里的根节点通常指的是标签为 <code>html</code> 的元素。</p>
<h2 id="show-you-code"><a href="#show-you-code" class="headerlink" title="show you code"></a>show you code</h2><iframe height="318" style="width: 100%;" scrolling="no" title="abOPEaE" src="https://codepen.io/popring/embed/abOPEaE?height=318&theme-id=light&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/popring/pen/abOPEaE'>abOPEaE</a> by HarryHao
  (<a href='https://codepen.io/popring'>@popring</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>



<p>以上代码的 <code>fa</code> 代表父节点， <code>ch</code> 代表子节点</p>
<p>根节点字体大小 <code>10px</code>，子节点（#ch）宽度为 <code>2rem</code>，转换后为 <code>20px</code></p>
<p>父节点字体大小 <code>20px</code> ，子节点（#ch2）宽度为 <code>2em</code> ，转换后为 <code>40px</code></p>
<p>父节点字体大小 <code>20px</code> ，子节点（#ch3）字体大小为 <code>15px</code>， 子节点（#ch3） 宽度为 <code>2em</code> ，转换后为 <code>30px</code></p>
<p>Ending.</p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>get和post区别</title>
    <url>/posts/f69ca482/</url>
    <content><![CDATA[<ul>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>
<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>
<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>
<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>
<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>
<li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li>
<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>
<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>
<li>GET参数通过URL传递，POST放在Request body中。</li>
</ul>
<p>额外可以聊</p>
<ul>
<li>GET 的body中也可以放数据，但是由于规范中不建议，所以大多数浏览器也没有处理，也就导致不会接收到 GET请求中body的数据</li>
<li>URL限制长度，在http statue code（状态码）中 415 就是URL Too Long。本身协议没有限制长度，但浏览器会有限制，太长了也不方便后端、爬虫处理。</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NTg2NzkxL2Fuc3dlci83NjczMTYxNzI=">GET 和 POST 到底有什么区别？ - 大宽宽的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>https握手过程</title>
    <url>/posts/1449f691/</url>
    <content><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><ul>
<li>客户端发起连接，提供协议版本号、随机数<code>(Client random)</code>、支持加密方法</li>
<li>服务端收到后，确认双方的加密方法，然后生成随机数<code>(Server random)</code>，以及自己的数字证书，发送给客户端</li>
<li>客户端收到后，确认数字证书是否有效，然后生成新的随机数<code>(Premaster secret)</code>，使用数字证书加密这个随机数，发送给服务端。</li>
<li>服务端使用自己的私钥，对随机数进行解密。</li>
<li>此时服务端和客户端就可以根据前面约定的加密方法进行通信，使用前面生成的三个随机数生成 **对话秘钥(session key)**，用来加密接下来的整个对话过程</li>
</ul>
<p>细节</p>
<ul>
<li>数字证书的加密和解密过程是属于<strong>非对称加密</strong>，在之后使用对话秘钥加密的方式是对称加密</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzA5L2lsbHVzdHJhdGlvbi1zc2wuaHRtbA==">图解SSL&#x2F;TLS协议<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzAyL3NzbF90bHMuaHRtbA==">SSL&#x2F;TLS协议运行机制的概述<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>v-if和v-show区别</title>
    <url>/posts/e9ac0758/</url>
    <content><![CDATA[<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h3><p>根据表达式的真假值来决定是否渲染，它会造成真实DOM元素的渲染和销毁。</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><p>根据表达式之真假值，切换元素的 <code>display</code> CSS property。</p>
<p>当条件变化时该指令触发过渡效果。</p>
<h3 id="v-if-和-v-show-区别"><a href="#v-if-和-v-show-区别" class="headerlink" title="v-if 和 v-show 区别"></a><code>v-if</code> 和 <code>v-show</code> 区别</h3><ul>
<li><code>v-if</code> 会 “真正” 条件的渲染，它要确定事件监听器和子组件的正确创建和销毁（切换自组件会经历生命周期函数）</li>
<li><code>v-if</code> 如果初始条件为假，则不会渲染，只有当值为真是才会进行渲染</li>
<li><code>v-show</code> 无论在什么条件下都会进行渲染 DOM 元素，只是简单的切换 css 样式，来进行视觉上的显示和隐藏。</li>
<li><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。如果元素频繁的切换，建议使用 <code>v-show</code> ；如果运行后条件很少改变，则使用 <code>v-if</code></li>
<li><code>v-if</code> 切换会造成回流和重绘，<code>v-show</code> 则会造成重绘。</li>
</ul>
<p>关联文章：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9wb3ByaW5nLmdpdGh1Yi5pby8yMDIwLzEwLzE2L2Nzcy92aXNpYmlsaXR5LWhpZGRlbiVFMyU4MCU4MWRpc3BsYXktbm9uZSVFMyU4MCU4MW9wYWNpdHktMC0lRTUlOEMlQkElRTUlODglQUIv">visibility: hidden、display: none、opacity: 0 区别<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeout为什么会有延迟</title>
    <url>/posts/9a771de5/</url>
    <content><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>首先来解释下什么是 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL3NldFRpbWVvdXQ=">setTimout<i class="fa fa-external-link-alt"></i></span> ：此函数是一个全局函数，可以用来设置一个定时器，在指定时间后触发回掉函数。</p>
<p>其中 setTimeout 有两类用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 本用法不推荐，code 为字符串，在定时器到期后会进行编译执行code字符串，delay为定时时间 */</span></span><br><span class="line"><span class="built_in">setTimeout</span>(code, delay)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* functionRef 定时器到期后的回调函数；delay 定时时间；...params 作为参数传递给回调函数 */</span></span><br><span class="line"><span class="built_in">setTimeout</span>(functionRef, delay, param1, param2)</span><br></pre></td></tr></table></figure>



<p><code>setTimeout</code> 返回值为一个正整数类型的 <code>timeoutID</code> ，可使用 <code>clearTimeout</code> 进行取消定时器。</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>为什么 setTimeout 会有 4ms 的延迟呢？</p>
<p>实际上题目不完全对，并不完全是会有 4ms 延迟。正如 <span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnM=">HTML 标准<i class="fa fa-external-link-alt"></i></span>中规定的那样，一旦对 <code>setTimeout</code> 的嵌套调用被安排了 5 次，浏览器将强制执行 4 毫秒的最小超时。</p>
<p>其他影响 setTimout 延迟因素：</p>
<ol>
<li>并发任务： 在浏览器中，存在多个任务需要处理，如用户交互、DOM 更新、网络请求等。这些任务会占用浏览器的资源和处理能力。当设置一个 setTimeout 的延迟时间时，浏览器可能会优先处理其他任务，导致 setTimeout 的回调函数的执行被推迟。</li>
<li>执行上下文的切换： 当定时器到期时，浏览器需要切换执行上下文来调用 setTimeout 的回调函数。这个上下文切换可能会引入一定的延迟。浏览器需要在当前任务完成后，选择合适的时机执行回调函数。</li>
<li>系统和硬件因素： 系统负载、设备性能以及浏览器实现的差异等因素也会影响 setTimeout 回调函数的执行时间。不同的浏览器和设备可能有不同的延迟表现。</li>
</ol>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL3NldFRpbWVvdXQ=">MDN setTimeout<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ2Njg3NTkwNjE2MTM3NzQy">为什么 setTimeout 有最小时延 4ms ?<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qb2hucmVzaWcuY29tL2Jsb2cvaG93LWphdmFzY3JpcHQtdGltZXJzLXdvcmsv">How JavaScript Timers Work<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>visibility: hidden、display: none、opacity: 0 区别</title>
    <url>/posts/540f9cbc/</url>
    <content><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>做了以下的实验，可以得出结论，</p>
<ul>
<li><code>visibility: hidden;</code> 只是在视觉上隐藏，但没有影响布局，但绑定的事件也无法触发。</li>
<li><code>display:none;</code> 元素被彻底隐藏，在页面上完全不显示，不占位，无宽高</li>
<li><code>opacity: 0;</code> 只会修改元素透明度，并不影响布局及事件触发。</li>
</ul>
<span id="more"></span>

<h2 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h2><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><blockquote>
<p>控制 显示&#x2F;隐藏 元素，不会影响布局。</p>
</blockquote>
<ul>
<li><code>visible</code> 元素正常显示</li>
<li><code>hidden</code> 隐藏元素，但不影响布局。<strong>子元素设置为 <code>visible</code> 则子元素仍然可见</strong></li>
<li><code>collapse</code> 用于隐藏表格的行、列。</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><blockquote>
<p>官网介绍了很多类型，并且分为六大类，具体请看 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL2Rpc3BsYXk=">MDN<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li><code>display-outside </code> </li>
<li><code>display-inside</code> </li>
<li><code>display-listitem</code> </li>
<li><code>display-internal</code></li>
<li><code>display-legacy</code></li>
<li><code>display-box</code></li>
</ul>
</blockquote>
<p>这里就介绍一下常用的几个</p>
<ul>
<li><code>block</code> 将元素设置为块级元素</li>
<li><code>inline</code> 将元素设置为行内元素</li>
<li><code>inline-block</code> 将元素设置为行内块元素</li>
<li><code>table</code> 表格样式</li>
<li><code>flex</code> 弹性布局</li>
<li><code>grid</code> 网格布局</li>
<li><code>none</code> 使元素不显示（后代元素也将隐藏），不占位，切换则会影响布局。</li>
</ul>
<h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><blockquote>
<p>更改元素的透明度（使用opacity属性，当属性值不为1时，会把元素放置在一个新的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvR3VpZGUvQ1NTL1VuZGVyc3RhbmRpbmdfel9pbmRleC9UaGVfc3RhY2tpbmdfY29udGV4dA==">层叠上下文<i class="fa fa-external-link-alt"></i></span>中。）</p>
</blockquote>
<ul>
<li><code>number值</code> 此值应为 <code>0.0 ~ 1.0</code> 之间</li>
</ul>
<h2 id="三个样式隐藏的区别"><a href="#三个样式隐藏的区别" class="headerlink" title="三个样式隐藏的区别"></a>三个样式隐藏的区别</h2><p>原始代码</p>
<blockquote>
<p>在 box 外层加了一个 div 添加边框，更加可以直观的看出各个样式的区别。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201016225256.png" alt="image-20201016225251216"></p>
<h3 id="页面展示效果"><a href="#页面展示效果" class="headerlink" title="页面展示效果"></a>页面展示效果</h3><blockquote>
<p>根据以上代码进行修改，将每个 box 添加以上三种的隐藏样式后效果</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201016230147.png" alt="image-20201016225828692"></p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201016233415.png" alt="image-20201016233414985"></p>
<p>可以看出，只有 <code>display: none;</code> 没有宽度了（尝试添加高度之后仍然没有显示出来）。而剩下的 <code>visibility: hidden;</code> <code>opacity: 0;</code> 仍然会占据位置（从外层 div 的边框线就可以看出来）。</p>
<h3 id="性能区别"><a href="#性能区别" class="headerlink" title="性能区别"></a>性能区别</h3><blockquote>
<p>以下<strong>切换样式</strong>指的就是样式从显示到隐藏或从隐藏到显示。</p>
<p>比如： </p>
<p>visibility: hidden; -&gt; visibility: visible;</p>
<p>opacity: 0; -&gt; opacity: 1;</p>
<p>display: block; -&gt; display: none;</p>
</blockquote>
<p>根据上述 页面展示效果 可以看出，<code>visibility: hidden;</code> <code>opacity: 0;</code> 只会对元素进行隐藏，并不会改变页面布局，所以如果<strong>切换样式</strong>只会造成<strong>页面重绘（repaint）</strong>并不会回流。</p>
<p>而如果是修改 <code>display</code> 属性的话，则会影响布局，<strong>造成页面回流（reflow），同时也会造成重绘（repaint）</strong>。</p>
<h3 id="点击效果"><a href="#点击效果" class="headerlink" title="点击效果"></a>点击效果</h3><blockquote>
<p>根据以上代码，进行改造，添加 js 代码，用来监听点击事件，点击输出当前被点击元素的类名</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.wrap</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">`box<span class="subst">$&#123;i&#125;</span>`</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">      box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">className</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后依次进行点击（第二个盒子因为完全隐藏，所以点击不到）</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201016232532.png" alt="image-20201016232532906"></p>
<p>看点击结果只有最后一个盒子被点击到。</p>
<p>小结</p>
<ul>
<li><code>visibility: hidden;</code> <code>display:none;</code>无法被点击</li>
<li><code>opacity: 0;</code> 可被点击</li>
</ul>
<p><a href="#%E7%BB%93%E8%AE%BA">结论在开头</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04=">MDN<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>从输入url到页面显示经过了什么</title>
    <url>/posts/ababab9d/</url>
    <content><![CDATA[<p>大致分为以下几个过程</p>
<ul>
<li>URL 解析</li>
<li>DNS 解析</li>
<li>TCP 握手</li>
<li>检查是否有缓存</li>
<li>构建 DOM 树，解析 html</li>
<li>构建 CSSOM</li>
<li>执行 JavaScript 代码</li>
<li>构建渲染树：根据 DOM 树和 CSSOM 生成渲染树</li>
<li>根据渲染树对每个节点布局在正确位置</li>
<li>对每个元素进行绘制</li>
</ul>
<span id="more"></span>



<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201003104407.png"></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>可替换元素和不可替换元素</title>
    <url>/posts/d6e0c31a/</url>
    <content><![CDATA[<h2 id="可替换元素（置换元素）"><a href="#可替换元素（置换元素）" class="headerlink" title="可替换元素（置换元素）"></a>可替换元素（置换元素）</h2><p>浏览器根据元素的标签和属性，来决定元素的具体显示内容。 </p>
<p>例如：浏览器会根据 <code>&lt;img&gt;</code> 标签的src属性的值来读取图片信息并显示出来，而如果查看(x)html代码，则看不到图片的实际内容；<code>&lt;input&gt;</code> 标签的type属性来决定是显示输入框，还是单选按钮等。 (x)html中的<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;object&gt;</code>  都是置换元素。这些元素往往没有实际的内容，即是一个空元素。 </p>
<p>置换元素在其显示中生成了框，这也就是有的内联元素能够设置宽高的原因。</p>
<h2 id="不可替换元素（非置换元素）"><a href="#不可替换元素（非置换元素）" class="headerlink" title="不可替换元素（非置换元素）"></a>不可替换元素（非置换元素）</h2><p>(x)html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。 </p>
<p>例如：标签<label>是一个非置换元素，文字label中的内容”将全被显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>label中的内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL3F1ZXN0aW9uVGVybWluYWwvNDgwYTU5MWM1MWU4NDgxNjljMzFkZTI2YzYzOWU0ZDE=">牛客题目<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL1JlcGxhY2VkX2VsZW1lbnQ=">mdn 可替换元素<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>简单聊</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>3D/threejs 入门</title>
    <url>/posts/dda1bd91/</url>
    <content><![CDATA[<span id="more"></span>

<p><span class="exturl" data-url="aHR0cHM6Ly90aHJlZWpzLWpvdXJuZXkuY29tLw==">course: threejs-journey<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>使用相同的时间间隔来更新动画，可以保证动画的流畅性。</p>
<p>方法一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">tick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> currentTime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">const</span> deltaTime = currentTime - time</span><br><span class="line">    time = currentTime</span><br><span class="line"></span><br><span class="line">    mesh.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.001</span> * deltaTime</span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(tick)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">tick</span>()</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clock = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Clock</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">tick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> elapsedTime = clock.<span class="title function_">getElapsedTime</span>()</span><br><span class="line">    mesh.<span class="property">rotation</span>.<span class="property">y</span> = <span class="number">0.001</span> * elapsedTime</span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(tick)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">tick</span>()</span><br></pre></td></tr></table></figure>

<h2 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ncmVlbnNvY2suY29tL2dzYXAv">gsap<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanMv">tween.js<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="debugUI"><a href="#debugUI" class="headerlink" title="debugUI"></a>debugUI</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhdGFhcnRzL2RhdC5ndWk=">dat.GUI<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlb3JnZWFsd2F5cy9saWwtZ3Vp">lil-gui<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZyZWVtYW4tbGFiL2NvbnRyb2wtcGFuZWw=">control-panel<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dG9tYXQvY29udHJvbGtpdC5qcw==">ControlKit<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvLXRoL3VpbA==">Uil<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90d2Vha3BhbmUuZ2l0aHViLmlvL2RvY3Mv">Tweakpane<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbGVqZC9ndWlmeQ==">Guify<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYXJla3V2YS9vdWk=">Oui<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="find-texture-website"><a href="#find-texture-website" class="headerlink" title="find texture website"></a>find texture website</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wb2xpaWdvbi5jb20v">poliigon.com<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly8zZHRleHR1cmVzLm1lLw==">3dtextures.me<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJyb3dheS10ZXh0dXJlcy5jaC8=">arroway-textures.ch<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vYm9vay83NDgxMTMyMTY5OTQ0NDk4MjI2">zxg_神说要有光小册子<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词"></a>专业名词</h2><ul>
<li>Geometry：几何体，描述物体的形状</li>
<li>Material：材质，描述物体的外观</li>
<li>Mesh：网格，几何体和材质的组合</li>
<li>Scene：场景，包含所有要渲染的物体</li>
<li>Camera：相机，用于观察场景</li>
<li>Renderer：渲染器，将场景渲染到屏幕上</li>
<li>Light：光源，用于照亮场景</li>
<li>Animation：动画，用于给物体添加动画</li>
<li>Group：组，用于将多个物体组合在一起，可以设置组的整体属性</li>
<li>Texture：纹理，用于给物体添加纹理</li>
<li>Shader：着色器，用于给物体添加着色</li>
<li>uv: 纹理坐标，用于描述纹理在物体上的位置</li>
</ul>
<h2 id="JavaScript-module-技巧"><a href="#JavaScript-module-技巧" class="headerlink" title="JavaScript module 技巧"></a>JavaScript module 技巧</h2><ul>
<li>import link 导入</li>
<li>importmap 导入 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9SZWZlcmVuY2UvRWxlbWVudHMvc2NyaXB0L3R5cGUvaW1wb3J0bWFw">importmap - MDN<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过链接导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;https://esm.sh/three@0.174.0/build/three.module.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 importmap 导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;imports&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;three&quot;</span>: <span class="string">&quot;https://esm.sh/three@0.174.0/build/three.module.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;   </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">THREE</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建 <code>Geometry</code> 和 <code>Material</code>，加入到 <code>Mesh</code> 中</li>
<li>创建 <code>Light</code> 光源</li>
<li>创建 <code>Scene</code> 场景，将 <code>Mesh</code> 和 <code>Light</code> 加入到 <code>Scene</code> 中</li>
<li>创建 <code>Camera</code> 相机</li>
<li>创建 <code>Renderer</code> 渲染器，将 <code>Scene</code> 和 <code>Camera</code> 渲染到屏幕上</li>
<li>创建 <code>OrbitControls</code> 控制相机（传入 <code>Camera</code> 和 <code>Renderer</code>），用于控制相机的位置和角度</li>
</ol>
<h2 id="可视化控制"><a href="#可视化控制" class="headerlink" title="可视化控制"></a>可视化控制</h2><p>可以通过 <code>dat-gui</code> &#x2F; <code>lil-gui</code> 来可视化控制参数，从而实现交互式效果。</p>
<p><code>dat-gui</code> 已经不再维护了， star <code>7.6k</code><br><code>lil-gui</code> 内置在 <code>three.js</code> 中, star <code>1.3k</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saWwtZ3VpLmdlb3JnZWFsd2F5cy5jb20v">lil-gui doc<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlb3JnZWFsd2F5cy9saWwtZ3Vp">lil-gui github<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhdGFhcnRzL2RhdC5ndWk=">dat-gui github<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="视锥体和相机"><a href="#视锥体和相机" class="headerlink" title="视锥体和相机"></a>视锥体和相机</h2><p>通过创建 <code>CameraHelper</code> 来实现模拟相机视锥体，可视化相机角度，并通过 GUI 来实时控制 <code>PerspectiveCamera</code> 的 <code>fov</code>、 <code>aspect</code> 、<code>near</code>、<code>far</code> 参数。</p>
<p><code>fov</code>: 可视角度，离物体的远近，默认 <code>50</code><br><code>aspect</code>: 宽高比，通常是浏览器窗口的宽高比 <code>window.innerWidth / window.innerHeight</code>，默认 <code>1</code><br><code>near</code>: 近截面，通常是 <code>0.1</code>，默认 <code>0.1</code><br><code>far</code>: 远截面，通常是 <code>1000</code>，默认 <code>1000</code></p>
<h2 id="几何体"><a href="#几何体" class="headerlink" title="几何体"></a>几何体</h2><p>3D 物体都是有顶点构成的三角形网格模型，所有几何体都是由一堆三角形构成的。</p>
<p>如我们正常看到的三角形，是会有 3 个顶点；正方形则是由两个三角形构成的，有 6 个顶点。</p>
<p>可以通过 <code>BufferGeometry</code> 创建自定义集合体；</p>
<p>比如这里我们创建一个正方形，有 6 个顶点，每个顶点有 3 个坐标，所以需要 18 个数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> attributes = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(vertices, <span class="number">3</span>);</span><br><span class="line">geometry.<span class="property">attributes</span>.<span class="property">position</span> = attributes;</span><br></pre></td></tr></table></figure>

<p>有可以看出其实有一些数据是重复的 <code>Three.js</code> 提供了优化顶点存储的方案：存储一份不重复的顶点数据，然后存储一份顶点索引就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0, 100, 0,</span></span><br><span class="line">    <span class="comment">// 100, 0, 0,</span></span><br><span class="line">    <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> attributes = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(vertices, <span class="number">3</span>);</span><br><span class="line">geometry.<span class="property">attributes</span>.<span class="property">position</span> = attributes;</span><br><span class="line"><span class="keyword">const</span> indices = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]);</span><br><span class="line">geometry.<span class="property">index</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(indices, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><p>噪声函数可以生成随机值，用于生成随机形状。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2ltcGxleC1ub2lzZQ==">SimplexNoise<i class="fa fa-external-link-alt"></i></span> 是 <code>three.js</code> 中的一种噪声函数，用于生成随机值。</p>
<h2 id="uv"><a href="#uv" class="headerlink" title="uv"></a>uv</h2><p>UV 坐标是纹理坐标，用于描述纹理在物体上的位置。</p>
<p>texture.offset 可以让纹理贴图偏移一段距离，相当于改变了 uv 坐标，所以修改 texture.offset 的动画也叫做 uv 动画。</p>
<p>还可以结合 texture.wrapT、textrue.wrapS 来实现纹理的重复。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>();</span><br><span class="line"><span class="keyword">const</span> texture = loader.<span class="title function_">load</span>(<span class="string">&#x27;./texture.png&#x27;</span>);</span><br><span class="line">texture.<span class="property">wrapS</span> = <span class="variable constant_">THREE</span>.<span class="property">RepeatWrapping</span>;</span><br><span class="line">texture.<span class="property">wrapT</span> = <span class="variable constant_">THREE</span>.<span class="property">RepeatWrapping</span>;</span><br><span class="line">texture.<span class="property">offset</span>.<span class="property">x</span> = <span class="number">0.5</span>; <span class="comment">// 水平偏移</span></span><br><span class="line">texture.<span class="property">offset</span>.<span class="property">y</span> = <span class="number">0.5</span>; <span class="comment">// 垂直偏移</span></span><br><span class="line">texture.<span class="property">repeat</span>.<span class="property">x</span> = <span class="number">2</span>; <span class="comment">// 水平重复</span></span><br><span class="line">texture.<span class="property">repeat</span>.<span class="property">y</span> = <span class="number">2</span>; <span class="comment">// 垂直重复</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>AOP 相关</title>
    <url>/posts/326cfd21/</url>
    <content><![CDATA[<p>关键词： AOP, DI, IoC</p>
<span id="more"></span>

<h2 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h2><p>AOP：<code>Aspect-Oriented Programming</code> 面向切面编程，是一种编程范式，旨在通过分离横切关注点来实现（如日志、性能监控、安全检查等功能），提高系统模块化和可维护性。相比之下或许 OOP（面向对象编程） 可能会耳熟。</p>
<p>DI：<code>Dependency Injection</code> 依赖注入，是一种软件设计模式，用于实现对象之间的解耦。它通过将对象的依赖（如服务、组件或资源）在创建时注入，而不是由对象自己直接创建或寻找依赖，从而提高代码的可测试性、可扩展性和灵活性。简单来说，依赖注入让对象不直接负责依赖的获取，而是由外部系统提供这些依赖。</p>
<p>IoC：<code>Inversion of Control</code> 控制反转，是一种设计原则或架构模式，主要通过将对象的创建和依赖关系管理交由外部容器（如依赖注入容器）实现，从而降低模块之间的耦合度。它实现了对象控制权的“反转”——由框架或容器负责控制对象的生命周期和依赖，开发人员只需专注于业务逻辑。</p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>IoC是基础，提供对象的生命周期管理和依赖管理。<br>它为依赖注入提供了环境，确保对象的创建和依赖关系是由容器控制。</p>
<p>DI是实现IoC的手段，注入依赖以实现松耦合。<br>通过DI，应用中的对象不再自行创建依赖，而是由容器在实例化时注入所需的依赖。</p>
<p>AOP通常依赖于IoC和DI，借助容器在运行时动态管理和应用切面。<br>AOP框架（如Spring AOP）通常集成在依赖注入容器中，利用动态代理或字节码增强，在对象被创建后，通过容器自动应用切面。</p>
<h2 id="JavaScript-AOP-实现"><a href="#JavaScript-AOP-实现" class="headerlink" title="JavaScript AOP 实现"></a>JavaScript AOP 实现</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5zdW1pL2Rp">opensumi&#x2F;di<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy9tZWxk">meld<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlEJUEyJUU1JTkwJTkxJUU1JTg4JTg3JUU5JTlEJUEyJUU3JTlBJTg0JUU3JUE4JThCJUU1JUJBJThGJUU4JUFFJUJFJUU4JUFFJUEx">AOP WIKI<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9vcGVuc3VtaS5jb20vemgvZG9jcy9kZXZlbG9wL2Jhc2ljLWRlc2lnbi9kZXBlbmRlbmNlLWluamVjdG9y">OpenSumi 依赖注入<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODM4MTcyODM5OTQz">JavaScript中AOP的应用<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY3RuaWNob2xhcy5kZXYvbm90ZXMvYXNwZWN0LW9yaWVudGVkLXByb2dyYW1taW5nLWluLWphdmFzY3JpcHQ=">Aspect-Oriented Programming in JavaScript - ctnicholas.dev<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmJpdHNyYy5pby9hc3BlY3Qtb3JpZW50ZWQtcHJvZ3JhbW1pbmctaW4tamF2YXNjcmlwdC1jNGNiNDNmNmJmY2M=">Aspect-Oriented Programming in JavaScript - bitsrc.io<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3 新特性</title>
    <url>/posts/6436a60f/</url>
    <content><![CDATA[<p>css3 新特性</p>
<ul>
<li>scroll-behavior</li>
<li>clip-path</li>
<li>background-clip</li>
<li>::selection</li>
<li>::placeholder</li>
</ul>
<span id="more"></span>



<h2 id="锚点滚动更加丝滑"><a href="#锚点滚动更加丝滑" class="headerlink" title="锚点滚动更加丝滑"></a>锚点滚动更加丝滑</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="剪切可视区域图片"><a href="#剪切可视区域图片" class="headerlink" title="剪切可视区域图片"></a>剪切可视区域图片</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">40%</span>); //圆形显示</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">130px</span> <span class="number">140px</span> at <span class="number">10%</span> <span class="number">20%</span>); // 椭圆</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>); // 多边形</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="元素背景延伸到边框"><a href="#元素背景延伸到边框" class="headerlink" title="元素背景延伸到边框"></a>元素背景延伸到边框</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-clip</span>: border-box;  // 包括边框</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;	// 内容</span><br><span class="line">  </span><br><span class="line">  // 试验API，不建议使用</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选中文本样式"><a href="#选中文本样式" class="headerlink" title="选中文本样式"></a>选中文本样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">238</span>, <span class="number">99</span>, <span class="number">82</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义输入框placeholder"><a href="#自定义输入框placeholder" class="headerlink" title="自定义输入框placeholder"></a>自定义输入框placeholder</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123; </span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#d27054</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wb2x5cGFuZS5hcHAvY3NzLXNwZWNpZmljaXR5LWNhbGN1bGF0b3I=">css 优先级计算<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 调试技巧</title>
    <url>/posts/f8120d2/</url>
    <content><![CDATA[<blockquote>
<p>参考 掘金小册 和 chrome 官方文档，这些东西基本都过一遍有个印象就行，需要用的时候，再看也不迟。</p>
<p>简单列举，并不全面。</p>
</blockquote>
<span id="more"></span>

<h2 id="八大面板"><a href="#八大面板" class="headerlink" title="八大面板"></a>八大面板</h2><ol>
<li>元素面板</li>
<li>控制台面板</li>
<li>源代码面板</li>
<li>网络面板</li>
<li>性能面板</li>
<li>内存面板</li>
<li>应用面板</li>
<li>安全面板</li>
</ol>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="公共-API-函数"><a href="#公共-API-函数" class="headerlink" title="公共 API 函数"></a>公共 <code>API</code> 函数</h3><blockquote>
<p> <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL2Nocm9tZS1kZXZ0b29scy9jb25zb2xlL3V0aWxpdGllcw==">Console Utilities API Reference<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><p>复制到剪贴板</p>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清空 <code>console</code> 面板历史</p>
<h4 id="queryObjects"><a href="#queryObjects" class="headerlink" title="queryObjects()"></a>queryObjects()</h4><p>对象查询方法</p>
<h4 id="log-输出增强"><a href="#log-输出增强" class="headerlink" title="log 输出增强"></a>log 输出增强</h4><p>使用 <code>ES6</code> 增强对象文字面量（结构赋值）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;a,b,c&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="输出开启-时间戳"><a href="#输出开启-时间戳" class="headerlink" title="输出开启 时间戳"></a>输出开启 时间戳</h4><p><code>ctrl + shift + p</code> </p>
<p>输入  <em>timestamps</em> </p>
<h4 id="console-面板"><a href="#console-面板" class="headerlink" title="console 面板"></a>console 面板</h4><p>点击 眼睛 ( <code>create live expression</code> )</p>
<p>可以定义任何表达式，它会不断更新。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL2Nocm9tZS1kZXZ0b29scy9zaG9ydGN1dHM=">键盘快捷键参考<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="打开-dev-tools-控制台"><a href="#打开-dev-tools-控制台" class="headerlink" title="打开 dev tools 控制台"></a>打开 <code>dev tools</code> 控制台</h3><p><code>ctrl + shift + J</code></p>
<p><code>ctrl + shift + I</code></p>
<h3 id="切换-dev-tools-窗口展示布局"><a href="#切换-dev-tools-窗口展示布局" class="headerlink" title="切换 dev tools 窗口展示布局"></a>切换 <code>dev tools</code> 窗口展示布局</h3><blockquote>
<p>需先打开控制台 切换为：底部或右边</p>
</blockquote>
<p><code>ctrl + shift + D</code></p>
<h3 id="切换-Dev-Tools-面板-聚焦"><a href="#切换-Dev-Tools-面板-聚焦" class="headerlink" title="切换 Dev Tools 面板 聚焦"></a>切换 <code>Dev Tools</code> 面板 聚焦</h3><p>左移 <code>ctrl + [</code> </p>
<p>右移 <code>ctrl + ]</code></p>
<h3 id="调整数值"><a href="#调整数值" class="headerlink" title="调整数值"></a>调整数值</h3><blockquote>
<p>下箭头同理</p>
</blockquote>
<p><code>alt + 上箭头</code> : 提高数值 <code>0.1</code></p>
<p>普通  <code>上箭头</code> ：提高数值 <code>1</code></p>
<p><code>shift + 上箭头</code> :   提高数值 <code>10</code></p>
<p><code>ctrl + 上箭头</code> :  提高数值 <code>100</code></p>
<h3 id="h-隐藏DOM元素"><a href="#h-隐藏DOM元素" class="headerlink" title="h 隐藏DOM元素"></a><code>h</code> 隐藏DOM元素</h3><p>将焦点放在 <code>DOM</code> 元素，按 <code>H</code> 隐藏 <code>DOM</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vYm9vay81YzUyNjkwMmU1MWQ0NTQzODA1ZWYzNWUvc2VjdGlvbi81YzUyNjk0M2U1MWQ0NTFmYjk1NTlmODAjaGVhZGluZy01">掘金小册<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL2Nocm9tZS1kZXZ0b29scw==">chrome文档<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的substr和subString还有slice的区别</title>
    <url>/posts/ce57b9e9/</url>
    <content><![CDATA[<p>区别就是一个长一个短。皮一下，很开心。</p>
<p>注意：</p>
<p><code>substr</code> 官方不推荐不使用</p>
<p><code>substring</code>是全小写，没有按照驼峰命名法来。方法都是不改变原字符串，调用方法后返回一个新字符串。</p>
<span id="more"></span>

<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N1YnN0cg==">String.prototype.substr()<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N1YnN0cmluZw==">String,prototype.substring()<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NsaWNl">String.prototype.slice()<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>注意：<code>substring</code>是全小写，没有按照驼峰命名法来。方法都是不改变原字符串，调用方法后返回一个新字符串。</p>
</blockquote>
<h3 id="str-substr-start-length"><a href="#str-substr-start-length" class="headerlink" title="str.substr(start[, length])"></a>str.substr(start[, length])</h3><blockquote>
<p><code>start</code> 开始提取字符的位置，如果<code>start</code>为负值，则为<code>strLength + start</code></p>
<p><code>length </code> 可选，提取字符的长度</p>
</blockquote>
<h3 id="str-substring-indexStart-indexEnd"><a href="#str-substring-indexStart-indexEnd" class="headerlink" title="str.substring(indexStart[, indexEnd])"></a>str.substring(indexStart[, indexEnd])</h3><blockquote>
<p><code>indexStart</code>需要截取的第一个字符的索引，该字符作为返回的字符串的首字母。</p>
<p><code>indexEnd</code>可选，返回字符串结尾的位置，当前位置的字符不会返回。</p>
</blockquote>
<h3 id="str-slice-beginSlice-endSlice"><a href="#str-slice-beginSlice-endSlice" class="headerlink" title="str.slice(beginSlice[, endSlice])"></a>str.slice(beginSlice[, endSlice])</h3><blockquote>
<p><code>beginSlice</code>索引开始，提取字符串</p>
<p><code>endSlice</code>，可选，索引结束提取字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 Hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 World</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">6</span>,<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 lo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 学习笔记</title>
    <url>/posts/20e30b1b/</url>
    <content><![CDATA[<p>早期在学习 <code>node</code> 时候，做的笔记。</p>
<span id="more"></span>



<h2 id="NodeJS-简介"><a href="#NodeJS-简介" class="headerlink" title="NodeJS 简介"></a>NodeJS 简介</h2><p><strong>非阻塞IO</strong>，<strong>运行在Chome V8</strong>，<strong>事件驱动</strong></p>
<h2 id="环境-调试"><a href="#环境-调试" class="headerlink" title="环境 调试"></a>环境 调试</h2><ul>
<li>CommonJS</li>
<li>global</li>
<li>process</li>
</ul>
<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a><code>CommonJS</code></h3><ul>
<li>每个文件是一个模块，有自己的作用域</li>
<li>在模块内部 <code>module</code> 变量代表模块本身</li>
<li><code>module.exports</code> 属性代表模块对外接口</li>
</ul>
<h3 id="require-规则"><a href="#require-规则" class="headerlink" title="require 规则"></a><code>require</code> 规则</h3><ul>
<li><p><code>/</code> 表示绝对路径， <code>./</code> 表示相对当前文件的路径</p>
</li>
<li><p>支持 js, json, node 拓展名，不写依次尝试</p>
</li>
<li><p>不写路径认为是 build-in 模块或者各级 <code>node_modules</code>内的第三方模块</p>
</li>
</ul>
<h3 id="require-特性"><a href="#require-特性" class="headerlink" title="require 特性"></a><code>require</code> 特性</h3><ul>
<li><code>module</code> 被加载的时候执行，加载后缓存</li>
<li>一旦出现某个模块被循环加载，就只输出已经执行的部分，还未执行的部分不会输出</li>
</ul>
<h3 id="chalk-模块"><a href="#chalk-模块" class="headerlink" title="chalk 模块"></a><a href="https://github.com/chalk/chalk"><code>chalk</code> 模块</a></h3><p>将所有的模块安装在 <code>node_modules</code> 下，无论是项目的依赖还是模块的依赖，或者是共同的依赖，都安装在 <code>node_modules</code> 下，早期的 <code>npm</code> 会将 模块的依赖安装在自身文件夹下的 <code>node_modules</code> 下，而如今的 <code>npm</code> 则是统一安装在项目根目录下的 <code>node_modules</code> 下。</p>
<h3 id="modules-exports-和-exports-区别"><a href="#modules-exports-和-exports-区别" class="headerlink" title="modules.exports 和 exports 区别"></a><code>modules.exports</code> 和 <code>exports</code> 区别</h3><blockquote>
<p>exports &#x3D; modules.exports;</p>
<p>两者是相等的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">exports</span> = modules.<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>)&#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">test</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样会改变 exports 的指向，故失效</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要修改为字面量形式</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="global-变量"><a href="#global-变量" class="headerlink" title="global 变量"></a><code>global</code> 变量</h3><ul>
<li>CommonJS</li>
<li>Buffer, process, console</li>
<li>timer<ul>
<li>setTimeout</li>
<li>SetInterval</li>
</ul>
</li>
</ul>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvcHJvY2Vzcy5odG1s">process<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li><code>argv</code> 返回进程启动时的命令行参数。 第一个元素是 <a href="http://nodejs.cn/s/MCrAya"><code>process.execPath</code></a>。 使用 <code>process.argv0</code> 可以获取 <code>argv[0]</code> 原始的值。 第二个元素是当前执行的 JavaScript 文件的路径。 剩余的元素都是额外的命令行参数。</li>
<li><code>argv0</code> 返回进程启动时传入的 <code>argv[0]</code> 的原始值。</li>
<li><code>execArgv</code> 返回 Node.js 特定的命令行选项。</li>
<li><code>execPath</code> 返回 Node.js 启动文件绝对路径</li>
<li><code>env</code> 返回用户的环境信息</li>
<li><code>cwd</code> 返回进程的当前工作目录</li>
</ul>
<h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2RvY3MvZ3VpZGVzL2RlYnVnZ2luZy1nZXR0aW5nLXN0YXJ0ZWQv">调试方法<i class="fa fa-external-link-alt"></i></span></h3><p>chrome</p>
<p>vscode</p>
<p>webstrom</p>
<p>…</p>
<h2 id="Node-js-基础"><a href="#Node-js-基础" class="headerlink" title="Node.js 基础"></a>Node.js 基础</h2><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><blockquote>
<p>normalize, join, resolve,</p>
<p>basename, extname, dirname, </p>
<p>parse, format</p>
<p>sep, delimiter, win32, posix</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;normalize&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> normalize = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>).<span class="property">normalize</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parse 返回当前 路径的 文件/文件夹信息</span></span><br><span class="line"><span class="keyword">let</span> parse = path.<span class="title function_">parse</span>(<span class="string">&#x27;D://nodejs/demo4/01_path.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="attr">root</span>: <span class="string">&#x27;D:/&#x27;</span>,</span><br><span class="line">  <span class="attr">dir</span>: <span class="string">&#x27;D://nodejs/demo4&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;01_path.js&#x27;</span>,</span><br><span class="line">  <span class="attr">ext</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;01_path&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// format 与 parse 正好相反</span></span><br><span class="line"><span class="keyword">let</span> format = path.<span class="title function_">format</span>(&#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="string">&#x27;/ignored&#x27;</span>,</span><br><span class="line">    <span class="attr">dir</span>: <span class="string">&#x27;/home/user/dir&#x27;</span>,</span><br><span class="line">    <span class="attr">base</span>: <span class="string">&#x27;file.txt&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(format);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="string">`/home/user/dir\file.txt`</span></span><br></pre></td></tr></table></figure>

<p>path.format(pathObject)</p>
<p>当为 <code>pathObject</code> 提供属性时，请记住有一个组合，其中一个属性优先于另一个属性：</p>
<ul>
<li>如果提供了 <code>pathObject.dir</code>，则忽略 <code>pathObject.root</code>。</li>
<li>如果 <code>pathObject.base</code> 存在，则忽略 <code>pathObject.ext</code> 和 <code>pathObject.name</code>。</li>
</ul>
<blockquote>
<p><code>__dirname</code>, <code>__filename</code>  总是返回文件的绝对路径</p>
<p>process.cwd() 总是返回执行 node 命令所在文件夹</p>
</blockquote>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><blockquote>
<ul>
<li><p>Buffer 用于处理二进制数据流</p>
</li>
<li><p>实例类似整数数组，大小固定</p>
</li>
<li><p>C++ 代码在 V8 堆外分配物理内存</p>
</li>
<li><p>Buffer.byteLength<br>Buffer.isBuffer() 是否为<code>Buffer</code>对象<br>Buffer.concat()</p>
</li>
<li><p>buf.length</p>
<p>buf.toString()</p>
<p>buf.fill()</p>
<p>buf.equals()</p>
<p>buf.indexOf()</p>
<p>buf.copy()</p>
</li>
</ul>
</blockquote>
<h3 id="events-事件"><a href="#events-事件" class="headerlink" title="events(事件)"></a><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvZXZlbnRzLmh0bQ==">events(事件)<i class="fa fa-external-link-alt"></i></span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomEvent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>();</span><br><span class="line">ce.<span class="title function_">on</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a test!&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ce.<span class="title function_">emit</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>emitter.once() 事件只触发一回</p>
<p>emitter.emit() 触发事件</p>
<p>emitter.on()  –  emitter.addListener() 都为绑定事件</p>
<p>emitter.removeListener() 移除事件</p>
<p>emitter.removeAllListeners() 移除所有事件</p>
<h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkvZnMuaHRtbA==">fs<i class="fa fa-external-link-alt"></i></span></h3><blockquote>
<p>readFile 读文件</p>
<p>writeFile 写文件</p>
<p>stat 提供文件相关信息</p>
<p>rename 更改文件名</p>
<p>unlink 删除文件</p>
<p>readdir 读文件夹</p>
<p>mkdir 创建文件夹</p>
<p>rmdir 删除文件夹</p>
<p>watch 监视文件&#x2F;文件夹</p>
<p>readstream</p>
</blockquote>
<h3 id="解决回调地狱问题"><a href="#解决回调地狱问题" class="headerlink" title="解决回调地狱问题"></a>解决回调地狱问题</h3><blockquote>
<p>Promise</p>
<p>promisify</p>
<p>async await</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promisify</span></span><br><span class="line"><span class="keyword">const</span> &#123;promisify&#125; =  <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> read = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"><span class="title function_">read</span>(<span class="string">&#x27;b.txt&#x27;</span>).<span class="title function_">then</span>( <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;b.txt&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(content.<span class="title function_">toString</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p><code>git</code> 忽略文件</p>
<blockquote>
<p>匹配模式前 <code>/</code> 代表项目根目录</p>
<p>匹配模式最后加 <code>/</code> 代表是目录</p>
<p>匹配模式前加 <code>!</code> 代表取反</p>
<p><code>*</code> 代表任意字符</p>
<p><code>?</code> 匹配任意一个字符</p>
<p><code>**</code> 匹配多级目录</p>
</blockquote>
<h3 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h3><p><code>npm</code> 忽略文件 </p>
<h3 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title=".EditorConfig"></a>.EditorConfig</h3><blockquote>
<p> EditorConfig有助于为跨越各种编辑器和IDE的同一项目的多个开发人员维护一致的编码样式。EditorConfig项目由用于定义编码样式<strong>的文件格式</strong>和一组<strong>文本编辑器插件组成</strong>，这些<strong>插件</strong>使编辑器能够读取文件格式并遵循定义的样式。EditorConfig文件易于阅读，与版本控制系统配合使用。</p>
</blockquote>
<p>官方模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># EditorConfig is awesome: https://EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line"></span><br><span class="line"># Matches multiple files with brace expansion notation</span><br><span class="line"># Set default charset</span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"># 4 space indentation</span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"># Tab indentation (no size specified)</span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"># Indentation override for all JS under lib directory</span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"># Matches the exact files either package.json or .travis.yml</span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure>

<h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><blockquote>
<p>需要 <code>eslint</code> 忽略检查的文件</p>
<p>规范同 <code>gitignore</code></p>
</blockquote>
<p>也可以在 <code>package.json</code> 中查找忽略的文件 <code>eslintIgnore</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mypackage&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslintIgnore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hello.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;world.js&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><blockquote>
<p>JavaScript 代码检查工具。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yarn add --dev eslint</span><br><span class="line"><span class="comment"># 生成ESLint配置</span></span><br><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure>

<h4 id="内联禁用-ESLint规则"><a href="#内联禁用-ESLint规则" class="headerlink" title="内联禁用 ESLint规则"></a><a href="http://eslint.cn/docs/user-guide/configuring#disabling-rules-with-inline-comments">内联禁用 <code>ESLint</code>规则</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h2><h3 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> conf = <span class="built_in">require</span>(<span class="string">&#x27;./config/defaultConfig&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(conf.<span class="property">port</span>, conf.<span class="property">hostname</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = <span class="string">`http://<span class="subst">$&#123;conf.hostname&#125;</span>:<span class="subst">$&#123;conf.port&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Server started at the <span class="subst">$&#123;chalk.green(address)&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将配置信息分离出</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">root</span>: process.<span class="title function_">cwd</span>(),</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9527</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="content-type-文件内容"><a href="#content-type-文件内容" class="headerlink" title="content-type: 文件内容"></a>content-type: 文件内容</h4><blockquote>
<p>普通内容：text&#x2F;plain …</p>
<p><span class="exturl" data-url="aHR0cDovL3Rvb2wub3NjaGluYS5uZXQvY29tbW9ucy8=">HTTP Content -Type 对照表<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4><blockquote>
<p>accept-encoding: gzip,bar,deflate…</p>
</blockquote>
<h4 id="range范围请求"><a href="#range范围请求" class="headerlink" title="range范围请求"></a>range范围请求</h4><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><blockquote>
<p>使用缓存技术，减少服务器压力</p>
</blockquote>
<h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x.y.z</span><br><span class="line">x 大版本，不保证兼容</span><br><span class="line">y 新增功能，并且兼容前面版本</span><br><span class="line">z 修复bug</span><br><span class="line"></span><br><span class="line">1.2.* 同等于 ~1.2.0</span><br><span class="line">永远是用最新的1.2.*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="supervisor模块"><a href="#supervisor模块" class="headerlink" title="supervisor模块"></a>supervisor模块</h3><blockquote>
<p>监听当前文件夹下的变化, 文件有变化 重新加载文件</p>
<p>自动重新载入服务器</p>
<p>supervise 模块需要全局安装</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用supervise 模块加载js文件</span><br><span class="line">supervisor app.js</span><br></pre></td></tr></table></figure>

<h3 id="handlebars-模块"><a href="#handlebars-模块" class="headerlink" title="handlebars 模块"></a>handlebars 模块</h3><blockquote>
<p>模板引擎，类似<code>art-template</code>, ejs 等 </p>
</blockquote>
<p>2019年3月5日 23点25分</p>
<blockquote>
<p>网站访问路径没有处理好</p>
</blockquote>
<p>跳过</p>
<h2 id="本地构建"><a href="#本地构建" class="headerlink" title="本地构建"></a>本地构建</h2><blockquote>
<p>gulp, babel, webpack</p>
</blockquote>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><p>glob</p>
<blockquote>
<p><code>*</code>匹配任意字符</p>
<p><code>?</code>匹配一个字符</p>
<p><code>[...]</code>匹配范围内的字符</p>
<p><code>!(parttern1|pattern2)</code>匹配取反</p>
<p><code>?(parttern1|pattern2)</code>匹配0个或1个</p>
<p><code>+(parttern1|pattern2)</code>匹配1个或多个</p>
<p><code>*(a|b|c)</code>匹配任意个</p>
<p><code>@(pattern|pat*|pat?erN)</code>匹配特定的一个</p>
<p><code>**</code>任意层级匹配</p>
</blockquote>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h2 id="单元测试和UI测试"><a href="#单元测试和UI测试" class="headerlink" title="单元测试和UI测试"></a>单元测试和UI测试</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhaWpzLmNvbS8=">chai<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tb2NoYWpzLm9yZy8=">mocha<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvdHdhcmxvc3QvaXN0YW5idWw=">istanbul<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><blockquote>
<p>TDD, BDD</p>
</blockquote>
<h4 id="TDD：测试驱动开发"><a href="#TDD：测试驱动开发" class="headerlink" title="TDD：测试驱动开发"></a>TDD：测试驱动开发</h4><p>测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD的基本思路就是通过测试来推动整个开发的进行，但测试驱动开发并不只是单纯的测试工作，而是把需求分析，设计，质量控制量化的过程。TDD首先考虑使用需求（对象、功能、过程、接口等），主要是编写测试用例框架对功能的过程和接口进行设计，而测试框架可以持续进行验证。 </p>
<h4 id="BDD：行为驱动开发（Behavior-Driven-Development）"><a href="#BDD：行为驱动开发（Behavior-Driven-Development）" class="headerlink" title="BDD：行为驱动开发（Behavior Driven Development）"></a>BDD：行为驱动开发（Behavior Driven Development）</h4><p>行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。主要是从用户的需求出发，强调系统行为。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。</p>
<p>转载自 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMTYxOTcwL2Fuc3dlci8xMDAwMDMyNDI=">某乎<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;should, expect, assert&#125; = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../src/math&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">should</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">3</span>, <span class="number">2</span>).<span class="property">should</span>.<span class="title function_">equal</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">assert.<span class="title function_">equal</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Mocha-1"><a href="#Mocha-1" class="headerlink" title="Mocha"></a>Mocha</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;should, expect, assert&#125; = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../src/math&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;#math&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&#x27;add&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&#x27;should return 5 when 3 + 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.<span class="title function_">equal</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&#x27;should return 6 when 3 + 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.<span class="title function_">equal</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&#x27;mul&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&#x27;should return 6 when 3 * 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            assert.<span class="title function_">equal</span>(<span class="title function_">mul</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="istanbul"><a href="#istanbul" class="headerlink" title="istanbul"></a>istanbul</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMDYvaXN0YW5idWwuaHRtbA==">http://www.ruanyifeng.com/blog/2015/06/istanbul.html<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9hcGkv">Node.js 中文网<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9taXNjL2RldmVsb3BlcnMja2VlcGluZy1maWxlcy1vdXQtb2YteW91ci1wYWNrYWdl">npmingore 介绍<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdGlnbm9yZQ==">gitignore 介绍<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lZGl0b3Jjb25maWcub3JnLw==">EditorConfig<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2VzbGludC5jbi8=">ESLint 中文网<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvLw==">babel 官网<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcv">webpack 官网<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue父子组件生命周期</title>
    <url>/posts/77185e63/</url>
    <content><![CDATA[<p>Vue官网找了一圈没找到关于在父组件中使用子组件，生命周期是如何运行的。</p>
<p>先说结论</p>
<ul>
<li>父组件  <code>beforeCreated</code>、<code>created</code>、<code>beforeMount</code></li>
<li>子组件 <code>beforeCreated</code>、<code>created</code>、<code>beforeMount</code> 、<code>mounted</code></li>
<li>父组件  <code>mounted</code></li>
</ul>
<p>若使用 props 进行父子组件传值（若只进行自身组件数据进行维护，只会执行自身组件的生命周期函数）</p>
<ul>
<li>父组件 <code>beforeUpdate</code></li>
<li>子组件 <code>beforeUpdate</code>、<code>updated</code></li>
<li>父组件 <code>updated</code></li>
</ul>
<p>销毁阶段</p>
<ul>
<li>父组件 <code>beforeDestory</code></li>
<li>子组件 <code>beforeDestory</code>、 <code>destoryed</code></li>
<li>父组件  <code>destoryed</code></li>
</ul>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当在父组件中，使用子组件，那么父子组件的生命周期是如何进行的？</p>
<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>首先，来回顾下Vue生命周期，以下为<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvaW5zdGFuY2UuaHRtbCMlRTUlQUUlOUUlRTQlQkUlOEIlRTclOTQlOUYlRTUlOTElQkQlRTUlOTElQTglRTYlOUMlOUYlRTklOTIlQTklRTUlQUQlOTA=">官方文档中的生命周期图<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p>
<p>这里只列出了结论，没有进行实践，如需详情查看，请点击<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTM4MTkwNg==">详解vue生命周期<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="beforeCreate-created"><a href="#beforeCreate-created" class="headerlink" title="beforeCreate - created"></a>beforeCreate - created</h3><p>这两个阶段主要是<strong>初始化事件、进行数据检测</strong>，但此时还没有 <code>el</code> 选项。	</p>
<h3 id="created-beforeMount"><a href="#created-beforeMount" class="headerlink" title="created - beforeMount"></a>created - beforeMount</h3><p>首先判断是否有无 <code>el</code> 选项，</p>
<ul>
<li>若有则继续编译</li>
<li>若没有 <code>el</code> 选项则会停止编译，意味着生命周期结束，直接调用 <code>vm.$mount(el)</code>。</li>
</ul>
<p>紧接着继续判断有无 <code>template</code> 选项，</p>
<ul>
<li>若有则会将 <code>template</code> 编译为 <code>render</code> 函数，</li>
<li>若无，则会引用外部 <code>html</code> 作为模板编译。</li>
<li>其中 <code>new Vue</code> 中还有一个选项 <code>render</code>，以 <code>createElement</code> 作为参数进行渲染操作。</li>
</ul>
<p>经过实验，渲染优先级如下</p>
<p><code>render</code> &gt; <code>template</code> &gt; <code>外部 html</code></p>
<h3 id="beforeMount-mounted"><a href="#beforeMount-mounted" class="headerlink" title="beforeMount - mounted"></a>beforeMount - mounted</h3><p>给示例对象添加 <code>$el</code> 选项，并替换掉挂载到 <code>dom</code> 对象。</p>
<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>将页面中的填充位，用数据进行替换。（例如：<code>&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</code> 替换后 <code>&lt;div&gt;Hello World&lt;/div&gt;</code>）</p>
<h3 id="beforeUpdate-updated"><a href="#beforeUpdate-updated" class="headerlink" title="beforeUpdate - updated"></a>beforeUpdate - updated</h3><p>当组件内的 <code>data</code> 属性发生变化时，会执行这两个生命周期（<code>beforeUpdate</code>和 <code>updated</code>），</p>
<h3 id="beforeDestory-destoryed"><a href="#beforeDestory-destoryed" class="headerlink" title="beforeDestory - destoryed"></a>beforeDestory - destoryed</h3><p><strong>beforeDestroy</strong>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。<br><strong>destroyed</strong>钩子函数在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
<h2 id="构建代码"><a href="#构建代码" class="headerlink" title="构建代码"></a>构建代码</h2><p>回到原题，Vue 父子组件生命周期是如何执行的。</p>
<p>首先需要构建一个父子组件的结构，代码如下，可以在线访问 <span class="exturl" data-url="aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2xhdWdoaW5nLWZpZWxkLXNtOWdtP2ZpbGU9L3NyYy9jb21wb25lbnRzL0ZhdGhlci52dWU6MC05OTg=">codesandbox<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="父组件代码"><a href="#父组件代码" class="headerlink" title="父组件代码"></a>父组件代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;HomePage&lt;/router-link&gt;</span><br><span class="line">    &lt;div&gt;This is &#123;&#123; type &#125;&#125; componet&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;更新父组件data数据&lt;/button&gt;</span><br><span class="line">    &lt;Son :val=&quot;type&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &quot;./Son&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Father&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &quot;Father&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.type = &quot;Father Update&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;This is Father beforeCreate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;This is Father created&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&quot;This is Father beforeMount&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;This is Father mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&quot;This is Father beforeUpdate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;This is Father updated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&quot;This is Father beforeDestroy&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;This is Father destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="子组件代码"><a href="#子组件代码" class="headerlink" title="子组件代码"></a>子组件代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;This is &#123;&#123; val &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;This is &#123;&#123; type &#125;&#125; componet&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;子组件数据更新&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Son&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    val: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &quot;Son&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.type = &quot;Son Update&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;This is Son beforeCreate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;This is Son created&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&quot;This is Son beforeMount&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;This is Son mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&quot;This is Son beforeUpdate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;This is Son updated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&quot;This is Son beforeDestroy&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;This is Son destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="首次进入"><a href="#首次进入" class="headerlink" title="首次进入"></a>首次进入</h3><blockquote>
<p>运行效果，点击页面中 Father 进入组件</p>
</blockquote>
<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201129113333.png" alt="image-20201129113325929" style="zoom:50%;" />



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is Father beforeCreate </span><br><span class="line">This is Father created </span><br><span class="line">This is Father beforeMount </span><br><span class="line">This is Son beforeCreate </span><br><span class="line">This is Son created </span><br><span class="line">This is Son beforeMount </span><br><span class="line">This is Son mounted </span><br><span class="line">This is Father mounted </span><br></pre></td></tr></table></figure>



<p>可以看出首先进入</p>
<ul>
<li>父组件  <code>beforeCreated</code>、<code>created</code>、<code>beforeMount</code></li>
<li>子组件 <code>beforeCreated</code>、<code>created</code>、<code>beforeMount</code> 、<code>mounted</code></li>
<li>父组件  <code>mounted</code></li>
</ul>
<p>其实这个也不难理解，刚开始没经过思考的我，认为是先执行完父组件生命周期，才会执行子组件生命周期。再次翻看官方文档之后，理解 vue 设计思路和一些理念，就可以理解生命周期为什么这么执行了。</p>
<p>在进入父组件时候，首先肯定需要进行初始化事件、数据，然后进入挂载的阶段，当在挂载过程中，又发现子组件，自然而然的需要先把子组件挂载上去才可以继续进行父组件的生命周期，于是就形成了上面的这种景象。</p>
<h3 id="数据更新阶段"><a href="#数据更新阶段" class="headerlink" title="数据更新阶段"></a>数据更新阶段</h3><blockquote>
<p>点击更新子组件数据，就会看到只会在自己组件的更新周期函数</p>
</blockquote>
<p>此时，父子组件各自维护自己的 data 值，并没有进行父组件传值操作。</p>
<p>更新父组件 data 值后，并不会影响到子组件的 beforeUpdate、updated</p>
<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201129115024.png" alt="image-20201129115023984" style="zoom: 50%;" />



<p>子组件更新自身数据也是一样</p>
<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201129115134.png" alt="image-20201129115134288" style="zoom:50%;" />



<p>那么如果使用 <code>props</code>传递到子组件中，那么生命周期又会如何执行。</p>
<blockquote>
<p>点击更新父组件data 数据，此时父组件的数据已经通过 props 形式传入子组件</p>
</blockquote>
<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201129122619.png" alt="image-20201129122619463" style="zoom:50%;" />



<p>不出所料，生命周期函数</p>
<ul>
<li>父组件 <code>beforeUpdate</code></li>
<li>子组件 <code>beforeUpdate</code>、<code>updated</code></li>
<li>父组件 <code>updated</code></li>
</ul>
<h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><blockquote>
<p>点击页面中的 HomePage 返回主页，就会触发销毁阶段。</p>
</blockquote>
<p>其实也是一样的思路，就还没做实验，盲猜都应该是</p>
<ul>
<li>父组件 <code>beforeDestory</code></li>
<li>子组件 <code>beforeDestory</code>、 <code>destoryed</code></li>
<li>父组件  <code>destoryed</code></li>
</ul>
<p>经过试验证明后，也确实是这样</p>
<img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201129114216.png" alt="image-20201129114216299" style="zoom:50%;" />

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTM4MTkwNg==">https://segmentfault.com/a/1190000011381906<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>axios使用总结</title>
    <url>/posts/2058da06/</url>
    <content><![CDATA[<h1 id="axios使用总结"><a href="#axios使用总结" class="headerlink" title="axios使用总结"></a>axios使用总结</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐 <code>yarn</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure>

<p>或者 使用 <code>npm</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以像<code>jQuery</code>中的ajax那样使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/api/userlist&#x27;</span></span><br><span class="line">  <span class="attr">methods</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="title function_">funciton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="comment">// xxx</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>但是不需要采用<code>jQuery</code>中的回调，避免产生<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9JUU1JTlDJUIwJUU3JThCJUIxJUU1JTlCJTlFJUU4JUIwJTgz">地狱回调<i class="fa fa-external-link-alt"></i></span>的问题，所以我们采用 <code>ES6</code> 的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==">promise<i class="fa fa-external-link-alt"></i></span> 写法。</p>
<p>如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;/api/userlist&#x27;</span>,</span><br><span class="line">  <span class="attr">responseType</span>:<span class="string">&#x27;json&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  	<span class="comment">// xxx</span></span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h3><p>如果你发送的是 <code>get</code> 类型的请求数据，可以忽略 <code>methods</code> 参数。</p>
<p>为了探索新的大陆，当然也是为了简（tou）洁（lan），来尝试一下新的方法。</p>
<p>axios起了别名，可以更加方便的调用请求方法。</p>
<p>话说，最常用的还是这两个。</p>
<h5 id="axios-get-url-config"><a href="#axios-get-url-config" class="headerlink" title="axios.get(url[, config])"></a>axios.get(url[, config])</h5><h5 id="axios-post-url-data-config"><a href="#axios-post-url-data-config" class="headerlink" title="axios.post(url[, data[, config]])"></a>axios.post(url[, data[, config]])</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/userlist&#x27;</span>)</span><br><span class="line">	.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  	<span class="comment">// xxx</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="全局默认值-baseURL"><a href="#全局默认值-baseURL" class="headerlink" title="全局默认值 baseURL"></a>全局默认值 baseURL</h3><p>在一个项目中，请求不可能只有几个，而每个请求大多都是基于同一个地址，那么，就可以设置根URL。</p>
<p>优点显而易见，可以避免更换服务器而导致所有的请求地址都要改变，也可以避免没必要的同时出现相同的字符串，只需写后面的接口地址即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是 axios 的全局默认值，设置后其他URL也都会以这个域名为根地址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.api.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假如设置后发送一个请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/userlist&#x27;</span>)</span><br><span class="line">	.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  	<span class="comment">// xxx</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">// 这个时候发送的地址就为 https://www.api.com/api/userlist</span></span><br></pre></td></tr></table></figure>

<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>在很多场景中，用户登录后，需要将用户的token一起发送给后端，而每次请求都设置一边请求头，显然不符合实际。<code>axios</code> 提供了拦截器，发送前和数据返回后都可以做下处理然后继续发给服务器或者交给页面处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同时这里也可以统一处理错误情况，提高了开发效率。</p>
<h3 id="在Vue、React中使用axios"><a href="#在Vue、React中使用axios" class="headerlink" title="在Vue、React中使用axios"></a>在Vue、React中使用axios</h3><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><p>假设已经使用 <code>vue-cli</code> 脚手架搭建出基本框架，那么加下来就可以直接挂在Vue的原型上，这样在每个页面都可以调用 <code>axios</code></p>
<p><strong>&#x2F;src&#x2F;main.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">// xxx</span></span><br></pre></td></tr></table></figure>

<p>在其他组件调用就可以这样</p>
<p><strong>&#x2F;pages&#x2F;home&#x2F;home.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;userinfo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">userinfo</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/userinfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">userinfo</span> = res.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>React用法同Vue，还是采用脚手架搭建，然后在<code>/src/index.js</code>将axios绑定到<code>React</code>上</p>
<p><strong>&#x2F;src&#x2F;index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里我导入的是自己配置的axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./config/axiosConfig&#x27;</span>;</span><br><span class="line"><span class="comment">// axios绑定到React</span></span><br><span class="line"><span class="title class_">React</span>.<span class="property">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = axios;</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;src&#x2F;config&#x2F;axiosConfig</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:5000&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  response = response.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure>

<p>组件中的调用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">table</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">dataSource</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getDataSource</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getDataSource = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/userinfo&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">          <span class="attr">dataSource</span>: res.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dataSource = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">dataSource</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;dataSource&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在的前端工程大都已经将接口统一管理了，只会在页面调用接口，然后在页面写处理的逻辑。这篇文章知识提供一个思路。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>go 入门</title>
    <url>/posts/1d79f384/</url>
    <content><![CDATA[<span id="more"></span>



<h2 id="首先配置仓库来源"><a href="#首先配置仓库来源" class="headerlink" title="首先配置仓库来源"></a>首先配置仓库来源</h2><blockquote>
<p>天朝特殊环境，不得不配置为国内的源</p>
</blockquote>
<p>打开终端并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>



<p>macOS 或 Linux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>



<p>windows</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:GO111MODULE</span> = <span class="string">&quot;on&quot;</span></span><br><span class="line"><span class="variable">$env:GOPROXY</span> = <span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="相关Go资料"><a href="#相关Go资料" class="headerlink" title="相关Go资料"></a>相关Go资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9nb3Byb3h5LmNuLw==">Goproxy 中国<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nZncuZ28xMDEub3JnL2FydGljbGUvMTAxLmh0bWw=">Go语言101<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nby5kZXYvcmVmL3NwZWMjSW50cm9kdWN0aW9u">Go官方语言规范 - 英文<i class="fa fa-external-link-alt"></i></span>：据说看完此文档，Go基本就入门了</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2J5ZXhhbXBsZS1jbi5naXRodWIuaW8v">Go by Example<i class="fa fa-external-link-alt"></i></span>：通过实践入门</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nZWVrdHV0dS5jb20vcG9zdC9nZWUuaHRtbA==">7天用Go从零实现Web框架Gee教程<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>linux实战技能100讲 笔记</title>
    <url>/posts/9c9b623d/</url>
    <content><![CDATA[<p>Linux入门时做的笔记， <code>shell</code> 相关笔记没有学完不全，以后有空继续学习。</p>
<p>主要为常规的一些命令、压缩打包、权限等。</p>
<span id="more"></span>

<h2 id="万能帮助命令"><a href="#万能帮助命令" class="headerlink" title="万能帮助命令"></a>万能帮助命令</h2><ul>
<li>man</li>
<li>help</li>
<li>info</li>
<li>网络资源</li>
</ul>
<h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>ls</td>
<td>查看当前文件夹目录，<code>-l</code> 长格式显示， <code>-a</code>显示隐藏文件， <code>-r</code>逆序显示， <code>-t</code>按时间顺序显示， <code>-R</code>递归显示，<code>-h</code> 文件大小单位</td>
</tr>
<tr>
<td>cd</td>
<td>切换目录</td>
</tr>
<tr>
<td>pwd</td>
<td>显示当前目录名称</td>
</tr>
<tr>
<td>mkdir</td>
<td>创建文件夹</td>
</tr>
<tr>
<td>rmdir</td>
<td>删除空目录</td>
</tr>
<tr>
<td>rm</td>
<td><code>-r</code> 删除非空目录 <code>-f</code> 强制删除不提示</td>
</tr>
<tr>
<td>cp</td>
<td>复制文件, <code>-p</code> 保留原来的修改时间，<code>-a</code>保留权限，<code>-r</code> 复制目录</td>
</tr>
<tr>
<td>mv</td>
<td>移动文件</td>
</tr>
<tr>
<td>touch</td>
<td>创建文件</td>
</tr>
<tr>
<td>cat</td>
<td>查看文件</td>
</tr>
<tr>
<td>head</td>
<td>查看文件头</td>
</tr>
<tr>
<td>tail</td>
<td>查看文件尾</td>
</tr>
<tr>
<td>wc</td>
<td>统计统计文件信息</td>
</tr>
</tbody></table>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>用途:操作多个相似(有简单规律律)的⽂文件 常⽤用通配符</p>
<ul>
<li><code>*</code> 匹配任何字符串串</li>
<li><code>?</code> 匹配1个字符串串</li>
<li><code>[xyz]</code> 匹配xyz任意⼀一个字符 [a-z] 匹配⼀一个范围</li>
<li><code>[!xyz]</code> 或 <code>[^xyz]</code>  不不匹配</li>
</ul>
<h3 id="打包解压缩"><a href="#打包解压缩" class="headerlink" title="打包解压缩"></a>打包解压缩</h3><blockquote>
<p>常用压缩格式为 <code>.tar.gz .tar.bz2 .tgz</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>command</th>
<th>descrption</th>
</tr>
</thead>
<tbody><tr>
<td>tar</td>
<td><code>c</code> 打包</td>
</tr>
<tr>
<td></td>
<td><code>x</code> 解包</td>
</tr>
<tr>
<td></td>
<td><code>f</code> 指定操作类型为文件</td>
</tr>
<tr>
<td></td>
<td><code>z</code> gzip 格式压缩和解压缩</td>
</tr>
<tr>
<td></td>
<td><code>j</code> bzip2 格式压缩和解压缩</td>
</tr>
</tbody></table>
<h3 id="用户与权限相关"><a href="#用户与权限相关" class="headerlink" title="用户与权限相关"></a>用户与权限相关</h3><h4 id="用户管理相关命令"><a href="#用户管理相关命令" class="headerlink" title="用户管理相关命令"></a>用户管理相关命令</h4><blockquote>
<p>添加用户之后会产生几个目录或添加文件内容等，比如添加wilson</p>
<ul>
<li><code>/home/wilson</code></li>
<li><code>/etc/passwd</code>，会添加 <code>wilson</code> 相关信息</li>
<li><code>/etc/shadow</code>，和密码相关</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>useradd</td>
<td>添加用户, <code>-g</code> 指定用户组</td>
</tr>
<tr>
<td>id</td>
<td>查看用户信息</td>
</tr>
<tr>
<td>passwd</td>
<td>修改用户密码</td>
</tr>
<tr>
<td>userdel</td>
<td>删除用户，<code>-r</code> 删除包括用户的数据</td>
</tr>
<tr>
<td>usermod</td>
<td>修改⽤用户属性，<code>-g</code> 修改用户组</td>
</tr>
<tr>
<td>chage</td>
<td>修改⽤用户属性</td>
</tr>
<tr>
<td>groupadd</td>
<td>添加用户组</td>
</tr>
<tr>
<td>groupdel</td>
<td>删除用户组</td>
</tr>
</tbody></table>
<h4 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h4><table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>su</td>
<td>切换用户</td>
</tr>
<tr>
<td>sudo</td>
<td>赋予普通用户执行管理员命令</td>
</tr>
<tr>
<td>visudo</td>
<td>设置需要使⽤用 sudo 的⽤用户(组)</td>
</tr>
</tbody></table>
<h4 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h4><h5 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h5><blockquote>
<p>用户配置文件</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200819154222.png" alt="image-20200819154215497"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wilson:x:1001:1001::/home/wilson:/bin/bash</span><br></pre></td></tr></table></figure>

<p>其中</p>
<ul>
<li><code>wilison</code> : 表示用户名</li>
<li><code>x</code> : 表示此用户是否需要密码登录</li>
<li><code>1001</code> : uid</li>
<li><code>1001</code> : gid</li>
<li><code>空</code> : <code>1001</code> 与<code>/home/wilison</code> 之间为注释</li>
<li><code>/home/wilson</code> : 用户的 <code>home</code> 目录</li>
<li><code>/bin/bash</code> : 用户登录后的命令解释器，如果为 <code>/sbin/nologin</code> 则不允许登录</li>
</ul>
<h5 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="&#x2F;etc&#x2F;shadow"></a>&#x2F;etc&#x2F;shadow</h5><blockquote>
<p>用户密码配置相关文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wilson:$6$wB5SlwF0OiEnRvc7$kdfaxXgiQySteIrPxnTd70DZSFTvBIB3TpXYEuQbiRYLnlgcQGUST2E0M/uQwhGd.ZwIJLLaV/B36d8ijSUxP0:18493:0:99999:7:::</span><br></pre></td></tr></table></figure>

<ul>
<li><code>wilson</code> : 用户名称</li>
<li><code>$...0</code> : 加密后的密码</li>
</ul>
<h5 id="etc-group"><a href="#etc-group" class="headerlink" title="&#x2F;etc&#x2F;group"></a>&#x2F;etc&#x2F;group</h5><blockquote>
<p>用户组配置文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group1:x:1003:</span><br></pre></td></tr></table></figure>

<ul>
<li><code>group1</code> : 用户组名称</li>
<li><code>x</code> : 是否需要密码验证</li>
<li><code>1003</code> : 组的 gid</li>
</ul>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200819162242.png" alt="image-20200819162242107"></p>
<h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ul>
<li><code>-</code> : 普通文件类型</li>
<li><code>d</code> : 目录文件</li>
<li><code>b</code> : 块文件类型 (“设备”)</li>
<li><code>c</code> : 字符特殊文件 (“设备”)</li>
<li><code>l</code> : 符号链接 (“快捷方式”)</li>
<li><code>f</code> : 命名管道</li>
<li><code>s</code> : 套接字文件</li>
</ul>
<h4 id="文件权限-1"><a href="#文件权限-1" class="headerlink" title="文件权限"></a>文件权限</h4><ul>
<li><code>r</code> : 读权限，数字代表 <code>4</code></li>
<li><code>w</code> : 写权限，数字代表 <code>2</code></li>
<li><code>x</code> : 执行权限，数字代表 <code>1</code></li>
</ul>
<h4 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h4><ul>
<li><code>x</code> : 进入目录</li>
<li><code>rx</code> : 显示目录内的文件名</li>
<li><code>wx</code> : 修改目录内的文件名</li>
</ul>
<h4 id="文件权限表示方式"><a href="#文件权限表示方式" class="headerlink" title="文件权限表示方式"></a>文件权限表示方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rw-r-xr-- 1 userame groupname mtime filename</span><br></pre></td></tr></table></figure>

<ul>
<li><code>rw-</code> : 文件属主的权限</li>
<li><code>r-x</code> : 文件属组的权限</li>
<li><code>r--</code> : 其他用户的权限</li>
</ul>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><blockquote>
<p>修改⽂文件、⽬目录权限</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加所属主的权限 可读</span></span><br><span class="line"><span class="built_in">chmod</span> u+r afile</span><br><span class="line"><span class="comment"># 增加所属组的权限 可写</span></span><br><span class="line"><span class="built_in">chmod</span> g+w afile</span><br><span class="line"><span class="comment"># 减去其他用户的权限 可写</span></span><br><span class="line"><span class="built_in">chmod</span> o-w afile</span><br><span class="line"><span class="comment"># 设置所属主的权限 可读写执行</span></span><br><span class="line"><span class="built_in">chmod</span> u=rwx afile</span><br><span class="line"><span class="comment"># 添加所属主、所属组、其他用户权限 均可读</span></span><br><span class="line"><span class="built_in">chmod</span> a+r afile</span><br><span class="line"><span class="comment"># 使用数字代表权限，6=r+w, 4=r, 以下命令表示 rw-r--r--</span></span><br><span class="line"><span class="built_in">chmod</span> 644 afile</span><br></pre></td></tr></table></figure>

<h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><blockquote>
<p>更改属主、属组</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> user1:group1 afile.txt</span><br></pre></td></tr></table></figure>

<h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><ul>
<li>SUID：⽤于二进制可执⾏文件，执⾏命令时取文件属主权限</li>
<li>SGID：⽤于目录，在该⽬录下创建新的⽂件和⽬录，权限自动更改为该目录的属组</li>
<li>SBIT：⽤于目录，该目录下新建的文件和目录，仅 root 和⾃己可以删除</li>
</ul>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="⽹络状态查看"><a href="#⽹络状态查看" class="headerlink" title="⽹络状态查看"></a>⽹络状态查看</h4><p>net-tools</p>
<ul>
<li>ifconfig</li>
<li>route</li>
<li>netstat</li>
</ul>
<p>iproute</p>
<ul>
<li>ip</li>
<li>ss</li>
</ul>
<p>ifconfig</p>
<p>eth0第一块网卡(网络接口). 你的第一个网络接口可能叫做下面的名字  eno1板载网卡</p>
<ul>
<li>ens33 PCI-E网卡</li>
<li>enp0s3 无法获取物理信息的PCI-E网卡</li>
<li>CentOS 7使用了- -致性网络设备命名，以上都不匹配则使用eth0</li>
</ul>
<h4 id="⽹络配置"><a href="#⽹络配置" class="headerlink" title="⽹络配置"></a>⽹络配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig &lt;接口&gt; &lt;IP地址&gt; [netmask 子网掩码]</span><br><span class="line">ifup &lt;接口&gt;</span><br><span class="line">ifdown &lt;接口&gt;</span><br></pre></td></tr></table></figure>

<h4 id="路由命令"><a href="#路由命令" class="headerlink" title="路由命令"></a>路由命令</h4><p>添加网关</p>
<ul>
<li>route add default gw &lt;网关ip&gt;</li>
<li>route add -host &lt;指定ip&gt; gw &lt;网关ip&gt;</li>
<li>route add -net &lt; &lt;指定网段&gt; netmask &lt;子网掩码&gt; gw &lt;网关ip&gt;</li>
</ul>
<h4 id="⽹络故障排除"><a href="#⽹络故障排除" class="headerlink" title="⽹络故障排除"></a>⽹络故障排除</h4><ul>
<li>ping</li>
<li>traceroute</li>
<li>mtr</li>
<li>nslookup</li>
<li>telnet</li>
<li>tcpdump</li>
<li>netstat</li>
<li>SS</li>
</ul>
<h4 id="⽹络服务管理"><a href="#⽹络服务管理" class="headerlink" title="⽹络服务管理"></a>⽹络服务管理</h4><p>网络服务管理程序分为两种，分别为SysV和systemd</p>
<ul>
<li>service network startlstoplrestart</li>
<li>chkconfig -list network</li>
<li>systemctl list-unit-files NetworkManager.service</li>
<li>systemctl startlstoplrestart NetworkManger</li>
<li>systemctl enableldisable NetworkManger</li>
</ul>
<h4 id="常用⽹络配置文件"><a href="#常用⽹络配置文件" class="headerlink" title="常用⽹络配置文件"></a>常用⽹络配置文件</h4><ul>
<li>ifcfg-eth0</li>
<li>&#x2F;etc&#x2F;hosts</li>
</ul>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h4><p>包管理器是方便软件安装、卸载，解决软件依赖关系的重要工具</p>
<ul>
<li>CentOS、RedHat使用yum包管理器，软件安装包格式为rpm</li>
<li>Debian、 Ubuntu使用apt包管理器， 软件安装包格式为deb</li>
</ul>
<h4 id="rpm包和rpm命令"><a href="#rpm包和rpm命令" class="headerlink" title="rpm包和rpm命令"></a>rpm包和rpm命令</h4><p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200821154942.png" alt="image-20200821154942269"></p>
<table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>rpm</td>
<td><code>-q</code> 查询软件包</td>
</tr>
<tr>
<td></td>
<td><code>-i</code> 安装软件包</td>
</tr>
<tr>
<td></td>
<td><code>-e</code> 卸载软件包</td>
</tr>
</tbody></table>
<h4 id="yum仓库"><a href="#yum仓库" class="headerlink" title="yum仓库"></a>yum仓库</h4><blockquote>
<p><code>rpm</code> 需要自己解决依赖关系，软件包来源不可靠，所以出现了<code>yum</code></p>
</blockquote>
<h5 id="yum-更改源"><a href="#yum-更改源" class="headerlink" title="yum 更改源"></a>yum 更改源</h5><ol>
<li>备份</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;</li>
</ol>
<p><strong>CentOS 6</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>

<p><strong>CentOS 7</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p><strong>CentOS 8</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行 yum makecache 生成缓存</li>
</ol>
<h5 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h5><table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>yum</td>
<td><code>install</code> 安装软件包</td>
</tr>
<tr>
<td></td>
<td><code>remove</code> 卸载软件包</td>
</tr>
<tr>
<td></td>
<td>&#96;list</td>
</tr>
<tr>
<td></td>
<td><code>update</code> 升级软件包</td>
</tr>
</tbody></table>
<h4 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h4><table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>uname -r</code></td>
<td>查看内核版本</td>
</tr>
<tr>
<td><code>yum install kernel-3.10.0</code></td>
<td>升级内核版本</td>
</tr>
<tr>
<td><code>yum update</code></td>
<td>升级已安装的其他软件包和补丁</td>
</tr>
</tbody></table>
<h4 id="grub-配置文件"><a href="#grub-配置文件" class="headerlink" title="grub 配置文件"></a>grub 配置文件</h4><ul>
<li><p>grub 配置文件</p>
<ul>
<li>&#x2F;etc&#x2F;default&#x2F;grub</li>
<li>&#x2F;etc&#x2F;grub.d&#x2F;</li>
<li>&#x2F;boot&#x2F;grub2&#x2F;grub.cfg</li>
<li>grub2-mkconfig -0 &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</li>
</ul>
</li>
<li><p>使用单用户进入系统(忘记root密码)</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200821160012.png" alt="image-20200821160012669"></p>
<ul>
<li><p>第一步，开机时选择内核这里选择合适的内核，光标停留，按 <code>e</code> 选择</p>
</li>
<li><p>第二步，修改 <code>grub</code> 启动信息。（光标后的信息是没有的，需要自己手动添加，centos6 为 <code>single</code>，centos7.8 <code>rd.break</code>），然后按照指示 <code>ctrl+x</code> 来启动</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200821160321.png" alt="image-20200821160321084"></p>
</li>
<li><p>启动后执行一下命令，重新挂载一下根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>继续执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chroot</span> /sysroot</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以修改密码了(<code>password</code> 为修改后的密码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> password | passwd --stdin root</span><br></pre></td></tr></table></figure>
</li>
<li><p>可能还会有SELinux进行监测，暂时性关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200821161107.png" alt="image-20200821161107110"></p>
<p>设置为 <code>SELINUX=disabled</code></p>
</li>
<li><p>然后退出重启就可以按照刚才设置的root用户进行登录了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">rebooot</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><blockquote>
<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p>
<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>
<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>
</blockquote>
<p>查看 <code>shell</code> 类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>

<h3 id="Linux-引导过程"><a href="#Linux-引导过程" class="headerlink" title="Linux 引导过程"></a>Linux 引导过程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BIOS -&gt; MBR -&gt; BootLoader(grub) -&gt; kernel -&gt; systemd(initd) -&gt; 系统初始化 -&gt; shell</span><br></pre></td></tr></table></figure>

<h3 id="shell-脚本格式"><a href="#shell-脚本格式" class="headerlink" title="shell 脚本格式"></a>shell 脚本格式</h3><ul>
<li>UNIX 哲学：一条命令只做一件事</li>
<li>为了组合命令和多次执行，使用脚本文件来保存需要执行的命令</li>
<li>赋予该文件执行权限（chmod u+rx filename）<ul>
<li>二进制文件 给个 x 权限（可执行）即可</li>
<li>shell 脚本需要 rx 权限（可读可执行）</li>
</ul>
</li>
<li><code>shell</code> 文件后缀为 <code>.sh</code></li>
<li><code>#</code> 开头为注释 <code>#!/bin/bash</code> 开头表示使用 <code>bash</code> 执行脚本</li>
</ul>
<h3 id="管道与重定向"><a href="#管道与重定向" class="headerlink" title="管道与重定向"></a>管道与重定向</h3><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p><code>|</code> : 讲两个命令分隔开，将前一个的输出传入到第二个命令的输入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找当前文件夹内的 .txt 后缀的文件</span></span><br><span class="line"><span class="built_in">ls</span> -l | grep .txt</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>输入重定向 <code>&lt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 text.txt 文件内的内容赋值给 var 变量</span></span><br><span class="line"><span class="built_in">read</span> var &lt; text.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过本命令查看是否赋值成功</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure>

<p>输出重定向 <code>&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 123 输出到 a.txt 文件内</span></span><br><span class="line"><span class="built_in">echo</span> 123 &gt; a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 123 追加到 a.txt 文件内</span></span><br><span class="line"><span class="built_in">echo</span> 123 &gt;&gt; a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 错误内容 输出到 a.txt</span></span><br><span class="line">ak 2&gt; a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无论正确还是错误，都输出到 a.txt</span></span><br><span class="line"><span class="built_in">ls</span> -l &amp;&gt; a.txt</span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul>
<li>字母、数字、下划线</li>
<li>不能以数字开头</li>
</ul>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><ul>
<li>变量名&#x3D;变量值</li>
<li>计算赋值<code>let a=10+20</code></li>
<li>将命令赋值给变量 <code>l=ls</code></li>
<li>将命令结果赋值给变量 <code>letc=$(ls -l /etc)</code></li>
</ul>
<h4 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h4><ul>
<li><code>$&#123;变量名&#125;</code></li>
<li><code>echo $&#123;变量名&#125;</code></li>
<li>省略写法为 <code>$变量名</code></li>
</ul>
<h4 id="变量的引用范围"><a href="#变量的引用范围" class="headerlink" title="变量的引用范围"></a>变量的引用范围</h4><blockquote>
<p>只在当前进程生效，不回影响到别的进程，巧用 source,  bash…</p>
</blockquote>
<ul>
<li>导出变量 <code>export</code></li>
<li>删除变量 <code>unset</code></li>
</ul>
<h4 id="环境变量、预定义变量与位置变量"><a href="#环境变量、预定义变量与位置变量" class="headerlink" title="环境变量、预定义变量与位置变量"></a>环境变量、预定义变量与位置变量</h4><ul>
<li>$PATH 命令索引</li>
<li>获取命令运行参数 $0 $1…</li>
</ul>
<h4 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h4><ul>
<li>&#x2F;etc&#x2F;profile</li>
<li>&#x2F;etc&#x2F;profile.d&#x2F;</li>
<li>~&#x2F;.bash_profile</li>
<li>~&#x2F;.bashrc</li>
<li>&#x2F;etc&#x2F;bashrc</li>
</ul>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li>定义数组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipts=(10.0.0.1 10.0.0.2 10.0.0.3)</span><br></pre></td></tr></table></figure>

<ul>
<li>显示数组所有元素</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ipts[@]&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>显示数组元素个数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#ipts[@]&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>显示数组的第一个元素</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ipts[0]&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="转义和引用"><a href="#转义和引用" class="headerlink" title="转义和引用"></a>转义和引用</h4><blockquote>
<p>一个字符不仅有字面意义，还有元意(meta-meaning)</p>
</blockquote>
<ul>
<li><code>#</code> 注释</li>
<li><code>;</code> 分号</li>
<li><code>\</code> 转义符号（<code>\r \n \t \$ \\ ...</code>）</li>
<li><code>&quot;</code> （完全引用，解释变量）和 <code>&#39; </code> 引号（不完全引用，不解释变量）</li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li>赋值运算符 let “变量名&#x3D;变量值” （简化为 双圆括号 <code>(( a=10))</code>）</li>
<li>算数运算符 使用 <code>expr 4 + 5（只支持整数）</code></li>
<li>数字常量： 0开头八进制，0x十六进制</li>
</ul>
<h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pwY3I5ODdpL2Jhc2gtc2ltcGxlLWd1aWRlLWNoaW5lc2U=">bash-simple-guide-chinese<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 使用技巧</title>
    <url>/posts/df1211e8/</url>
    <content><![CDATA[<p>快捷键</p>
<ul>
<li>brew</li>
<li>iterm2</li>
<li>mac</li>
</ul>
<hr>
<span id="more"></span>



<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><blockquote>
<p>mac 下软件管理工具，类似node的npm，python的pip，，，</p>
</blockquote>
<h3 id="安装-node-v12"><a href="#安装-node-v12" class="headerlink" title="安装 node-v12"></a>安装 <code>node-v12</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node@12</span><br></pre></td></tr></table></figure>

<h3 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 <code>iterm2</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure>



<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyNjI0ODk4L2Fuc3dlci8yMjc4MjE0NA==">引用<i class="fa fa-external-link-alt"></i></span></p>
<p><code>brew install </code> ，前者是是从下载源码解压然后 .&#x2F;configure &amp;&amp; make install ，同时会包含相关依存库。并自动配置好各种环境变量，而且易于卸载。</p>
<p> <code>brew cask install</code> ，是已经编译好的包，只需要下载解压放在统一的目录中（&#x2F;opt&#x2F;homebrew-cask&#x2F;Caskroom）</p>
</blockquote>
<h3 id="搜索软件"><a href="#搜索软件" class="headerlink" title="搜索软件"></a>搜索软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search node</span><br></pre></td></tr></table></figure>



<h3 id="brew-services"><a href="#brew-services" class="headerlink" title="brew services"></a>brew services</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">sudo</span>] brew services [list]:</span><br><span class="line">		列出当前用户的所有服务。</span><br><span class="line"></span><br><span class="line">[<span class="built_in">sudo</span>] brew services run (formula|--all):</span><br><span class="line">		运行没有注册启动的服务。</span><br><span class="line"></span><br><span class="line">[<span class="built_in">sudo</span>] brew services start (formula|--all):</span><br><span class="line">		启动服务</span><br><span class="line"></span><br><span class="line">[<span class="built_in">sudo</span>] brew services stop (formula|--all):</span><br><span class="line">    关闭服务</span><br><span class="line"></span><br><span class="line">[<span class="built_in">sudo</span>] brew services restart (formula|--all):</span><br><span class="line">    重启服务</span><br><span class="line"></span><br><span class="line">[<span class="built_in">sudo</span>] brew services cleanup:</span><br><span class="line">    移除所有未使用的服务。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="iterm2快捷键"><a href="#iterm2快捷键" class="headerlink" title="iterm2快捷键"></a>iterm2快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Control + U</td>
<td>清空当前行</td>
</tr>
<tr>
<td>Control + Y</td>
<td>恢复当前行</td>
</tr>
<tr>
<td>Control + A</td>
<td>光标置于当前行首</td>
</tr>
<tr>
<td>Control + E</td>
<td>光标置于当前行尾</td>
</tr>
<tr>
<td>Control + W</td>
<td>删除光标前的内容</td>
</tr>
<tr>
<td>Control + K</td>
<td>删除光标后的内容</td>
</tr>
<tr>
<td>CMD + T</td>
<td>打开一个新窗口</td>
</tr>
<tr>
<td>CMD + W</td>
<td>关闭当前窗口</td>
</tr>
</tbody></table>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><blockquote>
<p>只整理了个人常用的快捷键，其他还请查看文档。</p>
</blockquote>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>:q</td>
<td>退出</td>
</tr>
<tr>
<td>:q!</td>
<td>忽略更改退出</td>
</tr>
<tr>
<td>:wq</td>
<td>保存退出</td>
</tr>
<tr>
<td>A</td>
<td>在光标所在行尾开始插入</td>
</tr>
<tr>
<td>I</td>
<td>在光标所在行头开始插入</td>
</tr>
<tr>
<td>dd</td>
<td>删除当前行</td>
</tr>
<tr>
<td>u</td>
<td>撤销修改</td>
</tr>
<tr>
<td>ctrl+R</td>
<td>重做</td>
</tr>
<tr>
<td>上下左右</td>
<td>k,j,h,l</td>
</tr>
<tr>
<td>0,  <code>&lt;Home&gt;</code></td>
<td>行首</td>
</tr>
<tr>
<td>$, <code>&lt;End&gt;</code></td>
<td>行尾</td>
</tr>
<tr>
<td>i</td>
<td>输入模式</td>
</tr>
<tr>
<td>yy</td>
<td>复制当前行</td>
</tr>
<tr>
<td>p</td>
<td>粘贴</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
</tbody></table>
<h2 id="mac快捷键"><a href="#mac快捷键" class="headerlink" title="mac快捷键"></a>mac快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Control + command + D</td>
<td>查询</td>
</tr>
<tr>
<td>command + Q</td>
<td>退出当前软件</td>
</tr>
<tr>
<td>command + Shift + .</td>
<td>显示&#x2F;隐藏 隐藏文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>brew</tag>
        <tag>iterm2</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell 常用命令</title>
    <url>/posts/50e64c9a/</url>
    <content><![CDATA[<p>开启管理员模式</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> powershell <span class="literal">-verb</span> runAs</span><br></pre></td></tr></table></figure>

<p>删除文件夹</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-r</span> <span class="operator">-f</span> [文件夹名称]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>react+antd 项目笔记</title>
    <url>/posts/e6509c17/</url>
    <content><![CDATA[<blockquote>
<p><strong>Atwood 定律</strong></p>
<p>Any application that can be written in JavaScript, will eventually be written in JavaScript. （任何能够用JavaScript实现的应用，最终都必将由JavaScript实现。） – Jeff Atwood</p>
</blockquote>
<p>记录react学习进程，以及使用 <code>antd</code> 和 <code>react</code> 写 <code>demo</code> 时候遇到的问题。</p>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvb2ZvLW1zL3RyZWUvb2ZvLW1zLWpz">https://github.com/popring/ofo-ms/tree/ofo-ms-js<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>

<blockquote>
<p>记录学习React心路历程，以及开发过程中遇到的疑难杂症</p>
</blockquote>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="React-生命周期（按顺序从上往下）"><a href="#React-生命周期（按顺序从上往下）" class="headerlink" title="React 生命周期（按顺序从上往下）"></a><span class="exturl" data-url="aHR0cDovL3Byb2plY3RzLndvanRla21hai5wbC9yZWFjdC1saWZlY3ljbGUtbWV0aG9kcy1kaWFncmFtLw==">React 生命周期<i class="fa fa-external-link-alt"></i></span>（按顺序从上往下）</h2><h3 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h3><table>
<thead>
<tr>
<th>lifecycle name</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>constructor</td>
<td>react 组件挂载前会调用它的构造函数</td>
</tr>
<tr>
<td>componentWillMount</td>
<td><em><strong>过时</strong></em>，挂载前调用</td>
</tr>
<tr>
<td>render</td>
<td>class组件中唯一必须实现的方法，最好为纯函数，代码更加简洁易懂</td>
</tr>
<tr>
<td>componentDidMount</td>
<td>组件挂载后调用</td>
</tr>
</tbody></table>
<h3 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h3><table>
<thead>
<tr>
<th>lifecycle name</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>componentWillReceiveProps&#96;</td>
<td><em><strong>过时</strong></em>，在已挂载的组件接收新的props之前被调用</td>
</tr>
<tr>
<td>shouldComponentUpdate(nextProps, nextState)</td>
<td>根据此函数的返回值判断 React 组件的输出是否受当前 state 或 props 更改的影响，默认为<code>true</code>， <code>state</code> 或 <code>props</code> 更新时是否需要重新渲染视图</td>
</tr>
<tr>
<td>componentWillUpdate</td>
<td><strong>过时</strong>，当组件接收新的props或state时，会在渲染之前调用</td>
</tr>
<tr>
<td>componentDidUpdate(preveProps, prevState, snapshot)</td>
<td>组件更新后调用，首先渲染不会被调用</td>
</tr>
</tbody></table>
<h3 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h3><table>
<thead>
<tr>
<th>lifecycle name</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>componentWillUnmount</td>
<td>组件卸载及销毁前调用，此方法中执行必要的清除操作（例如：清除定时器，取消网络请求，清除在 <code>componentDidMount()</code> 中创建的订阅）</td>
</tr>
</tbody></table>
<h2 id="组件内部的函数-this-指向问题"><a href="#组件内部的函数-this-指向问题" class="headerlink" title="组件内部的函数 this 指向问题"></a>组件内部的函数 <code>this</code> 指向问题</h2><blockquote>
<p>多半刚入门 <code>react</code> 的新手都会遇到这个问题，组件内函数this<a href=""><strong>的指向问题</strong></a></p>
</blockquote>
<p><strong>React组件</strong>中函数<strong>不能</strong>直接这么写，调用的时候使用<strong>setState</strong>会有问题，需要解决this指向问题</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleBindClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决1, 绑定this指向</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleBindClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleBindClick.bind(this)&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决2, 直接使用箭头函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleBindClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleBindClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>状态管理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 可以在这里定义</span></span><br><span class="line">  state = &#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="comment">// 也可以在这里定义</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改状态</p>
<ul>
<li>不要直接修改 <code>state</code> ，使用 <code>this.setState()</code></li>
<li><code>state</code> 可能是异步的</li>
</ul>
<h2 id="React父子之间相互调用"><a href="#React父子之间相互调用" class="headerlink" title="React父子之间相互调用"></a>React父子之间相互调用</h2><h3 id="父子间数据传递"><a href="#父子间数据传递" class="headerlink" title="父子间数据传递"></a>父子间数据传递</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><blockquote>
<p>父组件发生变化，值传入子组件，从而重新渲染</p>
<p>子组件接收的为一个值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// 输出父组件传过来的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>子组件 --- &#123;this.props.flag&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  	);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">flag</span>: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">flag</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">flag</span> + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      	<span class="tag">&lt;<span class="name">Children</span> <span class="attr">flag</span>=<span class="string">&#123;this.state.flag&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><blockquote>
<p>父组件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">   <span class="attr">flag</span>: <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flag = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">flag</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      flag</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">fn</span>(flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击flag加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">flag</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn = <span class="function">(<span class="params">cflag</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">flag</span>: cflag</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">fn</span>=<span class="string">&#123;this.fn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是父组件.显示子组件flag值： &#123;this.state.flag&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: 这样也有明显的缺点，如果父子间传值层数或者值过多，这个方法显然过于麻烦，因此 <code>React</code> 官方给出了解决方法。 <a href="#Context">Context</a></p>
</blockquote>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><h4 id="父调用子方法"><a href="#父调用子方法" class="headerlink" title="父调用子方法"></a>父调用子方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">          <span class="variable language_">super</span>();</span><br><span class="line">          props.<span class="title function_">onRef</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用了子组件的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">        handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">child</span>.<span class="title function_">handleClick</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Children</span> <span class="attr">onRef</span>=<span class="string">&#123;ref</span> =&gt;</span> (this.child = ref)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="子调用父方法"><a href="#子调用父方法" class="headerlink" title="子调用父方法"></a>子调用父方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">handleClick</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用了父组件的方法&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>这是父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">handleClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote>
<p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = <span class="title class_">MyContext</span>;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件组件显示父组件flag值 &#123;this.context&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">flag</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flag = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">flag</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      flag</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.flag&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件 flag值 &#123;this.state.flag&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击flag加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h2><blockquote>
<p>单组件返回多个元素，解决不需要根节点包裹的情况。</p>
</blockquote>
<p>段语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Columns</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>World<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置相对路径"><a href="#配置相对路径" class="headerlink" title="配置相对路径"></a>配置相对路径</h2><blockquote>
<p>配置后 **@**表示根目录下的 <strong>src</strong>路径，配置  <code>jsconfig</code> 后 <code>vscode</code> 提示更加友好</p>
</blockquote>
<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">	<span class="comment">//...,</span></span><br><span class="line">	<span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>jsconfig.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9sYW5ndWFnZXMvanNjb25maWc=">jsconfig 配置详情<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h1><h3 id="异步延时函数"><a href="#异步延时函数" class="headerlink" title="异步延时函数"></a>异步延时函数</h3><blockquote>
<p>setTimeout 会被加入异步队列，需使用promise来解决</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAyMTAyODM3NQ==">为此还专门在思否提问<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">delayer</span>(<span class="params">time = <span class="number">2000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delayer</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="对象的操作"><a href="#对象的操作" class="headerlink" title="对象的操作"></a>对象的操作</h2><h3 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h3><p>假设</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj2 = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="number">44</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将对象 <code>obj2</code> 属性的值赋值到 <code>obj1</code>中的属性 ，相同的属性覆盖，但<strong>不修改</strong><code>obj1</code>的其他值。俗称，浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1,obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用ES6语法，更简单</span></span><br><span class="line">obj1 = &#123; ...obj1, ...obj2&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="判断对象中是否含有某个属性"><a href="#判断对象中是否含有某个属性" class="headerlink" title="判断对象中是否含有某个属性"></a>判断对象中是否含有某个属性</h3><p>仍以上面两个对象为例，则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// true</span></span><br><span class="line">obj1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">obj2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="过滤对象属性"><a href="#过滤对象属性" class="headerlink" title="过滤对象属性"></a>过滤对象属性</h3><blockquote>
<p>props: 原对象</p>
<p>arr: 需要过滤掉的键</p>
<p>newProps: 过滤后剩下的键值组成的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">  <span class="attr">onRef</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">apiGetList</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="attr">post</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">ok</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">  <span class="attr">omg</span>: <span class="string">&quot;111&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;onRef&quot;</span>, <span class="string">&quot;apiGetList&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> newProps = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(props)</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !arr.<span class="title function_">includes</span>(item))</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  newProps[key] = props[key];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newProps);</span><br><span class="line"><span class="comment">// &#123;post: 3, ok: &quot;ok&quot;, omg: &quot;111&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>操作函数拆分解释</p>
<p><strong>Object.keys(obj)</strong></p>
<p>返回 由 <strong>obj</strong> 的<strong>键</strong>组成的数组</p>
<p><strong>Array.prototype.filter</strong></p>
<p>数组过滤的方法，传入的函数中的返回值为 true 则过滤，为 false 则留下。返回一个新数组，不会改变原数组。</p>
<p><strong>Array.prototype.includes()</strong></p>
<p>判断数组内是否包含指定的值。包含返回 true，反之 fales。</p>
<p><strong>forEach</strong></p>
<p>遍历对象和数组。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>antd</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>react-ts 重构笔记</title>
    <url>/posts/dffba461/</url>
    <content><![CDATA[<p>先前的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvb2ZvLW1zL3RyZWUvb2ZvLW1zLWpz">小黄车后台管理系统<i class="fa fa-external-link-alt"></i></span> ，开发完成后，现看来，目录过于复杂，代码冗余，对强迫症的我来说，实属看不下去了，趁着过年有时间，使用 ts 进行了重构，并在之前的基础上对 <code>react </code> 和 <code>typescript</code> 有了进一步的理解。</p>
<p>参考了 github 的开源项目 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3llemloYW9oYW8vcmVhY3QtYWRtaW4=">react-admin<i class="fa fa-external-link-alt"></i></span>，感谢大佬的代码，给了很多灵感。</p>
<span id="more"></span>

<h2 id="create-react-app-自定义配置"><a href="#create-react-app-自定义配置" class="headerlink" title="create-react-app 自定义配置"></a><a href="%5Bhttps://ant.design/docs/react/use-with-create-react-app-cn#%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE%5D(https://ant.design/docs/react/use-with-create-react-app-cn#%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE)">create-react-app 自定义配置</a></h2><blockquote>
<p>类似 <code>vue</code> 中的 <code>vue.config.js</code></p>
</blockquote>
<p>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbWFybmV5L3JlYWN0LWFwcC1yZXdpcmVk">react-app-rewired<i class="fa fa-external-link-alt"></i></span> 进行自定义配置，需要依赖  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FyYWNrYWYvY3VzdG9taXplLWNyYQ==">customize-cra<i class="fa fa-external-link-alt"></i></span> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra</span><br></pre></td></tr></table></figure>

<p>修改运行配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app eject&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>项目根目录创建 <code>config-override.js</code> 修改配置</p>
<h3 id="配置别名路径"><a href="#配置别名路径" class="headerlink" title="配置别名路径"></a>配置别名路径</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config-override.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; override, addWebpackAlias &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">override</span>(</span><br><span class="line">  <span class="title function_">addWebpackAlias</span>(&#123;</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;components&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/components&#x27;</span>),</span><br><span class="line">    <span class="string">&quot;router&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/router&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig-中配置别名（alias）"><a href="#tsconfig-中配置别名（alias）" class="headerlink" title="tsconfig 中配置别名（alias）"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svdHNjb25maWctanNvbi5odG1s">tsconfig<i class="fa fa-external-link-alt"></i></span> 中配置别名（alias）</h3><blockquote>
<p>webpack 配置 alias后，再配置tsconfig，vscode对应提示会更加友好</p>
</blockquote>
<p>如果在<code>tsconfig.json</code>中定义别名、路径，项目启动后会被删除 <code>paths</code>节点</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHAvaXNzdWVzLzU2NDUjaXNzdWVjb21tZW50LTQzNjYxMzc0MA==">github 大佬解决办法<i class="fa fa-external-link-alt"></i></span></p>
<p><code>paths.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;svg/*&quot;: [&quot;src/svg/*&quot;],</span><br><span class="line">      &quot;components/*&quot;: [&quot;src/components/*&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>in <code>tsconfig.json</code> I have</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;./paths.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ts-的使用"><a href="#ts-的使用" class="headerlink" title="ts 的使用"></a>ts 的使用</h2><h3 id="react-模板继承-Componet的类型"><a href="#react-模板继承-Componet的类型" class="headerlink" title="react 模板继承  Componet的类型"></a>react 模板继承  Componet的类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">Props</span>, state&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>;</span><br></pre></td></tr></table></figure>

<h3 id="定义对象索引"><a href="#定义对象索引" class="headerlink" title="定义对象索引"></a>定义对象索引</h3><p><span class="exturl" data-url="aHR0cHM6Ly9qa2NoYW8uZ2l0aHViLmlvL3R5cGVzY3JpcHQtYm9vay1jaGluZXNlL3R5cGluZ3MvaW5kZXhTaWduYXR1cmVzLmh0bWwjJUU3JUI0JUEyJUU1JUJDJTk1JUU3JUFEJUJFJUU1JTkwJThE">索引签名<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qa2NoYW8uZ2l0aHViLmlvL3R5cGVzY3JpcHQtYm9vay1jaGluZXNlL3R5cGluZ3MvaW5kZXhTaWduYXR1cmVzLmh0bWwjJUU0JUJEJUJGJUU3JTk0JUE4JUU0JUI4JTgwJUU3JUJCJTg0JUU2JTlDJTg5JUU5JTk5JTkwJUU3JTlBJTg0JUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIyJUU1JUFEJTk3JUU5JTlEJUEyJUU5JTg3JThG">文章<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Index</span> = <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;error&#x27;</span> | <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span> | <span class="string">&#x27;loading&#x27;</span>;</span><br><span class="line">type messageType = &#123; [k <span class="keyword">in</span> <span class="title class_">Index</span>]: string &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">(<span class="params">a: messageType</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="antd-使用-Form-高阶组件"><a href="#antd-使用-Form-高阶组件" class="headerlink" title="antd 使用 Form 高阶组件"></a>antd 使用 Form 高阶组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BaseFormProps 为 BaseForm 所定义的Props</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Form</span>.<span class="property">create</span>&lt;<span class="title class_">BaseFormProps</span>&gt;()(<span class="title class_">BaseForm</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><blockquote>
<p>普通  function 无状态，class 有状态</p>
<p><code>Hook</code> 的出现，在不编写 class 的情况下使用 react 的其他特性。</p>
</blockquote>
<h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><blockquote>
<p>简化 <code>state</code> 的使用方式</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count+1)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><blockquote>
<p>useEffect 相当于 <code>react class</code> 生命周期函数的  componentDidMount，componentDidUpdate 和 componentWillUnmount  三合一版本</p>
</blockquote>
<p>useEffect() 内返回一个函数，用于防止内存泄漏，清除定时器、订阅外部数据源等。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  useEffect = (<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// xxx</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">clearup</span>(<span class="params"></span>)&#123; </span><br><span class="line">      <span class="comment">/*xxx*/</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [input])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count+1)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;useState, useEffect, useContext&#125; = <span class="title class_">React</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Children</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> flag = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;flag&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;flag&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> setFlag(flag+1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;flag&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Children</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="项目的总结"><a href="#项目的总结" class="headerlink" title="项目的总结"></a>项目的总结</h2><p>为了路由更好的配置和管理，修改为类似 <code>vue-router</code> 的配置，遍历动态生成路由，还可进行鉴权。</p>
<p>如果有官网，一定要去看完官网再看二手知识，毕竟大家水平残次不齐，尤为像我一样的新手无法鉴别文章是否有误，而官网的文档，就没这么多担忧了。虽然很多都是英文文档，坚持看下去，会有不一样的收获。</p>
<p><code>Typescript</code> 刚开始用起来确实有点繁琐，不过用过一段时间，潜移默化的感觉到会对项目有更深入的了解，当然数据类型检查啥的，降低了项目的出错率，以后的代码维护也会轻松许多。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3llemloYW9oYW8vcmVhY3QtYWRtaW4=">react-admin<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvdXNlLXdpdGgtY3JlYXRlLXJlYWN0LWFwcC1jbg==">antd<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvaG9va3MtaW50cm8uaHRtbA==">React Hook<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>scrollTop值为0等疑难杂症</title>
    <url>/posts/e6bf74e4/</url>
    <content><![CDATA[<p> 自测有效果</p>
<p>IE: <code>document.documentElement.scrollTop</code></p>
<p>edge: <code>document.body.scrollTop</code></p>
<p>Firefox: <code>document.documentElement.scrollTop</code></p>
<span id="more"></span>

<p><strong>IE6&#x2F;7&#x2F;8&#x2F;9&#x2F;10：</strong></p>
<p>对于没有doctype声明的页面里可以使用 document.body.scrollTop 来获取 scrollTop高度 ；<br>对于有<code>doctype</code>声明的页面则可以使用 <code>document.documentElement.scrollTop</code> ；</p>
<p><strong>Safari:</strong></p>
<p>safari 比较特别，有自己获取<code>scrollTop</code>的函数 ： <code>window.pageYOffset</code> ；</p>
<p><strong>Firefox:</strong></p>
<p>火狐等等相对标准些的浏览器就省心多了，直接用 document.documentElement.scrollTop</p>
<p><strong>chrome</strong></p>
<p><code>document.body.scrollTop</code></p>
<p>or</p>
<p><code>document.documentElement.scrollTop</code></p>
<p><strong>总结，一行代码解决兼容性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sTop=<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>+<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器兼容性</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO 优化</title>
    <url>/posts/e092deb0/</url>
    <content><![CDATA[<p><code>ahrefs</code> 的 <code>SEO</code> 系列文章讲的挺好，推荐</p>
<p>英文：<span class="exturl" data-url="aHR0cHM6Ly9haHJlZnMuY29tL2Jsb2cvaG93LWRvLXNlYXJjaC1lbmdpbmVzLXdvcmsv">https://ahrefs.com/blog/how-do-search-engines-work/<i class="fa fa-external-link-alt"></i></span></p>
<p>中文：<span class="exturl" data-url="aHR0cHM6Ly9haHJlZnMuY29tL2Jsb2cvemgvaG93LWRvLXNlYXJjaC1lbmdpbmVzLXdvcmsv">https://ahrefs.com/blog/zh/how-do-search-engines-work/<i class="fa fa-external-link-alt"></i></span></p>
<p>google 文档：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2VhcmNoL2RvY3MvZnVuZGFtZW50YWxzL3Nlby1zdGFydGVyLWd1aWRlP2hsPXpoLWNu">https://developers.google.com/search/docs/fundamentals/seo-starter-guide?hl=zh-cn<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>

<p>常用网站：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS93ZWxjb21lP2hsPXpoLWNu">Google Search Console<i class="fa fa-external-link-alt"></i></span>：Google 官方的 <code>SEO</code> 工具</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tL3Byb3BlcnR5L2luZGV4">百度站长平台<i class="fa fa-external-link-alt"></i></span>：百度官方的 <code>SEO</code> 工具，可以查看网站的 <code>SEO</code> 状态，关键词排名，竞争对手等。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycy9zZWFyY2hwZXJm">Bing Webmasters<i class="fa fa-external-link-alt"></i></span>：Bing 官方的 <code>SEO</code> 工具，可以查看网站的 <code>SEO</code> 状态，关键词排名，竞争对手等。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9haXRkay5jb20vemg=">aitdk<i class="fa fa-external-link-alt"></i></span>： 插件，可以查看网站的 <code>SEO</code> 状态，有一些小工具也可以生成更适合的 SEO 标题和描述等。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS9hbmFseXRpY3Mvd2ViLw==">Google Analytics<i class="fa fa-external-link-alt"></i></span>： 查看网站的流量来源，用户行为等。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9haHJlZnMuY29tLw==">Ahrefs<i class="fa fa-external-link-alt"></i></span>： 查看网站的 <code>SEO</code> 状态，关键词排名，竞争对手等，也有一些免费的小工具，比如 <code>Site Audit</code> 可以查看网站的 <code>SEO</code> 状态，<code>Keyword Explorer</code> 可以查看关键词排名，竞争对手等。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC5zZW1ydXNoLmNvbS9wcm9qZWN0cy8=">Semrush<i class="fa fa-external-link-alt"></i></span>：比 <code>Ahrefs</code> 更全面，但是需要付费。</p>
<p>以下是总结的 <code>ahrefs</code> 的 <code>SEO</code> 系列文章，有兴趣的可以看看。</p>
<h2 id="一、搜索引擎工作机制（理解原理）"><a href="#一、搜索引擎工作机制（理解原理）" class="headerlink" title="一、搜索引擎工作机制（理解原理）"></a>一、搜索引擎工作机制（理解原理）</h2><h3 id="1-搜索引擎的三大核心流程"><a href="#1-搜索引擎的三大核心流程" class="headerlink" title="1. 搜索引擎的三大核心流程"></a>1. 搜索引擎的三大核心流程</h3><ul>
<li><strong>抓取（Crawl）</strong>：爬虫程序访问网页并下载内容。</li>
<li><strong>索引（Index）</strong>：处理并存储网页信息，加入搜索索引库。</li>
<li><strong>排序（Rank）</strong>：依据算法决定结果的展示顺序。</li>
</ul>
<p>✅ 实践建议：</p>
<ul>
<li>使用 <code>robots.txt</code> 控制抓取权限。</li>
<li>提交网站地图到 Google Search Console（GSC）。</li>
<li>检查是否有被 noindex 阻止索引的页面。</li>
</ul>
<hr>
<h2 id="二、网站抓取与索引优化"><a href="#二、网站抓取与索引优化" class="headerlink" title="二、网站抓取与索引优化"></a>二、网站抓取与索引优化</h2><h3 id="1-确保页面可被抓取"><a href="#1-确保页面可被抓取" class="headerlink" title="1. 确保页面可被抓取"></a>1. 确保页面可被抓取</h3><ul>
<li>正确配置 robots.txt，不屏蔽重要路径。</li>
<li>使用站内链接和 XML sitemap 引导搜索引擎发现页面。</li>
</ul>
<h3 id="2-页面可渲染"><a href="#2-页面可渲染" class="headerlink" title="2. 页面可渲染"></a>2. 页面可渲染</h3><ul>
<li>避免关键内容依赖 JS 异步加载。</li>
<li>使用服务端渲染（SSR）或预渲染（prerender）技术提升可见性。</li>
</ul>
<p>✅ 检查工具：</p>
<ul>
<li>Google Search Console &gt; URL 检查。</li>
<li>Screaming Frog 或 Ahrefs 抓取报告。</li>
</ul>
<hr>
<h2 id="三、关键词研究（流量来源基础）"><a href="#三、关键词研究（流量来源基础）" class="headerlink" title="三、关键词研究（流量来源基础）"></a>三、关键词研究（流量来源基础）</h2><h3 id="1-关键词选择策略"><a href="#1-关键词选择策略" class="headerlink" title="1. 关键词选择策略"></a>1. 关键词选择策略</h3><ul>
<li><p>确保关键词具有：</p>
<ul>
<li>足够的搜索量（Search Volume）；</li>
<li>明确的搜索意图；</li>
<li>适中的竞争度（Keyword Difficulty）。</li>
</ul>
</li>
</ul>
<h3 id="2-工具推荐"><a href="#2-工具推荐" class="headerlink" title="2. 工具推荐"></a>2. 工具推荐</h3><ul>
<li>Ahrefs、Google Keyword Planner、Ubersuggest。</li>
</ul>
<p>✅ 实践操作：</p>
<ul>
<li>建立关键词清单，分组标记意图（信息型、导航型、交易型）。</li>
<li>针对每个关键词创建单独目标页面。</li>
</ul>
<hr>
<h2 id="四、页面内容优化（On-page-SEO）"><a href="#四、页面内容优化（On-page-SEO）" class="headerlink" title="四、页面内容优化（On-page SEO）"></a>四、页面内容优化（On-page SEO）</h2><h3 id="1-内容结构优化"><a href="#1-内容结构优化" class="headerlink" title="1. 内容结构优化"></a>1. 内容结构优化</h3><ul>
<li>H1 仅出现一次，准确概括页面主题。</li>
<li>合理使用 H2&#x2F;H3 拓展子主题，帮助机器理解内容结构。</li>
</ul>
<h3 id="2-内容匹配用户意图"><a href="#2-内容匹配用户意图" class="headerlink" title="2. 内容匹配用户意图"></a>2. 内容匹配用户意图</h3><ul>
<li>分析 SERP 排名前10内容，确认目标用户意图。</li>
<li>回答用户常见问题、提供明确的解决方案。</li>
</ul>
<h3 id="3-多媒体和辅助元素"><a href="#3-多媒体和辅助元素" class="headerlink" title="3. 多媒体和辅助元素"></a>3. 多媒体和辅助元素</h3><ul>
<li>添加图片并设置描述性文件名和 alt 属性。</li>
<li>使用列表、表格、引用等提升可读性。</li>
</ul>
<p>✅ 检查清单：</p>
<ul>
<li>页面是否包含目标关键词？</li>
<li>是否满足 E-E-A-T（经验、专业性、权威性、可信度）？</li>
</ul>
<hr>
<h2 id="五、URL、标题与元标签优化"><a href="#五、URL、标题与元标签优化" class="headerlink" title="五、URL、标题与元标签优化"></a>五、URL、标题与元标签优化</h2><h3 id="1-URL-优化"><a href="#1-URL-优化" class="headerlink" title="1. URL 优化"></a>1. URL 优化</h3><ul>
<li>简短、有意义、包含关键词，例如 <code>/best-running-shoes</code>。</li>
<li>避免动态参数、无意义数字。</li>
</ul>
<h3 id="2-Title-与-Meta-Description"><a href="#2-Title-与-Meta-Description" class="headerlink" title="2. Title 与 Meta Description"></a>2. Title 与 Meta Description</h3><ul>
<li>Title 控制在 55–60 字符，包含关键词、吸引点击。</li>
<li>Description 用于吸引点击，概述页面内容。</li>
</ul>
<p>✅ 工具推荐：</p>
<ul>
<li>Yoast SEO（WordPress 插件）</li>
<li>Ahrefs &gt; Site Audit &gt; On-page issues</li>
</ul>
<hr>
<h2 id="六、技术-SEO-核心要点"><a href="#六、技术-SEO-核心要点" class="headerlink" title="六、技术 SEO 核心要点"></a>六、技术 SEO 核心要点</h2><h3 id="1-网站结构清晰"><a href="#1-网站结构清晰" class="headerlink" title="1. 网站结构清晰"></a>1. 网站结构清晰</h3><ul>
<li>使用面包屑导航和内部链接构建清晰路径。</li>
<li>控制页面层级，重要页面不超过 3 层。</li>
</ul>
<h3 id="2-页面加载性能"><a href="#2-页面加载性能" class="headerlink" title="2. 页面加载性能"></a>2. 页面加载性能</h3><ul>
<li>图片压缩、启用缓存、使用 CDN。</li>
<li>检查 Core Web Vitals 指标（LCP、CLS、FID）。</li>
</ul>
<h3 id="3-移动适配与-HTTPS"><a href="#3-移动适配与-HTTPS" class="headerlink" title="3. 移动适配与 HTTPS"></a>3. 移动适配与 HTTPS</h3><ul>
<li>实现响应式设计，移动设备体验良好。</li>
<li>网站使用 HTTPS，SSL 证书配置正确。</li>
</ul>
<p>✅ 实践工具：</p>
<ul>
<li>PageSpeed Insights &#x2F; Lighthouse</li>
<li>Mobile-Friendly Test</li>
<li>Ahrefs &gt; Site Audit 报告</li>
</ul>
<hr>
<h2 id="七、用户行为与搜索个性化因素"><a href="#七、用户行为与搜索个性化因素" class="headerlink" title="七、用户行为与搜索个性化因素"></a>七、用户行为与搜索个性化因素</h2><ul>
<li>搜索引擎会基于用户位置、设备、历史行为对结果排序。</li>
<li>需结合用户画像进行内容、关键词、页面设计的差异化适配。</li>
</ul>
<p>✅ 小结建议：</p>
<ul>
<li>针对本地关键词做专页（如 “北京健身房推荐”）。</li>
<li>针对移动用户优化 CTA 按钮、加载速度与可读性。</li>
</ul>
<hr>
<h2 id="🔚-结语：推荐实施路径"><a href="#🔚-结语：推荐实施路径" class="headerlink" title="🔚 结语：推荐实施路径"></a>🔚 结语：推荐实施路径</h2><ol>
<li><strong>诊断</strong>：用 GSC、Ahrefs 做抓取与内容审核。</li>
<li><strong>关键词规划</strong>：提取目标关键词 + 构建内容地图。</li>
<li><strong>页面重构</strong>：优化结构、内容、URL、Meta 标签。</li>
<li><strong>技术增强</strong>：提速、改错、强化移动体验。</li>
<li><strong>持续监测</strong>：通过 GSC + Ahrefs 观察流量、排名、点击率变化。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript总结</title>
    <url>/posts/34845574/</url>
    <content><![CDATA[<h2 id="TypeScript-相关收藏"><a href="#TypeScript-相关收藏" class="headerlink" title="TypeScript 相关收藏"></a>TypeScript 相关收藏</h2><h3 id="入门文章类"><a href="#入门文章类" class="headerlink" title="入门文章类"></a>入门文章类</h3><p><span class="exturl" data-url="aHR0cHM6Ly90cy54Y2F0bGl1LmNvbS8=">TypeScript 入门教程<i class="fa fa-external-link-alt"></i></span>: github 10k star, author xcatliu.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvV3NsZG1rVzJvdnAtb2t4U1kzbGU5Zw==">Typescript 类型编程，从入门到通达<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2ZyZWUtY29kZS1jYW1wL3R5cGVzY3JpcHQtY3VycnktcmFtZGEtdHlwZXMtZjc0N2U5OTc0NGFi">Learn Advanced TypeScript Types<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL3poL2NoZWF0c2hlZXRz">TypeScript Cheat Sheets<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="通关挑战类"><a href="#通关挑战类" class="headerlink" title="通关挑战类"></a>通关挑战类</h3><p><span class="exturl" data-url="aHR0cHM6Ly90eXBlc2NyaXB0LWV4ZXJjaXNlcy5naXRodWIuaW8v">Typescript Exercises<i class="fa fa-external-link-alt"></i></span>：一共16关</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy90eXBlLWZlc3Q=">type-fest<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R5cGUtY2hhbGxlbmdlcy90eXBlLWNoYWxsZW5nZXMv">type-challenges<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly90eXBlaGVyby5kZXYv">typehero<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 笔记</title>
    <url>/posts/bceeaa0d/</url>
    <content><![CDATA[<p><code>vim</code> 神器，依旧宝刀未老，用起来真香。</p>
<span id="more"></span>

<h2 id="i-insert-模式，可以输入文字"><a href="#i-insert-模式，可以输入文字" class="headerlink" title="i insert 模式，可以输入文字"></a><code>i</code> insert 模式，可以输入文字</h2><h2 id="v-visual-模式"><a href="#v-visual-模式" class="headerlink" title="v visual 模式"></a><code>v</code> visual 模式</h2><h2 id="nomal-模式"><a href="#nomal-模式" class="headerlink" title="nomal 模式"></a>nomal 模式</h2><blockquote>
<p>刚打开 vim 是 <code>normal</code> 模式，可以输入指令</p>
</blockquote>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><blockquote>
<p>还可以配合数字使用，例如 <code>5w</code> 表示，光标移至后五个单词的位置。</p>
</blockquote>
<p><code>h</code> 光标左移</p>
<p><code>l</code> 光标右移</p>
<p><code>j</code> 光标下移</p>
<p><code>k</code> 光标上移</p>
<p><code>w</code> 光标移至下一单词的起始位置</p>
<p><code>b</code> 光标移至上一单词的起始位置</p>
<p><code>e</code> 光标移至单词的结束位置</p>
<p><code>0</code> 跳转至当前行开始位置 </p>
<p><code>$</code> 跳转至当前行结束位置</p>
<p><code>%</code> 匹配括号时光标位置切换置另一位置</p>
<p><code>gg</code> 光标切换至顶部</p>
<p><code>G</code> 光标切换至底部</p>
<p><code>number G</code> 光标切换至指定行起始位置(number 为待跳转至的行数，与 <code>G</code> 之间无空格)</p>
<p><code>*</code> 向后查找当前字符</p>
<p><code>#</code> 向前查找当前字符</p>
<p><code>/char</code> 查找指定字符字符串(char 为待查找的字符串) </p>
<p><code>n</code>  查找到指定字符串后，查找下一个</p>
<p><code>N</code>  查找到指定字符串后，查找上一个</p>
<p><code>o</code> 光标下一行插入一行，并且光标定位至下一行</p>
<p><code>O</code> 光标上一行插入一行，并且光标定位至上一行</p>
<p><code>x</code>  删除光标位置字符</p>
<p><code>s char</code> 替换光标位置字符(char 为替换后字符，中间无空格)</p>
<p><code>d command</code> 进入删除指令，结合 <code>w</code> 删除第一个单词。</p>
<p><code>dd</code> 剪切当前行</p>
<p><code>p</code> 粘贴</p>
<p><code>.</code> 重复前一次操作</p>
<p><code>:u</code> 撤回上次操作</p>
<p><code>:set nu</code> 显示行数</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dzZGplZy92aW0tZ2Fsb3JlLXpoX2Nu">Vim 从入门到精通 PDF<i class="fa fa-external-link-alt"></i></span>： 强烈推荐</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3BlbnZpbS5jb20v">openvim<i class="fa fa-external-link-alt"></i></span>： vim 入门教程</p>
<p><span class="exturl" data-url="aHR0cHM6Ly92aW0tYWR2ZW50dXJlcy5jb20v">vim-adventures<i class="fa fa-external-link-alt"></i></span>：vim 入门游戏</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmltb25saW5lZWRpdG9yLmNvbS8=">vimonlineeditor<i class="fa fa-external-link-alt"></i></span>：网页在线vim，本地无环境可尝试使用</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>入门git-笔记</title>
    <url>/posts/ab34e705/</url>
    <content><![CDATA[<blockquote>
<p>官方中文文档 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy">https://git-scm.com/book/zh/v2<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>查看远程仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><ul>
<li>Git是一款源代码管理工具(版本控制工具)<ul>
<li>我们写的代码需要使用Git进行管理。</li>
</ul>
</li>
<li>源代码有必要管理起吗？</li>
<li>1.0</li>
<li>2.0 &#x2F;&#x2F; </li>
<li>svn,vss,vcs…. git</li>
<li>有必要，因为人工的去处理不同的版本，做相应备份会很麻烦。</li>
<li>Git是linux之父当年为了维护linux—linus之前也是手动维护合并把文件发给Linus</li>
<li>linus自己写了一个版本管理的工具(Git)</li>
</ul>
<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h2 id="初始化Git仓储-仓库"><a href="#初始化Git仓储-仓库" class="headerlink" title="初始化Git仓储&#x2F;(仓库)"></a>初始化Git仓储&#x2F;(仓库)</h2><ul>
<li>这个仓库会存放，git对我们项目代码进行备份的文件</li>
<li>在项目目录右键打开 git bash</li>
<li>命令: <code>git init</code></li>
</ul>
<h2 id="自报家门"><a href="#自报家门" class="headerlink" title="自报家门"></a>自报家门</h2><ul>
<li>就是在git中设置当前使用的用户是谁</li>
<li>每一次备份都会把当前备份者的信息存储起来</li>
<li>命令: <ul>
<li>配置用户名:<code>git config --global user.name &quot;xiaoming&quot;</code></li>
<li>配置邮箱:  <code>git config --global user.email &quot;xm@sina.com&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="把大象放到冰箱要几步"><a href="#把大象放到冰箱要几步" class="headerlink" title="把大象放到冰箱要几步"></a>把大象放到冰箱要几步</h2><ol>
<li>打开冰箱门</li>
<li>放大象</li>
<li>关上冰箱</li>
</ol>
<h2 id="把代码存储到-git仓储中"><a href="#把代码存储到-git仓储中" class="headerlink" title="把代码存储到.git仓储中"></a>把代码存储到.git仓储中</h2><ul>
<li>1.把代码放到仓储的门口<ul>
<li><code>git add ./readme.md</code> 所指定的文件放到大门口</li>
<li><code>git add ./</code> 把所有的修改的文件添加到大门口</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>files changed</code> 变更的文件</p>
<p><code>insertions</code> 操作涉及行数</p>
<p><code>deletions</code>删除操作</p>
</blockquote>
<ul>
<li>2.把仓储门口的代码放到里面的房间中去<ul>
<li><code>git commit -m &quot;这是对这次添加的东西的说明&quot; </code></li>
<li>或者 <code>git commit -a -m &#39;提交描述&#39;</code>将代码直接提交 相当于 <code>git add . -&gt; git commit -m &#39;提交描述&#39;</code></li>
</ul>
</li>
</ul>
<h2 id="可以一次性把我们修改的代码放到房间里-版本库"><a href="#可以一次性把我们修改的代码放到房间里-版本库" class="headerlink" title="可以一次性把我们修改的代码放到房间里(版本库)"></a>可以一次性把我们修改的代码放到房间里(版本库)</h2><ul>
<li><code>git commit --all -m &quot;一些说明&quot;</code><ul>
<li>–all 表示是把所有修改的文件提交到版本库</li>
</ul>
</li>
</ul>
<h2 id="查看当前的状态"><a href="#查看当前的状态" class="headerlink" title="查看当前的状态"></a>查看当前的状态</h2><ul>
<li>可以用来查看当前代码有没有被放到仓储中去</li>
<li>命令: <code>git status</code></li>
</ul>
<h2 id="git中的忽略文件"><a href="#git中的忽略文件" class="headerlink" title="git中的忽略文件"></a>git中的忽略文件</h2><ul>
<li>.gitignore,在这个文件中可以设置要被忽略的文件或者目录。</li>
<li>被忽略的文件不会被提交仓储里去.</li>
<li>在.gitignore中可以书写要被忽略的文件的路径，以&#x2F;开头，<br>  一行写一个路径，这些路径所对应的文件都会被忽略，<br>  不会被提交到仓储中<ul>
<li>写法<ul>
<li><code>/.idea </code> 会忽略.idea文件</li>
<li><code> /js</code>      会忽略js目录里的所有文件</li>
<li><code> /js/*.js</code> 会忽略js目录下所有js文件</li>
<li><code>node_modules</code>会忽略当前目录下的所有<code>node_modules</code>文件夹</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><ul>
<li><code>git log</code> 查看历史提交的日志</li>
<li><code>git log --oneline</code> 可以看到简洁版的日志</li>
</ul>
<h2 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h2><ul>
<li><p><code>git reset --hard Head~0</code></p>
<ul>
<li>表示回退到上一次代码提交时的状态</li>
</ul>
</li>
<li><p><code>git reset --hard Head~1</code></p>
<ul>
<li>表示回退到上上次代码提交时的状态</li>
</ul>
</li>
<li><p><code>git reset --hard [版本号]</code></p>
<ul>
<li>可以通过版本号精确的回退到某一次提交时的状态</li>
</ul>
</li>
<li><p><code>git reflog</code></p>
<ul>
<li>可以看到每一次切换版本的记录:可以看到所有提交的版本号</li>
</ul>
</li>
</ul>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li>默认是有一个主分支master</li>
</ul>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul>
<li><code>git branch dev</code><ul>
<li>创建了一个dev分支</li>
<li>在刚创建时dev分支里的东西和master分支里的东西是一样的</li>
</ul>
</li>
</ul>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul>
<li><code>git checkout dev</code><ul>
<li>切换到指定的分支,这里的切换到名为dev的分支<br>  <code>git branch</code> 可以查看当前有哪些分支</li>
</ul>
</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul>
<li><code>git merge dev</code><ul>
<li>合并分支内容,把当前分支与指定的分支(dev),进行合并</li>
<li>当前分支指的是<code>git branch</code>命令输出的前面有*号的分支</li>
</ul>
</li>
<li>合并时如果有冲突，需要手动去处理，处理后还需要再提交一次.</li>
</ul>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">https://github.com<i class="fa fa-external-link-alt"></i></span></li>
<li>不是git,只是一个网站</li>
<li>只不过这个网站提供了允许别通过git上传代码的功能</li>
</ul>
<h3 id="提交代码到github-当作git服务器来用"><a href="#提交代码到github-当作git服务器来用" class="headerlink" title="提交代码到github(当作git服务器来用)"></a>提交代码到github(当作git服务器来用)</h3><ul>
<li><code>git push [地址] master</code></li>
</ul>
<ul>
<li>示例: <code>git push https://github.com/popring/test112.git master  master</code></li>
<li>会把当前分支的内容上传到远程的master分支上</li>
</ul>
<ul>
<li><code>git pull [地址] master</code></li>
</ul>
<ul>
<li>示例: <code>git pull https://github.com/popring/test112.git master</code></li>
<li>会把远程分支的数据得到:(<em>注意本地-要初始一个仓储!</em>)</li>
</ul>
<ul>
<li><code>git clone [地址]</code></li>
</ul>
<ul>
<li>会得到远程仓储相同的数据,如果多次执行会覆盖本地内容。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>入门git-笔记2</title>
    <url>/posts/6a147e65/</url>
    <content><![CDATA[<blockquote>
<p>官方中文文档 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy">https://git-scm.com/book/zh/v2<i class="fa fa-external-link-alt"></i></span></p>
<p>推荐学习 <code>git</code> 小游戏 <span class="exturl" data-url="aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv">https://learngitbranching.js.org/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>git 系列命令</p>
<p>温馨提示：文章内有大图，谨慎浏览</p>
<hr>
<span id="more"></span>

<p>当你本地想建立一个本地仓库(repo)，并与远程仓库进行同步时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="built_in">mkdir</span> repo</span><br><span class="line"><span class="built_in">cd</span> repo</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件操作。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;commit description&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，连接远程仓库(如果在github或gitee创建个空仓库时，它会提醒你如何将本地仓库和远程仓库连接，username体寒为你账号的用户名,xxx为你的仓库名)</span></span><br><span class="line">git remote add origin git@github.com:username/xxx.git</span><br><span class="line"><span class="comment"># 将本地变更提交到远程仓库，后续还需要提交只需要运行 git push 即可</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:popring/xxx.git</span><br></pre></td></tr></table></figure>

<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用，将所有变更添加到缓存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可添加指定文件或指定类型文件</span></span><br><span class="line">git add README.md</span><br><span class="line">git add *.md</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用，将缓存区的文件提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;commit description&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性提交本地修改或删除文件，无论它们是否添加到了缓存区（新增文件不会被提交到仓库）</span></span><br><span class="line"> git commit -a -m <span class="string">&quot;commit description&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用，将本地仓库 master 分支提交至远程仓库 master 分支</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地仓库 foo 分支 提交至远程仓库 master</span></span><br><span class="line">git push origin foo:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 甚至还有高级用法，将本地仓库（ foo 分支的前一个提交） 提交至远程仓库 master</span></span><br><span class="line">git push origin foo^:master</span><br></pre></td></tr></table></figure>

<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 foo 分支</span></span><br><span class="line">git branch foo</span><br><span class="line"><span class="comment"># 创建并切换到 foo 分支</span></span><br><span class="line">git checkout -b foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 foo 分支</span></span><br><span class="line">git branch -d foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程 foo 分支</span></span><br><span class="line">git push origin --delete foo</span><br></pre></td></tr></table></figure>

<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库所有最新代码</span></span><br><span class="line">git fetch --all</span><br></pre></td></tr></table></figure>

<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并两个分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前所在分支为 foo，执行以下命令后，会将foo和bar分支进行合并，并生成一个新的提交</span></span><br><span class="line">git merge bar</span><br></pre></td></tr></table></figure>

<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相当于 git fetch + git merge</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次提交前记得与远程仓库进行同步</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先本地创建一个foo分支，从远程仓库 master 分支下载提交记录，合并到 foo（，然后在与本地的分支进行合并，再次生成提交）</span></span><br><span class="line">git pull origin master:foo</span><br></pre></td></tr></table></figure>

<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地文件，并添加到暂存区</span></span><br><span class="line">git <span class="built_in">rm</span> a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="built_in">rm</span> a.txt</span><br><span class="line">git add a.txt</span><br></pre></td></tr></table></figure>

<h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与git rebase 类似，不过这个命令可以自定义选择的提交记录进行复制到指定位置，rebase只能将指定分支前的提交记录复制到指定位置</span></span><br><span class="line">git cherry-pick c2 c4</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20200704094158.gif"></p>
<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变基操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前在 bar分支，执行如下命令会将 foo 分支前的操作（ foo与bar 的共同父节点除外 ）都复制到 bar 分支之后</span></span><br><span class="line">git rebase foo</span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撤销变更</span></span><br><span class="line">git reset [<span class="built_in">hash</span>]</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看历史提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行显示，显示简要信息</span></span><br><span class="line">git <span class="built_in">log</span> --onelien</span><br></pre></td></tr></table></figure>



<h3 id="rebase和merge"><a href="#rebase和merge" class="headerlink" title="rebase和merge"></a>rebase和merge</h3><hr>
<blockquote>
<p>引用自：<span class="exturl" data-url="aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcvP2xvY2FsZT16aF9DTg==">https://learngitbranching.js.org/?locale=zh_CN<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>以下是关于 rebase 的优缺点：</p>
<p>优点:</p>
<ul>
<li>Rebase 使你的提交树变得很干净, 所有的提交都在一条线上</li>
</ul>
<p>缺点:</p>
<ul>
<li>Rebase 修改了提交树的历史</li>
</ul>
<p>比如, 提交 C1 可以被 rebase 到 C3 之后。这看起来 C1 中的工作是在 C3 之后进行的，但实际上是在 C3 之前。</p>
<p>一些开发人员喜欢保留提交历史，因此更偏爱 merge。而其他人（比如我自己）可能更喜欢干净的提交树，于是偏爱 rebase。</p>
<hr>
<h3 id="git-config-–list-–show-origin"><a href="#git-config-–list-–show-origin" class="headerlink" title="git config –list –show-origin"></a>git config –list –show-origin</h3><p>展示当前个人git配置</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>入门git-代理配置篇</title>
    <url>/posts/d3d2c956/</url>
    <content><![CDATA[<p>配置个信息</p>
<p>连接github</p>
<p>配置git代理：http、https、ssh</p>
<hr>
<span id="more"></span>

<h2 id="配置个人信息"><a href="#配置个人信息" class="headerlink" title="配置个人信息"></a>配置个人信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xx@emial.com&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成key在 ～/.ssh/id_rsa.pub 公匙</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xx@email.com&quot;</span></span><br><span class="line"><span class="comment"># 一路回车，知道本程序结束</span></span><br></pre></td></tr></table></figure>

<p>然后在 github 点击个人头像，进入 settings。</p>
<p>选择 SSH and GPL keys。</p>
<p>New SSH Key，显示需要添加 title、key。</p>
<p>title 随意，key为本地的公匙（<code>～/.ssh/id_rsa.pub </code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试是否添加成功</span></span><br><span class="line">～/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access. #出现词句话，说明设置成功。</span></span><br></pre></td></tr></table></figure>



<h2 id="配置-git-http代理"><a href="#配置-git-http代理" class="headerlink" title="配置 git http代理"></a>配置 git http代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具体端口号，修改为自己本地代理配置</span></span><br><span class="line"></span><br><span class="line">git config --global http.proxy socks://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global https.proxy socks://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>



<h2 id="配置-git-ssh-代理"><a href="#配置-git-ssh-代理" class="headerlink" title="配置 git ssh 代理"></a>配置 git ssh 代理</h2><p>修改<code>~/.ssh/config</code> （如不存在自行创建）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必须是 github.com</span></span><br><span class="line">Host github.com</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   <span class="comment"># 走 HTTP 代理</span></span><br><span class="line">   <span class="comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080</span></span><br><span class="line">   <span class="comment"># 走 socks5 代理（如 Shadowsocks）</span></span><br><span class="line">   <span class="comment"># ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span></span><br></pre></td></tr></table></figure>



<h2 id="解决中文文件名乱码"><a href="#解决中文文件名乱码" class="headerlink" title="解决中文文件名乱码"></a>解决中文文件名乱码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.quotepath <span class="literal">false</span>  --global</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vY2h1eWlrLzAyZDBkMzdhNDllZGMxNjI1NDY0NDEwOTJlZmFlNmEx">https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1<i class="fa fa-external-link-alt"></i></span></p>
<p>乱码 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5sYW5tZy9hcnRpY2xlL2RldGFpbHMvNDk4NjI3Nzk=">https://blog.csdn.net/zhanlanmg/article/details/49862779<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>公用翻墙代理-backup</title>
    <url>/posts/6737d091/</url>
    <content><![CDATA[<ol>
<li><p>找到host文件位置，window下位置如图所示，mac下host位置 <code>/etc/hosts</code> 。</p>
</li>
<li><p>按照下图规则添加host记录</p>
</li>
<li><p>打开 <code>free-ss.site</code> 网站</p>
</li>
<li><p>V 账号 &#x3D;&gt; v2ray，S账号 &#x3D;&gt; shadowsocks</p>
</li>
<li><p>使用代理软件添加规则，Windows 下推荐 v2rayN，或者使用 Clash For windows 在win和mac下都可使用，然后就可以畅游网络世界了。</p>
</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202207101608681.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>初学vue笔记</title>
    <url>/posts/2b382936/</url>
    <content><![CDATA[<p>大致为一下几个方面</p>
<ul>
<li>指令</li>
<li>生命周期函数</li>
<li>Watch</li>
<li>computed</li>
<li>filter</li>
<li>插槽</li>
<li>路由</li>
</ul>
<span id="more"></span>

<h1 id="初学Vue笔记"><a href="#初学Vue笔记" class="headerlink" title="初学Vue笔记"></a>初学Vue笔记</h1><h2 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h2><h3 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h3><blockquote>
<p><u><em><strong>amazing</strong></em></u></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h3><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><blockquote>
<p>隐藏未编译的<code>Mustache</code>标签，编译后再显示</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> v-cloak&gt;</span><br><span class="line">	&#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><blockquote>
<p>指令与差值表达式同时存在时，会覆盖标签内的内容（插值表达式），相当于<code>js</code>的<code>innnerText</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg1</span>: <span class="string">&#x27;上海&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg2</span>: <span class="string">&#x27;海上&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><blockquote>
<p>与 <strong>v-text</strong> 类似，不过可以将内容解析为 HTML，相当于原生js中的 <code>innerHTML</code>，有安全问题，慎用。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译后的h1标签会被解析为html，而v-text中的不会 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;&lt;h1&gt;上海&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><blockquote>
<p>跳过这个元素和它的子元素编译过程，可以来显示原始的 Mustache 标签，跳过大量没有指令的节点会加快编译。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><blockquote>
<p>应用场景： 如果显示的信息后续不需要修改，则可以使用 <strong>v-once</strong> ，提高性能，只编译一次。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>指令写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缩写形式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数： event</p>
<h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><ul>
<li><code>.stop</code> 调用 <code>event.stopPropagation()</code> 阻止冒泡</li>
<li><code>.prevent</code> 调用 <code>event.preventDefault()</code> 阻止默认事件</li>
<li><code>.self</code> 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li><code>.once</code> 只触发一次回调</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaaa&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say($event)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    	<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">say</span>(<span class="params">$event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $event 为当前被点击对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>($event);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修饰符连用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent.once</span>=<span class="string">&quot;handle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>指令用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> 跳转链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简写形式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> 跳转链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以这样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;isActive: &#x27;active&#x27;&#125;&quot;</span>&gt;</span> 这只是一个div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;, &#x27;now&#x27;]&quot;</span>&gt;</span> 这只是第二个div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编译后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> 这只是一个div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active now&quot;</span>&gt;</span> 这只是第二个div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">isActive</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样也可以绑定style，与class一样可以绑定对象或数组</p>
<h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><ul>
<li><code>.prop</code> 被用于绑定DOM属性</li>
</ul>
<h4 id="v-if-…-v-else-if-…-v-else"><a href="#v-if-…-v-else-if-…-v-else" class="headerlink" title="v-if … v-else if … v-else"></a>v-if … v-else if … v-else</h4><blockquote>
<p>重绘结构，控制DOM的是否渲染</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><blockquote>
<p>通过样式来控制显示，<strong>display:none</strong></p>
</blockquote>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote>
<p>双向数据绑定</p>
<p>原理：数据劫持，<strong>Object.defineProperty()</strong></p>
<p>使用范围：只可在表单中使用，input, textarea, select</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><blockquote>
<p>遍历数组</p>
<p><code>:key</code> 帮助 Vue 区别不同的元素，可提高 <code>Vue</code> 的性能</p>
</blockquote>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>M (model)</p>
<p>V (view)</p>
<p>VM (View-Model)</p>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>.enter</p>
<p>.delete</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;onEnter&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="day-02"><a href="#day-02" class="headerlink" title="day-02"></a>day-02</h2><blockquote>
<p>主要学习常用特性</p>
<p><code>directive</code> 和 <code>filter</code> 均分为 全局和局部</p>
<p><code>computed</code>用于定义一种可以随着所依赖数据发生变化的属性， <code>watch</code>监听data中定义的数据的变化</p>
</blockquote>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><blockquote>
<p>注意多选的表单，<code>v-model</code> 绑定的数据为数组</p>
</blockquote>
<h4 id="表单域修饰符"><a href="#表单域修饰符" class="headerlink" title="表单域修饰符"></a>表单域修饰符</h4><p>.number	 转换为 <code>number</code> 类型</p>
<p>.trim			去除开头和结尾的空格</p>
<p>.lazy			 将<code>input事件</code>切换为<code>change事件</code></p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><h4 id="全局指令-Vue-directive"><a href="#全局指令-Vue-directive" class="headerlink" title="全局指令 Vue.directive"></a>全局指令 Vue.directive</h4><blockquote>
<p>自定义指令后，调用时需加前缀 <code>v-</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名称&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        <span class="comment">// el为绑定指令的DOM元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-focus</span>&gt;</span>xxxxxxxx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// el为绑定指令的DOM元素</span></span></span><br><span class="line"><span class="language-javascript">            el.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="局部指令-directives"><a href="#局部指令-directives" class="headerlink" title="局部指令 directives"></a>局部指令 directives</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">focus</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    el.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h3><blockquote>
<p>通过管道符，可以处理字符，然后将处理后的字符返回</p>
<p>与自定义指令类似</p>
</blockquote>
<h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;format&#x27;</span>, <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="title function_">upper</span>(<span class="params">val, str=<span class="string">&#x27; 哈哈哈&#x27;</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> val+<span class="string">&#x27; &#x27;</span>+str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li>初次进入就会立刻执行函数</li>
<li>只要是函数的返回值中有一个值变化就会此函数就会被立刻调用</li>
<li>函数执行后会有缓存，如果数据不变化，再次调用<code>computed</code>会读取缓存，节省性能</li>
<li><code>methods</code> 不存在缓存</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      计算属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;Nihao&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">reverseString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch"></a>侦听器 watch</h3><ul>
<li><p>适用于异步和性能开销较大的场景。</p>
</li>
<li><p>初次进入不会执行</p>
</li>
<li><p>只要属性被监听，属性一被改变，则会触发watch函数，只会触发一次</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;aa&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;bb&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cc&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">aa</span>: <span class="string">&#x27;Hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bb</span>: <span class="string">&#x27;World&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cc</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">aa</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">cc</span> = val + <span class="variable language_">this</span>.<span class="property">bb</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">bb</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">cc</span> = val + <span class="variable language_">this</span>.<span class="property">aa</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="生命周期函数（重点）"><a href="#生命周期函数（重点）" class="headerlink" title="生命周期函数（重点）"></a>生命周期函数（重点）</h3><p><img data-src="https://cn.vuejs.org/images/lifecycle.png" alt="vue"></p>
<ul>
<li>beforeCreate	<ul>
<li><code>data</code>和<code>methods</code>中的函数还没有加载完</li>
</ul>
</li>
<li>created    <ul>
<li><code>data</code>和<code>methods</code>中的函数加载完</li>
<li>DOM结构还没有渲染完</li>
</ul>
</li>
<li>beforeMount<ul>
<li><code>data</code>和<code>methods</code>中的函数加载完</li>
<li>DOM结构渲染完，但data中的数据还未解析</li>
</ul>
</li>
<li>mounted<ul>
<li><code>data</code>和<code>methods</code>中的函数加载完</li>
<li>DOM结构渲染完，data中的数据已解析</li>
</ul>
</li>
</ul>
<h3 id="修改响应式数据"><a href="#修改响应式数据" class="headerlink" title="修改响应式数据"></a>修改响应式数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">items</span>, indexOfIgtem, newValue)</span><br><span class="line"></span><br><span class="line">vm.$set(vm.<span class="property">items</span>, indexOfIgtem, newValue)</span><br></pre></td></tr></table></figure>

<h3 id="ES6-操作数组函数"><a href="#ES6-操作数组函数" class="headerlink" title="ES6 操作数组函数"></a>ES6 操作数组函数</h3><p>filter</p>
<p>some</p>
<p>findIndex</p>
<h2 id="day-03"><a href="#day-03" class="headerlink" title="day 03"></a>day 03</h2><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	Vue.component(&#x27;button-counter&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: function()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                count: 0</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;count++&#x27;</span>&gt;</span> 点击了</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml">次 <span class="tag">&lt;/<span class="name">button</span>&gt;</span>&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="组件注册注意事项"><a href="#组件注册注意事项" class="headerlink" title="组件注册注意事项"></a>组件注册注意事项</h3><ul>
<li>data必须是一个函数</li>
<li>组件模板内容必须是单个根元素</li>
<li>组件命名方式<ul>
<li>驼峰式命名组件，使用组件时，只能在字符串模板中使用，普通标签模板中使用必须转换为短横线的方法使用组件</li>
<li>不能与原生的html标签冲突</li>
</ul>
</li>
</ul>
<h3 id="组件间的互相传值"><a href="#组件间的互相传值" class="headerlink" title="组件间的互相传值"></a>组件间的互相传值</h3><h4 id="父组件给子组件传值-props"><a href="#父组件给子组件传值-props" class="headerlink" title="父组件给子组件传值 - props"></a>父组件给子组件传值 - props</h4><h5 id="props-属性名规则"><a href="#props-属性名规则" class="headerlink" title="props 属性名规则"></a>props 属性名规则</h5><ul>
<li>在 <code>props</code>中使用驼峰形式，模板中需使用短横线形式</li>
<li>字符串形式的模板中没有限制</li>
<li>如若嫌麻烦，全部用小写，则无此烦恼</li>
</ul>
<h5 id="props属性值类型"><a href="#props属性值类型" class="headerlink" title="props属性值类型"></a>props属性值类型</h5><ul>
<li>字符串 String</li>
<li>数值 Number</li>
<li>布尔值 Boolean</li>
<li>数组 Array</li>
<li>对象 Object</li>
</ul>
<h4 id="子组件向父组件传值-emit"><a href="#子组件向父组件传值-emit" class="headerlink" title="子组件向父组件传值 $emit()"></a>子组件向父组件传值 $emit()</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">son</span> @<span class="attr">tofa</span>=<span class="string">&quot;app($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> son = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;这是子元素的内容&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fff</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.$emit(<span class="string">&#x27;tofa&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`&lt;div @click=&quot;fff&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">app</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        son</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="兄弟组件相互传值"><a href="#兄弟组件相互传值" class="headerlink" title="兄弟组件相互传值"></a>兄弟组件相互传值</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bro</span>&gt;</span><span class="tag">&lt;/<span class="name">bro</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">girl</span>&gt;</span><span class="tag">&lt;/<span class="name">girl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 新建公共 数据仓库</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> eventBus  = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;bro&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg1</span>: <span class="string">&#x27;兄弟元素送来的祝福&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg2</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;我是兄弟元素 ======= &#123;&#123; msg2 &#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;button @click=&quot;setBro&quot;&gt;点击发送给girl元素&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setBro</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          eventBus.$emit(<span class="string">&#x27;setInfo1&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg1</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        eventBus.$on(<span class="string">&#x27;setInfo2&#x27;</span>, <span class="function"><span class="params">val</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">msg2</span> = val;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;girl&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg2</span>: <span class="string">&#x27;姐妹元素送来的祝福&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;我是姐妹元素 ======= &#123;&#123; msg1 &#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;setGirl&quot;&gt;点击发送给bro元素&lt;/button&gt;           </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setGirl</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          eventBus.$emit(<span class="string">&#x27;setInfo2&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg2</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        eventBus.$on(<span class="string">&#x27;setInfo1&#x27;</span>, <span class="function"><span class="params">val</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">msg1</span> = val;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p><img data-src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期函数"></p>
<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1zbG90cy5odG1s">插槽<i class="fa fa-external-link-alt"></i></span></h3><blockquote>
<p>占位，以便展示内容</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编译后的标签的内容为 456 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>456<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译后的标签的内容为 123 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;alert-box&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">			&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">				&lt;slot&gt;123&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    		&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">		`</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><blockquote>
<p>声明：此种方法被2.6以上版本废弃，但仍可使用，建议用新版 v-slot</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      具名插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-slot</strong></p>
<blockquote>
<p>用法与以上相同，只是将 <code>slot=&#39;header&#39;</code> 替换为 <code>v-slot:header</code></p>
<p>同时 <code>v-slot:</code> 可以简写为 <code>#</code>，同理可得以上可简写为 <code>#header</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/vue-2.6.10.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.firstName &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          user: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            firstName: &#x27;Harry&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            lastName: &#x27;Hao&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">user.lastName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><ul>
<li>普通for循环</li>
<li>array.forEach  没有返回值，条件满足就终止循环</li>
<li>for..in  一般情况下用来遍历对象</li>
<li>for…of</li>
<li>array.filter</li>
<li>array.some   有返回值，条件满足就终止循环</li>
<li>array.findIndex  返回满足条件的索引值</li>
<li>map</li>
<li>reduce</li>
<li>every</li>
</ul>
<h2 id="day-04"><a href="#day-04" class="headerlink" title="day 04"></a>day 04</h2><blockquote>
<p>SPA ( Single Page Application)单页面应用程序</p>
<p>原理之一：基于URL地址的hash</p>
</blockquote>
<h3 id="路由引入"><a href="#路由引入" class="headerlink" title="路由引入"></a>路由引入</h3><blockquote>
<p>引入 router.js 文件</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==">https://router.vuejs.org/zh/<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>跳转到user页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">srcript</span>&gt;</span></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">	routes:[</span><br><span class="line">    	&#123;path: &#x27;/user&#x27;, component: User&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">srcript</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: user&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: user, children;[</span><br><span class="line">     	&#123;<span class="attr">path</span>: <span class="string">&#x27;/user/tab1&#x27;</span>, <span class="attr">component</span>: tab1&#125;,</span><br><span class="line">     	&#123;<span class="attr">path</span>: <span class="string">&#x27;/user/tab2&#x27;</span>, <span class="attr">component</span>: tab2&#125;,</span><br><span class="line">     ]&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="动态匹配路由"><a href="#动态匹配路由" class="headerlink" title="动态匹配路由"></a>动态匹配路由</h3><p><strong>props 可为 boolean，Object，函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: user, <span class="attr">props</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: user, <span class="attr">props</span>: &#123;</span><br><span class="line">    	<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ls&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: user, <span class="attr">props</span>: </span><br><span class="line">    	<span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">     	<span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">     	<span class="attr">id</span>: $route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><blockquote>
<p>给路由命名，然后以对象的形式绑定在<code>router-link</code> 中的 <code>to</code>属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123;id: 3&#125; &#125;&quot;</span>&gt;<span class="title class_">User3</span>&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 命名路由</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p><code>this.$router.push()</code></p>
<p><code>this.$router.go()</code></p>
<p>this.$router.push(‘&#x2F;user’)</p>
<p>this.$router.push({path: ‘&#x2F;user’})</p>
<p>this.$router.push({name: ‘user’})</p>
<p>this.$router.push({name: ‘user’, params: {id: 2}})</p>
<p>this.$router.push({path: ‘&#x2F;user&#x2F;2’})</p>
<p>this.$router.push({path: ‘&#x2F;user’, query: {id: 3}})</p>
<h3 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h3><p>AMD</p>
<p>CMD<br>CommonJS</p>
<p>ES6</p>
<h2 id="day-05"><a href="#day-05" class="headerlink" title="day 05"></a>day 05</h2><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><blockquote>
<p>每个模块中，只允许使用一次 <code>export default</code></p>
<p>export 可以多次使用，导出和导入的名字需相同，如有需重命名的变量使用 <code>as</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> xx <span class="keyword">from</span> <span class="string">&#x27;./m1.js&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">export</span> aa</span><br><span class="line"><span class="keyword">export</span> bb</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;aa <span class="keyword">as</span> qq, bb&#125; <span class="keyword">from</span> <span class="string">&#x27;./m2.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><code>webpack</code></h3><h4 id="npm装包"><a href="#npm装包" class="headerlink" title="npm装包"></a>npm装包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure>

<h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h4 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a><code>package.json</code> 配置</h4><p>…</p>
<h4 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><blockquote>
<p>实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间数据的共享。</p>
</blockquote>
<p><strong>优点</strong></p>
<ul>
<li>集中管理共享数据，易于开发和维护</li>
<li>高效实现组件之间的数据共享，提高开发小绿</li>
<li>vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>
</ul>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p><code>vuex</code> 导入 <code>mapState</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        ...<span class="title function_">mapState</span>([count])</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><blockquote>
<p>用于修改state中的数据，不推荐在其他组件中直接修改vuex中的数据</p>
<p>异步执行使用<code>Action</code></p>
</blockquote>
<p><code>store.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>单个组件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;add&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><blockquote>
<p>此方法中均为调用异步的方法</p>
<p>操作<code>state</code>中的数据还是要调用<code>mutations</code></p>
</blockquote>
<p>定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">addAsync</span> (context) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">add</span>()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addAsync&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote>
<p>用法同上</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>去哪儿网踩坑（Vue-cli配置和Vuex）</title>
    <url>/posts/7a3e10c2/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20va29sZXI3NzgvcXVuYWVyd2FuZ3Rlc3Q=">去哪儿网项目链接<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Vue-cli-配置"><a href="#Vue-cli-配置" class="headerlink" title="Vue-cli 配置"></a>Vue-cli 配置</h2><h3 id="Vue-cli-2-x-和-Vue-cli-3-x-配置webpack别名目录-alias"><a href="#Vue-cli-2-x-和-Vue-cli-3-x-配置webpack别名目录-alias" class="headerlink" title="Vue-cli 2.x 和 Vue-cli 3.x 配置webpack别名目录 alias"></a>Vue-cli 2.x 和 Vue-cli 3.x 配置webpack别名目录 alias</h3><h4 id="vue-cli-2-x"><a href="#vue-cli-2-x" class="headerlink" title="vue-cli 2.x"></a>vue-cli 2.x</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">			<span class="comment">// resolve 函数文件已配置好</span></span><br><span class="line">			<span class="string">&#x27;styles&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/styles&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="vue-cli-3-x"><a href="#vue-cli-3-x" class="headerlink" title="vue-cli 3.x"></a>vue-cli 3.x</h4><p>直接在项目根目录新建 <code>vue.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;styles&#x27;</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/styles&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="stylus配置别名"><a href="#stylus配置别名" class="headerlink" title="stylus配置别名"></a>stylus配置别名</h3><p>在以上配置<code>webpack别名目录</code>后，在页面引入 <code>stylus</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line">/* 此处的~styles 指的就是 src/assets/styles */</span><br><span class="line">@import &#x27;~styles/varibles.styl&#x27;;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSFRUUCVFNiU4QyU4MSVFNCVCOSU4NSVFOCVCRiU5RSVFNiU4RSVBNQ==">http持久链接 keep-alive 维基百科<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNrZWVwLWFsaXZl">Vue官方解释<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>keep-alive 是持久化连接技术</p>
<p>但在vue中是包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。由于不会销毁，所以生命周期函数 <code>created</code>，<code>mounted</code>都不会执行第二次</p>
</blockquote>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><blockquote>
<p>普通情况下 <strong>store</strong> 就已够用，但如果数据特别大而且特别多的时候，而且还是相互之间需要传值，这个时候就该 <strong>vuex</strong> 上场了。</p>
<p>官方解释：</p>
<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p>
</blockquote>
<p><img data-src="https://vuex.vuejs.org/vuex.png"></p>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p>相当于组件中的 data，只要挂载到Vue上，所有组件都可以访问</p>
</blockquote>
<p>组件中获取state</p>
<p>第一种 简单直接，就是写起来有点麻烦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&#123;&#123;this.$store.state.city&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9zdGF0ZS5odG1sIyVFNSVBRiVCOSVFOCVCMSVBMSVFNSVCMSU5NSVFNSVCQyU4MCVFOCVCRiU5MCVFNyVBRSU5NyVFNyVBQyVBNg==">第二种 对象展开运算符<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&#123;&#123;city&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">		...mapState([&#x27;city&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p><strong>优势</strong></p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">changeCity</span>(<span class="params">context, city</span>) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;changeCityName&#x27;</span>, city)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件中调用 dispath 可以调用到actions内的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;changeCity&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeCityName</span>(<span class="params">state, city</span>) &#123;</span><br><span class="line">	state.<span class="property">city</span> = city</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="module"><a href="#module" class="headerlink" title="module"></a><span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9tb2R1bGVzLmh0bWw=">module<i class="fa fa-external-link-alt"></i></span></h3><h2 id="异步加载组件"><a href="#异步加载组件" class="headerlink" title="异步加载组件"></a><span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poL2d1aWRlL2FkdmFuY2VkL2xhenktbG9hZGluZy5odG1sIyVFOCVCNyVBRiVFNyU5NCVCMSVFNiU4NyU5MiVFNSU4QSVBMCVFOCVCRCVCRA==">异步加载组件<i class="fa fa-external-link-alt"></i></span></h2><p>将原来的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./page/home/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改为异步加载，有效减少的 app.js 文件大小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./page/home/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./page/home/Home.vue&#x27;</span>) &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>项目总结</tag>
      </tags>
  </entry>
  <entry>
    <title>同一时间按钮多次点击发送无效数据解决方案</title>
    <url>/posts/e59c7c62/</url>
    <content><![CDATA[<p>问题描述</p>
<blockquote>
<p>当前端使用 <code>ajax</code> 提交一个表单时，因网络缓慢等原因导致数据没有及时返回数据，导致用户没有得到正确的提示，以为未点中提交按钮，进而在此点击提交按钮，进行提交数据（多半会重复多次点击）</p>
</blockquote>
<p>解决方法</p>
<ul>
<li>禁用按钮，并添加 <code>loading</code> 提示</li>
<li>移除点击事件</li>
<li>结合<code>vue</code>使用</li>
</ul>
<span id="more"></span>



<h2 id="常规点击请求代码"><a href="#常规点击请求代码" class="headerlink" title="常规点击请求代码"></a>常规点击请求代码</h2><p>这里自己封装一个函数来模仿 <code>ajax</code> 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟ajax请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 随机返回错误</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span><br><span class="line">      res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>理想状态下，点击按钮应返回数据，但因为网络缓慢，所以模拟数据回来要 2s</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 按钮点击次数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> num = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 模拟ajax请求数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ajax</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据回来了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据请求有问题呀&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(++num);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>结果，作为新用户的我看到数据没有显示出来，以为没点中按钮，于是又多点了几下按钮。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20201005110102.png" alt="image-20201005110057217"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="禁用按钮，添加提示-loading"><a href="#禁用按钮，添加提示-loading" class="headerlink" title="禁用按钮，添加提示 loading"></a>禁用按钮，添加提示 <code>loading</code></h3><blockquote>
<p>代码思路：将当前点击按钮禁用，并将按钮展示文本信息进行修改</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>0次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 按钮点击次数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> num = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 模拟ajax请求数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> handleClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 禁用按钮</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">setAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文字提示</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">innerText</span> = <span class="string">&#x27;loading...&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击次数，渲染到p标签上</span></span></span><br><span class="line"><span class="language-javascript">    num++</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;num&#125;</span> 次`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟请求数据，并作出响应</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ajax</span>()</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击成功: &#x27;</span> + res)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击失败: &#x27;</span> + e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 数据请求完毕，恢复按钮</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">innerText</span> = <span class="string">&#x27;点击&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="移除按钮点击事件"><a href="#移除按钮点击事件" class="headerlink" title="移除按钮点击事件"></a>移除按钮点击事件</h3><blockquote>
<p> 换个思路，不妨可以直接将点击事件移除，这样用户也同样不会触发多次点击事件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>0次<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 按钮点击次数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> num = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 模拟ajax请求数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> handleClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 移除按钮点击事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">innerText</span> = <span class="string">&#x27;加载中...&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击次数</span></span></span><br><span class="line"><span class="language-javascript">    num++</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;num&#125;</span> 次`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟请求数据，并作出响应</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ajax</span>()</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击成功: &#x27;</span> + res)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击失败: &#x27;</span> + e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 数据请求完毕，恢复按钮</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">innerText</span> = <span class="string">&#x27;点击&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="以上两种方法结合使用"><a href="#以上两种方法结合使用" class="headerlink" title="以上两种方法结合使用"></a>以上两种方法结合使用</h3><blockquote>
<ul>
<li>禁用按钮</li>
<li>添加提示</li>
<li>移除点击事件</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 按钮点击次数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> num = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 模拟ajax请求数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> handleClick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使按钮无效处理</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">setAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">innerText</span> = <span class="string">&#x27;加载中...&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击次数</span></span></span><br><span class="line"><span class="language-javascript">    num++</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;num&#125;</span> 次`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟请求数据，并作出响应</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ajax</span>()</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击成功: &#x27;</span> + res)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击失败: &#x27;</span> + e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 数据请求完毕，恢复按钮</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">innerText</span> = <span class="string">&#x27;点击&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="结合vue来使用"><a href="#结合vue来使用" class="headerlink" title="结合vue来使用"></a>结合vue来使用</h3><blockquote>
<p>这里只是做了一个小的demo来解释下思路，多数情况下会用axios，可选择在封装axios请求时，进行封装这个操作。网上还有一些案例使用了指令来封装，思路有很多。</p>
<p>这里没有使用移除点击事件，可自行选择添加。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防止用户同一时间内点击多次按钮，发送多次无效数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 对ajax请求封装</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">ajax</span>(<span class="params">button</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (button &amp;&amp; button <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              text = button.<span class="property">innerText</span> || <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">              button.<span class="title function_">setAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">              button.<span class="property">innerText</span> = <span class="string">&#x27;loading...&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) % <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">                res === <span class="number">0</span> ? <span class="title function_">resolve</span>(<span class="number">1</span>) : <span class="title function_">reject</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">              .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              	<span class="comment">// 无论是 resolve </span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (button) &#123;</span></span><br><span class="line"><span class="language-javascript">                  button.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                  button.<span class="property">innerText</span> = text</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> res</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">              .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              	<span class="comment">// 还是 catch，都能重置按钮</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (button) &#123;</span></span><br><span class="line"><span class="language-javascript">                  button.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                  button.<span class="property">innerText</span> = text</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">throw</span> e</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 只需要在调用的时候传入按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">ajax</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>)</span></span><br><span class="line"><span class="language-javascript">              .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击成功: &#x27;</span> + res)</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">              .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击失败: &#x27;</span> + e)</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>实现切换路由时当前布局不变并加载其他路由</title>
    <url>/posts/471fc36d/</url>
    <content><![CDATA[<p>最近在过 <code>Next.js</code> 文档 ，看到拦截路由这一章，感觉到惊喜（暂时没想到什么词可以形容了），这种设计在交互和代码上都着实可以称赞。同时联想了一下 <code>Vue.js</code> 如何实现。</p>
<p><strong>举一个例子</strong></p>
<p>路由定义</p>
<ul>
<li><code>/photo</code> : 图片列表</li>
<li><code>/photo/xxx</code> : 具体某张图片的详情</li>
</ul>
<p>在页面 <code>/photo</code> 单击图片时，路由发生变化，进入图片详情 <code>/photo/123</code>， 可以通过模态框( Modal )展示内容。（官方称这种行为拦截路由，屏蔽 URL）</p>
<p>此时，如果使用 <code>/photo/123</code> 直接进入图片详情，直接展示的是详情页面，而不是模态框。</p>
<p><strong>此设计优势，参考 Next.js 官方</strong></p>
<ul>
<li>可通过URL分享</li>
<li>刷新时可保留上下文，而不是关闭 Modal</li>
<li>路由后退时关闭 Modal ，而不是真正的后退路由</li>
<li>后退后可以向前导航打开 Modal</li>
</ul>
<p>实现效果如图，点击图片，路由已跳转，并且是已模态框形式展现；此时刷新，进入详情页。</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202409271922840.gif"></p>
<span id="more"></span>

<h2 id="Next-js-实现"><a href="#Next-js-实现" class="headerlink" title="Next.js 实现"></a>Next.js 实现</h2><blockquote>
<p>对 Next.js 不熟的同学，需要去看文档过下基础了。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9pbnRlcmNlcHRpbmctcm91dGVz">Intercepting Routes<i class="fa fa-external-link-alt"></i></span> 拦截路由主要是可以实现切换路由时，原页面布局不进行改变，同时可以加载新路由。</p>
<p>Next.js 实现起来并不复杂，官方已经提供模板写法。</p>
<p>通过 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9wYXJhbGxlbC1yb3V0ZXMjbW9kYWxz">Parallel Routes<i class="fa fa-external-link-alt"></i></span> 平行路由来实现。</p>
<p>实现一下步骤：</p>
<ol>
<li>在 <code>/app/layout.jsx</code> 布局文件下放入插槽 <code>modal</code></li>
<li>新建文件 <code>/app/@modal/(.)photo/[id]/page.js</code> 为 SPA 形式跳转路由的模态框展示代码</li>
<li>文件 <code>/app/photo/[id]/page.js</code> 为新开页面进去的代码</li>
<li>以上两者的路由是一样的，跳转路由方式不一样展示效果不一样</li>
</ol>
<p>自己实现的文件结构</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202409271950071.png"></p>
<p>完整代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvaW50ZXJjZXB0aW5nLXJvdXRlcy90cmVlL21haW4vaW50ZXJjZXB0aW5nLXJvdXRlcy1uZXh0anM=">intercepting-routes-nextjs<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Vue-js-实现"><a href="#Vue-js-实现" class="headerlink" title="Vue.js 实现"></a>Vue.js 实现</h2><blockquote>
<p>大致思路：在最外层需要一个 <code>layout</code> 组件来控制图片是以什么形态展示；图片列表页需作为父页面因为需要在跳转路由后仍然展示，所以需要在结构上作为父组件页面；而图片详情有两种形态展示，需要一个 Container 来进行分发，至于判断条件是从 <code>layout</code> 的数据来。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件夹结构</span><br><span class="line">./src</span><br><span class="line">├── App.vue</span><br><span class="line">├── constant.js</span><br><span class="line">├── data.js</span><br><span class="line">├── main.js</span><br><span class="line">├── pages</span><br><span class="line">│   ├── Layout.vue</span><br><span class="line">│   ├── PhotoInfo</span><br><span class="line">│   │   ├── PhotoInfoContainer.vue</span><br><span class="line">│   │   ├── PhotoInfoModal.vue</span><br><span class="line">│   │   └── PhotoInfoPage.vue</span><br><span class="line">│   ├── PhotoList</span><br><span class="line">│   │   ├── PhotoList.vue</span><br><span class="line">│   │   └── PhotoListContainer.vue</span><br><span class="line">│   └── composables</span><br><span class="line">│       └── useLayout.js</span><br><span class="line">├── router</span><br><span class="line">│   └── index.js</span><br><span class="line">└── style.css</span><br></pre></td></tr></table></figure>

<p>首先是需要配置一下路由信息，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/Layout.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="comment">// 图片列表</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;PHOTO_LIST&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/PhotoList/PhotoListContainer.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="comment">// 图片详情</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;PHOTO_INFO&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/photo/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/PhotoInfo/PhotoInfoContainer.vue&#x27;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>看结构可以看出最外层是一个 <code>Layout</code> 组件，其次是<code>PhotoListContainer</code>，最后 <code>PhotoInfoContainer</code>，这个嵌套路由的关系与我们开头所说的关系一致。</p>
<p>核心代码就是 <code>useLayout.js</code> 这块儿，将首次进入的页面记录下来，传递给后面的子组件进行渲染或使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/constant.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; markRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PhotoList</span> <span class="keyword">from</span> <span class="string">&quot;./pages/PhotoList/PhotoList.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PAGE</span> = &#123;</span><br><span class="line">  <span class="attr">PHOTO_LIST</span>: <span class="string">&#x27;PHOTO_LIST&#x27;</span>,</span><br><span class="line">  <span class="attr">PHOTO_INFO</span>: <span class="string">&#x27;PHOTO_INFO&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">COMPONENT_CONFIG</span> = &#123;</span><br><span class="line">  [<span class="variable constant_">PAGE</span>.<span class="property">PHOTO_LIST</span>]: <span class="title function_">markRaw</span>(<span class="title class_">PhotoList</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /src/pages/composables/useLayout.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject, provide, ref, watchEffect, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">COMPONENT_CONFIG</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../constant.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LAYOUT_SYMBOL</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;layout&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useLayout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line">  <span class="keyword">const</span> cmp = <span class="title function_">ref</span>(<span class="variable constant_">COMPONENT_CONFIG</span>[route.<span class="property">name</span>]);</span><br><span class="line">  <span class="keyword">let</span> mountedList = !!cmp.<span class="property">value</span>;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="variable constant_">LAYOUT_SYMBOL</span>, &#123;</span><br><span class="line">    <span class="attr">components</span>: cmp,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防止直接访问图片详情页后返回图片列表不显示内容；以及直接图片详情返回列表页面，再打开图片出现的兼容问题</span></span><br><span class="line">  <span class="title function_">watch</span>(<span class="function">() =&gt;</span> route.<span class="property">path</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mountedList) &#123;</span><br><span class="line">      cmp.<span class="property">value</span> = <span class="variable constant_">COMPONENT_CONFIG</span>[route.<span class="property">name</span>];</span><br><span class="line">      mountedList = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useLayoutData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">inject</span>(<span class="variable constant_">LAYOUT_SYMBOL</span>, &#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是 <code>PhotoList</code> 的两个组件， <code>PhotoListContainer</code> 这个组件在路由中进行引用，根据 <code>useLayout</code> 传下来的数据进行判断是否要显示图片列表。（备注：这里使用 <code>useLayoutData</code> 获取数据）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /src/pages/PhotoList/PhotoListContainer.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;PhotoListContainer&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;components&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useLayoutData &#125; from &#x27;../composables/useLayout&#x27;</span><br><span class="line">const &#123; components &#125; = useLayoutData()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来是图片详情的三个组件，首先是图片详情的 <code>Container</code> ，用来做分发使用，数据从 <code>layout</code> 传下来，会看 <code>useLayout</code> 的逻辑可以看出，只有首次打开页面为图片列表页 <code>components</code> 才会有数据，此处也就可以判断需要加载 <code>Modal</code> 还是 <code>Page</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /src/pages/PhotoInfo/PhotoInfoContainer.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;PhotoInfoContainer&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;InfoCmp&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; useLayoutData &#125; from &#x27;~/pages/composables/useLayout&#x27;</span><br><span class="line">import &#123; computed, defineAsyncComponent &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; components &#125; = useLayoutData()</span><br><span class="line"></span><br><span class="line">const InfoCmp = computed(() =&gt; &#123;</span><br><span class="line">  if (components?.value) &#123;</span><br><span class="line">    return defineAsyncComponent(() =&gt; import(&#x27;./PhotoInfoModal.vue&#x27;))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return defineAsyncComponent(() =&gt; import(&#x27;./PhotoInfoPage.vue&#x27;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>核心实现代码已结束，另外 <code>PhotoList.vue</code>、 <code>PhotoInfoModal</code> 、 <code>PhotoInfoPage</code> 没有贴上来，感兴趣可以到仓库查看。</p>
<p>完整代码： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvaW50ZXJjZXB0aW5nLXJvdXRlcy90cmVlL21haW4vaW50ZXJjZXB0aW5nLXJvdXRlcy12dWU=">intercepting-routes<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Next.js</code> 实现起来有官方实践推荐，支持较好，跟随文档即可实现。</p>
<p><code>Vue.js</code> 实现起来有点黑魔法的感觉，相关逻辑需要自行实现，不过也是可以实现类似功能，并且具备相同的特性。(小红书官网的feed流打开笔记详情效果，实现原理也类似)</p>
<ul>
<li>通过路由嵌套的形式，将列表页作为父路由，详情页作为子路由，实现路由页面可以共存，并且切换时还可以保留上下文</li>
<li>需在子路由实现以什么形式加载，判断和展示逻辑都需手动实现。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 and wepy</title>
    <url>/posts/e5ee95a5/</url>
    <content><![CDATA[<h2 id="Mini-Program-Notes"><a href="#Mini-Program-Notes" class="headerlink" title="Mini Program Notes"></a>Mini Program Notes</h2><h3 id="尺寸单位-rpx和px"><a href="#尺寸单位-rpx和px" class="headerlink" title="尺寸单位 - rpx和px"></a>尺寸单位 - rpx和px</h3><ul>
<li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx &#x3D; 375px &#x3D; 750物理像素，1rpx &#x3D; 0.5px &#x3D; 1物理像素。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">设备</th>
<th align="left">rpx换算px (屏幕宽度&#x2F;750)</th>
<th align="left">px换算rpx (750&#x2F;屏幕宽度)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">iPhone5</td>
<td align="left">1rpx &#x3D; 0.42px</td>
<td align="left">1px &#x3D; 2.34rpx</td>
</tr>
<tr>
<td align="left">iPhone6</td>
<td align="left">1rpx &#x3D; 0.5px</td>
<td align="left">1px &#x3D; 2rpx</td>
</tr>
<tr>
<td align="left">iPhone6 Plus</td>
<td align="left">1rpx &#x3D; 0.552px</td>
<td align="left">1px &#x3D; 1.81rpx</td>
</tr>
</tbody></table>
<p><strong>详情查看官方文档</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC8=">组件<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS8=">API<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="小程序生命周期-Life-Cycle"><a href="#小程序生命周期-Life-Cycle" class="headerlink" title="小程序生命周期(Life Cycle)"></a>小程序生命周期(Life Cycle)</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9hcHAtc2VydmljZS9wYWdlLWxpZmUtY3ljbGUuaHRtbA==">文档<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png" alt="jpg"></p>
<h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>bindtap</code>或者<code>bindtap(1)</code> 都会会直接当成函数名直接调用包括<strong>括号</strong></p>
<h4 id="传参使用自定义属性-data"><a href="#传参使用自定义属性-data" class="headerlink" title="传参使用自定义属性 data-*"></a>传参使用自定义属性 data-*</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;bdtap&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// js代码</span><br><span class="line">bdtap() &#123;</span><br><span class="line">	// e.target.dataset 获取data-*的值</span><br><span class="line">	console.log(e.target.dataset.info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wxs"><a href="#wxs" class="headerlink" title="wxs"></a>wxs</h3><ul>
<li>没有兼容性</li>
<li>与JavaScript不同</li>
<li>隔离性：不能调用<code>js</code>代码，也不能调用小程序提供的<code>API</code></li>
<li>不能作为事件回调</li>
<li><code>IOS</code>设备比<code>JavaScript</code>运行环境<strong>快2~20倍</strong>，而在<code>Android</code>和<code>JavaScript</code>环境运行效率无差异</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>wx:if 控制元素的渲染，为惰性渲染，更高的切换消耗</p>
<p>hidden 始终会渲染，只是简单的控制显示和隐藏，更高的出事渲染消耗</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 相当于 v-if</span><br><span class="line">wx:if=&quot;&quot;</span><br><span class="line">wx:elif=&quot;&quot;</span><br><span class="line">wx:else</span><br><span class="line"></span><br><span class="line">// 控制元素的显示和隐藏</span><br><span class="line">hidden </span><br><span class="line"></span><br><span class="line">// 列表渲染</span><br><span class="line">wx:for=&quot;&quot;</span><br><span class="line">wx:for-index=&quot;&quot;</span><br><span class="line">wx:for-item=&quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="block标签"><a href="#block标签" class="headerlink" title="block标签"></a>block标签</h4><blockquote>
<p>相当于vue中的<code>template</code>，只做包括，当前标签不会渲染出来，内容会渲染</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50Lw==">自定义组件<i class="fa fa-external-link-alt"></i></span></h3><h4 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50L29ic2VydmVyLmh0bWw=">数据监听器<i class="fa fa-external-link-alt"></i></span></h4><blockquote>
<p>类似于<code>Vue</code>中的<code>watch</code>，支持版本2.6.1以上</p>
</blockquote>
<h5 id="数据监听器-1"><a href="#数据监听器-1" class="headerlink" title="数据监听器"></a>数据监听器</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">observers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;字段1&#x27;</span>, <span class="string">&#x27;字段2&#x27;</span>: <span class="keyword">function</span>(<span class="params">字段<span class="number">1</span>的新值，字段<span class="number">2</span>的新值</span>) &#123;</span><br><span class="line">   			<span class="comment">// do something         </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="监听子数据字段的变化"><a href="#监听子数据字段的变化" class="headerlink" title="监听子数据字段的变化"></a>监听子数据字段的变化</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;some.subfield&#x27;</span>: <span class="keyword">function</span> (<span class="params">subfield</span>) &#123;</span><br><span class="line">      <span class="comment">// 使用 setData 设置 this.data.some.subfield 时触发</span></span><br><span class="line">      <span class="comment">// （除此以外，使用 setData 设置 this.data.some 也会触发）</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;arr[12]&#x27;</span>: <span class="keyword">function</span> (<span class="params">arr12</span>) &#123;</span><br><span class="line">      <span class="comment">// 使用 setData 设置 this.data.arr[12] 时触发</span></span><br><span class="line">      <span class="comment">// （除此以外，使用 setData 设置 this.data.arr 也会触发）</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="通配符-监听所有子数据字段的变化"><a href="#通配符-监听所有子数据字段的变化" class="headerlink" title="通配符**监听所有子数据字段的变化"></a>通配符<code>**</code>监听所有子数据字段的变化</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;some.field.**&#x27;</span>: <span class="keyword">function</span> (<span class="params">field</span>) &#123;</span><br><span class="line">      <span class="comment">// 使用 setData 设置 this.data.some.field 本身或其下任何子数据字段时触发</span></span><br><span class="line">      <span class="comment">// （除此以外，使用 setData 设置 this.data.some 也会触发）</span></span><br><span class="line">      field === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">some</span>.<span class="property">field</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50L2xpZmV0aW1lcy5odG1s">组件的生命周期<i class="fa fa-external-link-alt"></i></span></h4><h4 id="取消顶部导航栏"><a href="#取消顶部导航栏" class="headerlink" title="取消顶部导航栏"></a>取消顶部导航栏</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        navigationStyle<span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="将图片转换为base64"><a href="#将图片转换为base64" class="headerlink" title="将图片转换为base64"></a>将图片转换为<code>base64</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileManger = wx.<span class="title function_">getFileSystemManger</span>()</span><br><span class="line"><span class="keyword">const</span> fileStr = fileManger.<span class="title function_">readFileSync</span>(<span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"><span class="comment">// fileStr 即为 图片的base64</span></span><br></pre></td></tr></table></figure>

<h4 id="hover-class"><a href="#hover-class" class="headerlink" title="hover-class"></a>hover-class</h4><blockquote>
<p>去除<code>navigator</code>跳转链接的跳转时的默认灰色背景，设置为<code>none</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="WEPY"><a href="#WEPY" class="headerlink" title="WEPY"></a>WEPY</h2><h4 id="创建-wepy-项目"><a href="#创建-wepy-项目" class="headerlink" title="创建 wepy 项目"></a>创建 <code>wepy</code> 项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装wepy-cli</span></span><br><span class="line">yarn global add wepy-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">wepy new myproject</span><br><span class="line"><span class="comment"># 1.7.0之后的版本使用 wepy init standard myproject 初始化项目，使用 wepy list 查看项目模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至目录</span></span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启实时编译</span></span><br><span class="line">wepy build --watch</span><br></pre></td></tr></table></figure>

<h4 id="wepy-cli-命令"><a href="#wepy-cli-命令" class="headerlink" title="wepy-cli 命令"></a>wepy-cli 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据生成一个新项目</span></span><br><span class="line">init [options] &lt;template-name&gt; [project-name]</span><br><span class="line">		</span><br><span class="line">    -c --<span class="built_in">clone</span>  use git <span class="built_in">clone</span></span><br><span class="line">    --offline   use cached template</span><br><span class="line">    -h, --<span class="built_in">help</span>  output usage information</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建项目</span></span><br><span class="line">build [options]</span><br><span class="line">		-f, --file &lt;file&gt;      待编译wpy文件</span><br><span class="line">    -s, --<span class="built_in">source</span> &lt;<span class="built_in">source</span>&gt;  源码目录</span><br><span class="line">    -t, --target &lt;target&gt;  生成代码目录</span><br><span class="line">    -o, --output &lt;<span class="built_in">type</span>&gt;    编译类型：web，weapp。默认为weapp</span><br><span class="line">    -p, --platform &lt;<span class="built_in">type</span>&gt;  编译平台：browser, wechat，qq。默认为browser</span><br><span class="line">    -w, --watch            监听文件改动</span><br><span class="line">    --no-cache             对于引用到的文件，即使无改动也会再次编译</span><br><span class="line">    -h, --<span class="built_in">help</span>             output usage information</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出可用的官方模板</span></span><br><span class="line">list [options]</span><br><span class="line">		</span><br><span class="line">		-g, --github  list all registered github projects</span><br><span class="line">    -h, --<span class="built_in">help</span>    output usage information</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新至最新版</span></span><br><span class="line">upgrade [options]</span><br><span class="line"></span><br><span class="line">		--cli   upgrade wepy-cli</span><br><span class="line">    --wepy  upgrade wepy</span><br><span class="line">    -h, --<span class="built_in">help</span>  output usage information</span><br></pre></td></tr></table></figure>



<h4 id="wepy-文件结构"><a href="#wepy-文件结构" class="headerlink" title="wepy 文件结构"></a><code>wepy</code> 文件结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── dist                   小程序运行代码目录（该目录由WePY的build指令自动编译生成，请不要直接修改该目录下的文件）</span><br><span class="line">├── node_modules           </span><br><span class="line">├── src                    代码编写的目录（该目录为使用WePY后的开发目录）</span><br><span class="line">|   ├── components         WePY组件目录（组件不属于完整页面，仅供完整页面或其他组件引用）</span><br><span class="line">|   |   ├── com_a.wpy      可复用的WePY组件a</span><br><span class="line">|   |   └── com_b.wpy      可复用的WePY组件b</span><br><span class="line">|   ├── pages              WePY页面目录（属于完整页面）</span><br><span class="line">|   |   ├── index.wpy      index页面（经build后，会在dist目录下的pages目录生成index.js、index.json、index.wxml和index.wxss文件）</span><br><span class="line">|   |   └── other.wpy      other页面（经build后，会在dist目录下的pages目录生成other.js、other.json、other.wxml和other.wxss文件）</span><br><span class="line">|   └── app.wpy            小程序配置项（全局数据、样式、声明钩子等；经build后，会在dist目录下生成app.js、app.json和app.wxss文件）</span><br><span class="line">└── package.json           项目的package配置</span><br></pre></td></tr></table></figure>



<h4 id="wepy，为异步API启用Promise"><a href="#wepy，为异步API启用Promise" class="headerlink" title="wepy，为异步API启用Promise"></a>wepy，为异步API启用Promise</h4><p>修改 <code>app.wpy</code> 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">// 通过下面这一行代码，可以为异步的API，</span></span><br><span class="line">    <span class="comment">// 开启Promise功能，这样，异步API调用的结果，返回值是Promise对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">use</span>(<span class="string">&#x27;promisify&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="将页面的业务逻辑抽离到单独的-mixin-文件"><a href="#将页面的业务逻辑抽离到单独的-mixin-文件" class="headerlink" title="将页面的业务逻辑抽离到单独的 mixin 文件"></a>将页面的业务逻辑抽离到单独的 <code>mixin</code> 文件</h4><blockquote>
<p>精简小程序页面的代码，将 <code>script</code> 中的业务逻辑抽离到对应的 <code>mixin</code> 文件中</p>
</blockquote>
<ul>
<li>抽离的文件路径 <code>src -&gt; mixins -&gt; index.js</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">&#x27;wepy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">extens</span> wepy.<span class="property">mixin</span> &#123;</span><br><span class="line">  data = &#123;&#125;</span><br><span class="line">  methods = &#123;&#125;</span><br><span class="line">  computed = &#123;&#125;</span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// ,..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对应页面导入抽离出去的 <code>js</code> 文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">&#x27;wepy&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 导入js，@为 src 层的绝对路径</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> mix <span class="keyword">from</span> <span class="string">&#x27;@/mixins/index.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">extends</span> wepy.<span class="property">page</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 导入并挂载</span></span></span><br><span class="line"><span class="language-javascript">  mixins = [mix]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>异步函数中更新数据的时候需要手动触发渲染 <code>this.$apply()</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><span class="exturl" data-url="aHR0cHM6Ly90ZW5jZW50LmdpdGh1Yi5pby93ZXB5">小程序框架 - WePY<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly90ZW5jZW50LmdpdGh1Yi5pby93ZXB5L2RvY3VtZW50Lmh0bWwjLy4vZG9jLmNsaT9pZD0lZTQlYmQlYmYlZTclOTQlYTgtdXNhZ2U=">wepy-cli<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jb25maWcuaHRtbA==">小程序文档<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20va29sZXI3NzgvaG11Z28=">黑马优购项目<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>项目总结</tag>
        <tag>微信</tag>
        <tag>wepy</tag>
      </tags>
  </entry>
  <entry>
    <title>[项目] 折腾hexo + next</title>
    <url>/posts/3dbb4ed7/</url>
    <content><![CDATA[<ul>
<li><p>hexo 安装</p>
</li>
<li><p>使用 Next 主题</p>
</li>
<li><p>创建页面</p>
</li>
<li><p>本文无亮点，观看需谨慎。</p>
</li>
<li><p>最后想说，先去翻翻官方文档，再看第三方的，毕竟，官方的才正宗。</p>
</li>
</ul>
<span id="more"></span>

<h2 id="下载安装hexo"><a href="#下载安装hexo" class="headerlink" title="下载安装hexo"></a><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">下载安装hexo<i class="fa fa-external-link-alt"></i></span></h2><p>这一步没什么难度，就像官网所说的一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>一行命令解决，当然，首先你要安装上node.js</p>
<p>然后就是创建文件夹，安装 <code>hexo</code> 依赖，运行，这样你的博客就搭建起来了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>然后就是自定义自己网站的标题，作者。。。</p>
<p>统一在 <code>_config.yml</code> 文件内。详情信息，请翻官方文档。</p>
<h3 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=">hexo 命令<i class="fa fa-external-link-alt"></i></span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">hexo init blog </span><br><span class="line"><span class="comment"># 开启 heox 服务器</span></span><br><span class="line">hexo s || hexo server</span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g || hexo generate</span><br></pre></td></tr></table></figure>



<h2 id="Next-主题"><a href="#Next-主题" class="headerlink" title="Next 主题"></a><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v">Next 主题<i class="fa fa-external-link-alt"></i></span></h2><p>在刚开始用主题的时候，各种不熟悉，导致怎么都不会用，后来渐渐的对<code>Next</code> 有了新的认知，不仅美观，而且还优雅，功能还有一大堆。最主要的是还有官方文档说明。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>并将主题放在 <code>hexo</code> 下的<code>/themes</code> 文件夹中。</p>
<p>接下来修改 <code>hexo</code> 根目录下的 <code>_config.yml</code> 文件中的 <code>theme</code> 修改为主题名 </p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/20191221115435.jpg"></p>
<h2 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h2><h3 id="添加-标签-页面"><a href="#添加-标签-页面" class="headerlink" title="添加 [标签] 页面"></a>添加 [标签] 页面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<h3 id="添加-分类-页面"><a href="#添加-分类-页面" class="headerlink" title="添加 [分类] 页面"></a>添加 [分类] 页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<h3 id="添加-关于-页面"><a href="#添加-关于-页面" class="headerlink" title="添加 [关于] 页面"></a>添加 [关于] 页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>关于 <code>md</code> 文件位置： <code>blog/source/about/index.md</code></p>
<p>修改内容，即可修改 关于 页面内容。</p>
<blockquote>
<p>tips: 标签和分类页面的 <code>md</code> 文件 修改无效果，页面是自动生成的。</p>
</blockquote>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s || hexo server</span><br><span class="line">	-s <span class="comment"># 启动静态页面</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>项目总结</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>指令示调起一个弹窗Vue和React版本（未完成版）</title>
    <url>/posts/51cf0c91/</url>
    <content><![CDATA[<p>该功能在Vue、React版本实现起来思路一致。</p>
<p><strong>核心思路</strong></p>
<ul>
<li>使用一个函数，可以创建组件实例</li>
<li>将新创建的实例，挂载到 DOM 上</li>
<li>如果有特殊场景，需要将上下文进行绑定（本文内实现的暂未绑定上下文）</li>
</ul>
<p>TODO: ant-design 在新版本实现了可以绑定上下文的 hooks，<code>Modal.useModal</code>，具体还没细看👀，后续有空再看看。</p>
<span id="more"></span>


<h2 id="Vue-实现"><a href="#Vue-实现" class="headerlink" title="Vue 实现"></a>Vue 实现</h2><ol>
<li>首先定义一个 <code>CustomModal.vue</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;modal-container&quot; v-if=&quot;visible&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;button @click=&quot;closeModal&quot; class=&quot;close-btn&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, defineExpose, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const visible = ref(false);</span><br><span class="line"></span><br><span class="line">const openModal = () =&gt; &#123;</span><br><span class="line">  visible.value = true;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const closeModal = () =&gt; &#123;</span><br><span class="line">  visible.value = false;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">watch(visible, val =&gt; &#123;</span><br><span class="line">  console.log(&#x27;%c [custom modal val ]-24&#x27;, &#x27;font-size:13px; background:#1c4295; color:#6086d9;&#x27;, val)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  visible,</span><br><span class="line">  openModal,</span><br><span class="line">  closeModal,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.modal-container &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  z-index: 999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.modal-content &#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.close-btn &#123;</span><br><span class="line">  background-color: #4299e1;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义指令 <code>showModal</code> 方法，写在 <code>modal.js</code> 中，核心代码在这里</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, nextTick, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showModal</span>(<span class="params">component</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个 Vue 示例</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(component);</span><br><span class="line">  <span class="comment">// 创建一个容器，用来放 Modal 组件</span></span><br><span class="line">  <span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将内容挂载到页面</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(root);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 Modal 组件挂载到页面上</span></span><br><span class="line">  <span class="keyword">const</span> instance = app.<span class="title function_">mount</span>(root);</span><br><span class="line">  <span class="comment">// 手动调用组件内部函数，展示组件</span></span><br><span class="line">  instance.<span class="title function_">openModal</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义卸载函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">unmount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    app.<span class="title function_">unmount</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(root);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听 Modal 组件是否关闭</span></span><br><span class="line">  <span class="title function_">watch</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> instance.<span class="property">visible</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">nextTick</span>(unmount);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    instance,</span><br><span class="line">    unmount,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在调用处使用</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;handleOpen&quot;&gt;打开模态框&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; showModal &#125; from &#x27;./modal.js&#x27;</span><br><span class="line">import CustomModal from &#x27;./CustomModal.vue&#x27;</span><br><span class="line"></span><br><span class="line">function handleOpen() &#123;</span><br><span class="line">  showModal(CustomModal)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="React-实现"><a href="#React-实现" class="headerlink" title="React 实现"></a>React 实现</h2><p>一样的步骤</p>
<ol>
<li>首先实现一个 <code>CustomModal.tsx</code></li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; forwardRef, useImperativeHandle, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ModalProps</span> &#123;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  defaultVisible?: <span class="built_in">boolean</span>;</span><br><span class="line">  onAfterClose?: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Modal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">ModalProps</span>&gt; = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; children, defaultVisible, onAfterClose &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [isVisible, setIsVisible] = <span class="title function_">useState</span>(defaultVisible ?? <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">openModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsVisible</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">closeModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsVisible</span>(<span class="literal">false</span>);</span><br><span class="line">    onAfterClose?.()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      openModal,</span><br><span class="line">      closeModal,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isVisible &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">position:</span> &#x27;<span class="attr">fixed</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">top:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">backgroundColor:</span> &#x27;<span class="attr">rgba</span>(<span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">0.5</span>)&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">justifyContent:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">zIndex:</span> <span class="attr">999</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">backgroundColor:</span> &#x27;<span class="attr">white</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">padding:</span> &#x27;<span class="attr">20px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">borderRadius:</span> &#x27;<span class="attr">5px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">boxShadow:</span> &#x27;<span class="attr">0</span> <span class="attr">2px</span> <span class="attr">4px</span> <span class="attr">rgba</span>(<span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">0.2</span>)&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;closeModal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">backgroundColor:</span> &#x27;#<span class="attr">4299e1</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">padding:</span> &#x27;<span class="attr">8px</span> <span class="attr">16px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">border:</span> &#x27;<span class="attr">none</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">borderRadius:</span> &#x27;<span class="attr">4px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">cursor:</span> &#x27;<span class="attr">pointer</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              Close</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Modal</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义指令 <code>showModal</code> 方法，写在 <code>modal.ts</code> 中，核心代码在这里</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">showModal</span> (<span class="params"><span class="attr">node</span>: <span class="title class_">React</span>.<span class="title class_">ReactElement</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 一样的流程，新创建一个 dom</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// 挂载到文档中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(app)</span><br><span class="line">  <span class="comment">// 创建一个 React 实例</span></span><br><span class="line">  <span class="keyword">const</span> root = <span class="title function_">createRoot</span>(app)</span><br><span class="line">  <span class="comment">// 进行渲染</span></span><br><span class="line">  root.<span class="title function_">render</span>(node)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 卸载函数</span></span><br><span class="line">    <span class="attr">unmount</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      root.<span class="title function_">unmount</span>()</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(app)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在调用处使用</li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; showModal &#125; <span class="keyword">from</span> <span class="string">&#x27;./modal.ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CustomModal</span> <span class="keyword">from</span> <span class="string">&#x27;./CustomModal.tsx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleOpenModal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> modal = <span class="title function_">showModal</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">CustomModal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onAfterClose</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          &#123;/* 关闭后进行卸载 */&#125;</span></span><br><span class="line"><span class="language-xml">          modal.unmount();</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleOpenModal&#125;</span>&gt;</span>打开模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdXphbi92YW50L2Jsb2IvM2Q1NWM4N2Q0Y2ZjZmQyNzg5NWRkNjFlNWQ4ZjUwOTMyMjA3Y2MwYy9wYWNrYWdlcy92YW50L3NyYy90b2FzdC9mdW5jdGlvbi1jYWxsLnRzeCNMNDQ=">vant 实现源码(Vue)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC91dGlsL2Jsb2IvN2FhYTFkODgxNzRiMzBkN2ZiOWM5NGI0MWI3YTM0Y2VhNWZjMzdmMy9zcmMvUmVhY3QvcmVuZGVyLnRzI0w0OA==">ant-design 实现源码(React)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Vue, react</tag>
      </tags>
  </entry>
  <entry>
    <title>通过loader实现打包优化</title>
    <url>/posts/bffc2e83/</url>
    <content><![CDATA[<blockquote>
<p>一句话总结：通过配置 <code>pitching-loader</code> 实现按需打包，实现开发模式下打包加速。</p>
</blockquote>
<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在翻项目代码时，发现了个比较有意思的设计，总结下来。</p>
<p>适用于当前端项目单一仓库项目比较庞大，而且还是SPA页面时，需要解决使用 <code>webpack</code> 打包会非常之缓慢问题。</p>
<p>若前端项目页面刚好是按照业务维度划分，所以只需要按照启动时配置秩序打包指定文件夹即可。</p>
<h2 id="解法思路"><a href="#解法思路" class="headerlink" title="解法思路"></a>解法思路</h2><p>使用 <code>webpack</code> 自定义 <code>loader</code> 过滤跳过打包文件，进而加快打包速度。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvYXBpL2xvYWRlcnMjcGl0Y2hpbmctbG9hZGVy">pitching-loader<i class="fa fa-external-link-alt"></i></span> 刚好可以在处理前进行判断，具体可看官方。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldXRyaW5vanMvd2VicGFjay1jaGFpbg==">webpack-chain<i class="fa fa-external-link-alt"></i></span> 进行修改 <code>webpack</code> 配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在开发环境下配置一个自定义loader</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">BUILD_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">  chain.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;vue&#x27;</span>).<span class="title function_">use</span>(<span class="string">&#x27;vue-loader-v15&#x27;</span>).<span class="title function_">loader</span>(<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./loaders/partial-loader.js&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// partial-loader.js 实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SUB_APP 为当前启动需运行的项目（需打包的文件夹名）</span></span><br><span class="line"><span class="keyword">const</span> knownModule = [</span><br><span class="line">  <span class="string">&#x27;folder-a&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;folder-b&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;folder-c&#x27;</span>,</span><br><span class="line">].<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i !== process.<span class="property">env</span>.<span class="property">SUB_APP</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需排除打包的文件夹名称</span></span><br><span class="line"><span class="keyword">let</span> excluded = [...knownModule]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSkippedPartial</span>(<span class="params"><span class="variable language_">module</span>, resourceQuery, resourcePath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isForceLoad = resourceQuery &amp;&amp; resourceQuery.<span class="title function_">indexOf</span>(<span class="string">&#x27;force&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (isForceLoad) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;强制 build&#x27;</span>, resourcePath)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> includedReg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^((?!<span class="subst">$&#123;excluded.join(<span class="string">&#x27;|&#x27;</span>)&#125;</span>).)*$`</span>)</span><br><span class="line">  <span class="keyword">const</span> isExluded = resourcePath &amp;&amp; !resourcePath.<span class="title function_">match</span>(includedReg)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isForceLoad &amp;&amp; isExluded) &#123;</span><br><span class="line">    <span class="keyword">let</span> requiredByRoute = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> issuer = <span class="variable language_">module</span>.<span class="property">issuer</span></span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (i &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!issuer) &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (issuer.<span class="property">resource</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;routes.config.js&#x27;</span>)) &#123;</span><br><span class="line">          requiredByRoute = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        issuer = issuer.<span class="property">issuer</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      requiredByRoute = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (requiredByRoute) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;忽略 build&#x27;</span>, resourcePath)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">code</span> =&gt;</span> code</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">pitch</span> = <span class="keyword">function</span> <span class="title function_">pitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isSkippedPartial</span>(<span class="variable language_">this</span>.<span class="property">_module</span>, <span class="variable language_">this</span>.<span class="property">resourceQuery</span>, <span class="variable language_">this</span>.<span class="property">resourcePath</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29udHJpYnV0ZS93cml0aW5nLWEtbG9hZGVyLw==">编写 loader<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用骨架屏减少首屏白屏现象</title>
    <url>/posts/952634cd/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户从输入 <code>url</code> 到打开页面，经历的步骤可以参考<span class="exturl" data-url="aHR0cHM6Ly9wb3ByaW5nLmdpdGh1Yi5pby8yMDIxLzAzLzA2LyVFNyVBRSU4MCVFNSU4RCU5NSVFOCU4MSU4QS8lRTQlQkIlOEUlRTglQkUlOTMlRTUlODUlQTV1cmwlRTUlODglQjAlRTklQTElQjUlRTklOUQlQTIlRTYlOTglQkUlRTclQTQlQkElRTclQkIlOEYlRTglQkYlODclRTQlQkElODYlRTQlQkIlODAlRTQlQjklODgv">这里<i class="fa fa-external-link-alt"></i></span>。现代前端应用程序通常使用 <code>React</code>、<code>Vue</code>、<code>Angular</code>、<code>Solid</code> 等框架进行开发，这些框架统一管理工程化内容。</p>
<p>这也导致了一个问题：通过这些框架开发的单页面应用（SPA）通常只包含一个 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，而其余内容都是在后续脚本运行时动态渲染。这使得用户加载的 HTML 页面往往呈现为白屏，只有等到脚本解析执行后，内容才会呈现。因此，服务端渲染（SSR）应运而生，它在服务器端就将内容渲染好并返回给前端，虽然这需要整体改造项目，成本较高。另一种方案是使用首屏骨架图渲染，以减少白屏现象。</p>
<span id="more"></span>


<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>骨架屏的原理是直接将骨架图嵌入 HTML 中，实际内容加载完毕后将骨架图替换为真实内容。</p>
<h2 id="生成骨架屏的方式"><a href="#生成骨架屏的方式" class="headerlink" title="生成骨架屏的方式"></a>生成骨架屏的方式</h2><ol>
<li><strong>单独编写骨架屏样式并注入</strong>：需要手动维护样式。</li>
<li><strong>使用骨架屏图片</strong>：适合简单场景，但不够灵活。</li>
<li><strong>自动生成骨架屏</strong>：<ul>
<li><code>page-skeleton-webpack-plugin</code>：不再维护，不推荐。</li>
<li>使用 Chrome 插件生成骨架屏，比如 <code>@killblanks/skeleton-ext</code>，效果不错，但样式需要微调。</li>
<li>自定义实现，原理简单，将页面的文字和图片替换为骨架图形式。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvdml0ZS1za2VsZXRvbi9ibG9iL21haW4vdGVtcGVybW9ua2V5L2dlblNrZWxldG9uLmpz">参考源码<i class="fa fa-external-link-alt"></i></span>。如果你恰巧有 <code>油猴</code> 插件，也可以直接安装脚本使用<span class="exturl" data-url="aHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy96aC1DTi9zY3JpcHRzLzUwOTg3NS1za2VsZXRvbnNjcmlwdA==">点击直达<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ol>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="注入代码-1-注入进-app-内"><a href="#注入代码-1-注入进-app-内" class="headerlink" title="注入代码 1 - 注入进 #app 内"></a>注入代码 1 - 注入进 <code>#app</code> 内</h3><p>这里我使用的是 <code>vite</code> 打包工具，<code>webpack</code> 可以使用类似的方法。</p>
<p>首先需要编写一个插件，在生成时修改 HTML 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /plugins/skeletonPlugin.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PluginOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename = <span class="title function_">join</span>(__dirname, <span class="string">&#x27;./homeSkeleton.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SkeletonPlugin</span>(<span class="params"></span>): <span class="title class_">PluginOption</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;SkeletonPlugin&#x27;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">transformIndexHtml</span>(<span class="params">html</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> content = (<span class="keyword">await</span> <span class="keyword">import</span>(filename)).<span class="property">default</span>;</span><br><span class="line">      <span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;script id=&quot;skeleton-script&quot;&gt;</span></span><br><span class="line"><span class="string">var map = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(content)&#125;</span></span></span><br><span class="line"><span class="string">var pathname = window.location.pathname</span></span><br><span class="line"><span class="string">var target = map[pathname]</span></span><br><span class="line"><span class="string">var content = target &amp;&amp; target.html || &#x27;&#x27;</span></span><br><span class="line"><span class="string">content &amp;&amp; (document.querySelector(&#x27;#skeleton-script&#x27;).parentElement.innerHTML += content)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">      <span class="keyword">return</span> html.<span class="title function_">replace</span>(<span class="regexp">/__SKELETON_CONTENT__/</span>, code);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 HTML 中，<code>&lt;div id=&quot;root&quot;&gt;</code> 内部增加内容 <code>__SKELETON_CONTENT__</code>，以便填充骨架屏。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/vite.svg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite + React + TS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>__SKELETON_CONTENT__<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /plugins/homeSkeleton.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&#x27;/home&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">html</span>: <span class="string">`&lt;div&gt;xxx 骨架图内容 xxx&lt;/div&gt;`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，页面入口的 <code>&lt;script&gt;</code> 需要设置为 <code>defer</code>，以确保骨架图代码生效，避免阻塞后续代码执行。</p>
<p>粗糙一点的实现是，在 <code>plugins/skeletonPlugin.ts</code> 中暴力将所有 <code>&lt;script&gt;</code> 标签新增 <code>defer</code> 属性，虽然这种方式不够优雅，但可以解决问题。（这里有误，第二节已解释并修改）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /plugins/skeletonPlugin.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PluginOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename = <span class="title function_">join</span>(__dirname, <span class="string">&#x27;./homeSkeleton.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SkeletonPlugin</span>(<span class="params"></span>): <span class="title class_">PluginOption</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;SkeletonPlugin&#x27;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">transformIndexHtml</span>(<span class="params">html</span>) &#123;</span><br><span class="line">      <span class="comment">// 新增</span></span><br><span class="line">      <span class="keyword">const</span> modifiedHtml = html.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;script&#x27;</span>, <span class="string">&#x27;&lt;script defer&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> content = (<span class="keyword">await</span> <span class="keyword">import</span>(filename)).<span class="property">default</span>;</span><br><span class="line">      <span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;script id=&quot;skeleton-script&quot;&gt;</span></span><br><span class="line"><span class="string">var map = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(content)&#125;</span></span></span><br><span class="line"><span class="string">var pathname = window.location.pathname</span></span><br><span class="line"><span class="string">var target = map[pathname]</span></span><br><span class="line"><span class="string">var content = target &amp;&amp; target.html || &#x27;&#x27;</span></span><br><span class="line"><span class="string">content &amp;&amp; (document.querySelector(&#x27;#skeleton-script&#x27;).parentElement.innerHTML += content)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">      <span class="keyword">return</span> modifiedHtml.<span class="title function_">replace</span>(<span class="regexp">/__SKELETON_CONTENT__/</span>, code);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvdml0ZS1za2VsZXRvbi90cmVlL3Yx">https://github.com/popring/vite-skeleton/tree/v1<i class="fa fa-external-link-alt"></i></span></p>
<p>至此，该方案基本完成。<strong>然而在实际应用中，仍会出现白屏闪烁现象，这是由于框架加载页面时的异步加载导致的，首先渲染根路由信息，然后才会渲染具体路由的信息，因此该方案有待进一步完善。</strong></p>
<p>想要还原这种场景只需要在路由位置加一个 <code>Suspense</code> 标签就可以</p>
<p>改动位置：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvdml0ZS1za2VsZXRvbi9jb21taXQvN2MwZWNjYjQxMDZiZTk5ZjI4YzcxMDZjYjdmZDE1ODQyMDNhMzFlMw==">https://github.com/popring/vite-skeleton/commit/7c0eccb4106be99f28c7106cb7fd1584203a31e3<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202411141706673.gif"></p>
<p>如图，可以很明显看出白屏情况</p>
<h3 id="注入代码-2-优化，显示在页面最上层"><a href="#注入代码-2-优化，显示在页面最上层" class="headerlink" title="注入代码 2 - 优化，显示在页面最上层"></a>注入代码 2 - 优化，显示在页面最上层</h3><p>可以将骨架屏渲染在一个空的 <code>div</code> 中，并通过 <code>fixed</code> 样式将其固定在页面的最上层。随后，监听页面实际渲染的状态，页面渲染完成后将骨架图隐藏，从而在视觉上达到良好的效果。</p>
<p><strong>新增改动1：</strong>script defer修改，经调试 <code>vite</code> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL2Jsb2IvZTU5ZTJjYWNhYjQ3NjMwNWMzY2RmYjMxNzMyYzI3YjE3NGZiOGZlMi9wYWNrYWdlcy92aXRlL3NyYy9ub2RlL3BsdWdpbnMvaHRtbC50cyNMNzIz">源码<i class="fa fa-external-link-alt"></i></span> 发现已内置 <code>async</code>，另外，由于 type&#x3D;”module” 情况默认就是 <code>defer</code> , 所以其实不需要加都可以。（尴尬）</p>
<p><strong>新增改动2：</strong>plugin注入代码调整：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PluginOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&#x27;node:fs/promises&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 骨架图映射数据</span></span><br><span class="line"><span class="keyword">const</span> filename = <span class="title function_">join</span>(__dirname, <span class="string">&#x27;./homeSkeleton.js&#x27;</span>);</span><br><span class="line"><span class="comment">// 骨架图展示隐藏逻辑</span></span><br><span class="line"><span class="keyword">const</span> code = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./script.js&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SkeletonPlugin</span>(<span class="params"></span>): <span class="title class_">PluginOption</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;SkeletonPlugin&#x27;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">transformIndexHtml</span>(<span class="params">html</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> content = (<span class="keyword">await</span> <span class="keyword">import</span>(filename)).<span class="property">default</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        html,</span><br><span class="line">        <span class="attr">tags</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">            <span class="attr">injectTo</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: <span class="string">`var map=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(content)&#125;</span>;<span class="subst">$&#123;code&#125;</span>`</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>script.js</code> 内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wrapId = <span class="string">&#x27;skeleton-overlay&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showSkeleton</span>(<span class="params">content</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(wrapId)</span><br><span class="line">  <span class="keyword">if</span> (sEl) &#123;</span><br><span class="line">    sEl.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> += content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeSkeleton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> skeletonDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(wrapId);</span><br><span class="line">  <span class="keyword">if</span> (skeletonDom) &#123;</span><br><span class="line">    skeletonDom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">matchPathname</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pathname = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">var</span> target = map[pathname];</span><br><span class="line">  <span class="keyword">var</span> content = (target &amp;&amp; target.<span class="property">html</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数，用于检查节点或其子节点是否包含指定类名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasClassName</span>(<span class="params">node, className</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">classList</span>.<span class="title function_">contains</span>(className)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> child <span class="keyword">of</span> node.<span class="property">children</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasClassName</span>(child, className)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observeDOMChangesForClassName</span>(<span class="params">targetNode, targetClassName, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutations</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> mutation <span class="keyword">of</span> mutations) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> addedNode <span class="keyword">of</span> mutation.<span class="property">addedNodes</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addedNode.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 检查当前节点及其子节点是否包含指定类名</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">hasClassName</span>(addedNode, targetClassName)) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(addedNode);</span><br><span class="line">            observer.<span class="title function_">disconnect</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  observer.<span class="title function_">observe</span>(targetNode, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="title function_">matchPathname</span>();</span><br><span class="line">  <span class="keyword">if</span> (content) &#123;</span><br><span class="line">    <span class="comment">// 展示骨架图</span></span><br><span class="line">    <span class="title function_">showSkeleton</span>(content);</span><br><span class="line">    <span class="comment">// DOM中出现指定元素，隐藏骨架图</span></span><br><span class="line">    <span class="title function_">observeDOMChangesForClassName</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="string">&#x27;product-list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hidden showSkeleton&#x27;</span>);</span><br><span class="line">      <span class="title function_">removeSkeleton</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">startCheck</span>();</span><br></pre></td></tr></table></figure>

<p>实现效果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/popring/assets-repo/master/img/202409240252167.gif"></p>
<p><strong>最终代码</strong><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvdml0ZS1za2VsZXRvbg==">GitHub 链接<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文主要是根据实践提出骨架图实现思路，其中代码有挺多可以优化的地方，切勿直接搬运到项目中落地，有问题欢迎指出。</p>
<blockquote>
<p>参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjYxNzI2ODU5Mjcy">Vue项目骨架屏注入实践<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTA5MDgzNzA4NDYzNzc1NzUy">一个前端非侵入式骨架屏自动生成方案<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-70.爬楼梯</title>
    <url>/posts/3a506125/</url>
    <content><![CDATA[<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<p>示例 1：</p>
<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶<br>示例 2：</li>
</ol>
<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2xpbWJpbmctc3RhaXJz">https://leetcode-cn.com/problems/climbing-stairs<i class="fa fa-external-link-alt"></i></span><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<span id="more"></span>



<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><blockquote>
<p>实测，这个会超时</p>
<p>时间复杂度：O(n^2)</p>
<p>空间复杂度：O(n)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">climbStairs</span>(n-<span class="number">1</span>) + <span class="title function_">climbStairs</span>(n-<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="递归缓存（记忆化递归）"><a href="#递归缓存（记忆化递归）" class="headerlink" title="递归缓存（记忆化递归）"></a>递归缓存（记忆化递归）</h2><blockquote>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type">Array</span>&#125; steps </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairsMemo = <span class="keyword">function</span> (<span class="params">steps, n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (steps[n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> steps[n]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        steps[n] = n</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        steps[n] = <span class="title function_">climbStairsMemo</span>(steps, n - <span class="number">1</span>) + <span class="title function_">climbStairsMemo</span>(steps, n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> steps = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">climbStairsMemo</span>(steps, n)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> steps = []</span><br><span class="line">    steps[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    steps[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        steps[i] = steps[i-<span class="number">1</span>] + steps[i-<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> steps[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="动态规划优化版（斐波那契数列）"><a href="#动态规划优化版（斐波那契数列）" class="headerlink" title="动态规划优化版（斐波那契数列）"></a>动态规划优化版（斐波那契数列）</h2><blockquote>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(1)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="number">1</span>, second = <span class="number">2</span>, res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res = first + second</span><br><span class="line">        first = second</span><br><span class="line">        second = res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蛤蟆先生去看心理医生</title>
    <url>/posts/b3c57b13/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNTE0Mzc5MC8=">蛤蟆先生去看心理医生-豆瓣<i class="fa fa-external-link-alt"></i></span></p>
<p>《蛤蟆先生去看心理医生》的作者 罗伯特·戴博德 核心观点是：</p>
<p>心理治疗是帮助自我觉察的过程：心理治疗可以帮助我们深入探索自己，理解深藏在内心的痛苦、焦虑、愤怒等情绪，并从根源上找到它们的来源。自我觉察是心理成长的第一步，它有助于找到并释放内心的负担，获得内在的自由。</p>
<p>每个人的问题源自早期经验和内在冲突：每个人的情绪问题通常与早期生活经历及个人性格密切相关。蛤蟆先生的问题正是来源于过去的创伤和性格中未被解决的矛盾，书中的心理咨询过程揭示了如何识别和化解这些根源性冲突。</p>
<p>自我接纳和宽容至关重要：心理健康的重要标志是接纳不完美的自己，并在宽容自己的基础上逐步改善。当我们不再批判自己，能温柔对待自己的情绪时，才真正具备改变的能力。</p>
<p>改变需要时间和耐心：心理成长是一个循序渐进的过程，不能急于求成。蛤蟆先生通过多次的咨询和反复的探索，才逐渐理解了自己并产生了改变。心理疗愈和成长往往需要长时间的努力和陪伴。</p>
<p>勇敢面对自己是迈向内心平和的关键：蛤蟆先生在治疗中面对内心的阴影、恐惧和过往的痛苦，这一过程中充满挑战，但它让他重获平和和力量。书强调，只有当人敢于直视内心的真实情绪时，才能获得真正的解脱。</p>
<p>总结<br>罗伯特·戴博德通过这本书强调，自我觉察、接纳自己、勇敢面对内心世界 是获得心理健康和成长的核心。在心理治疗的帮助下，人们可以找到化解内心冲突的方法，并学会与自己和解。这种心理转变不仅帮助个人成长，还能带来更为平和和丰富的生活。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>心理</tag>
      </tags>
  </entry>
  <entry>
    <title>[转] how-to-do-great-work</title>
    <url>/posts/415c86c1/</url>
    <content><![CDATA[<blockquote>
<p>原文：<span class="exturl" data-url="aHR0cHM6Ly9wYXVsZ3JhaGFtLmNvbS9ncmVhdHdvcmsuaHRtbA==">How to Do Great Work<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>Paul Graham 在《How to Do Great Work》这篇文章中探讨了如何创造出卓越的工作。他提出了一些关键理念，旨在帮助读者理解成就伟大工作的核心因素。以下是文章中的主要观点及其分析：</p>
<h3 id="1-好奇心是成功的动力"><a href="#1-好奇心是成功的动力" class="headerlink" title="1. 好奇心是成功的动力"></a>1. <strong>好奇心是成功的动力</strong></h3><p>Graham 强调了好奇心在创造伟大作品中的重要性。他认为，好奇心驱动我们去探索未知、发掘新思路。它不仅是创意的源泉，也是持续创新的内在动力。通过培养好奇心，我们可以发现更多的机会，甚至打破常规思维的限制。</p>
<h3 id="2-勇于创造，数量有时决定质量"><a href="#2-勇于创造，数量有时决定质量" class="headerlink" title="2. 勇于创造，数量有时决定质量"></a>2. <strong>勇于创造，数量有时决定质量</strong></h3><p>Graham 鼓励人们不应过于追求完美，而是应当专注于大量的创造工作。虽然其中的作品不必每一件都达到完美，但通过大量创作，最终会积累出更多有价值的成果。许多伟大的创作往往源自反复实践和不断尝试。</p>
<h3 id="3-做自己感兴趣的事"><a href="#3-做自己感兴趣的事" class="headerlink" title="3. 做自己感兴趣的事"></a>3. <strong>做自己感兴趣的事</strong></h3><p>Graham 认为，伟大的作品往往来自于我们对某个事物的真正兴趣。只有当我们全身心投入自己感兴趣的工作时，才能体现出真正的热情和专注力。兴趣是驱动力，也是保证创造力持续输出的基础。</p>
<h3 id="4-敢于冒险，不惧失败"><a href="#4-敢于冒险，不惧失败" class="headerlink" title="4. 敢于冒险，不惧失败"></a>4. <strong>敢于冒险，不惧失败</strong></h3><p>伟大的工作往往伴随着风险与挑战。很多时候，追随自己的兴趣会让我们走上一条布满障碍的路，但正是这些挑战塑造了最终的成果。Graham 提出，要勇敢面对拒绝和失败，迎难而上，因为这些经历会促使我们成长。</p>
<h3 id="5-寻找优秀的同伴"><a href="#5-寻找优秀的同伴" class="headerlink" title="5. 寻找优秀的同伴"></a>5. <strong>寻找优秀的同伴</strong></h3><p>Graham 强调，和优秀的人合作能够显著提升自己的工作水平。周围的人对你的影响是巨大的，他们能为你提供灵感和支持，帮助你在创造过程中走得更远。因此，寻找并与优秀的同伴合作，是成功的重要因素。</p>
<h3 id="6-想得大，但从小做起"><a href="#6-想得大，但从小做起" class="headerlink" title="6. 想得大，但从小做起"></a>6. <strong>想得大，但从小做起</strong></h3><p>Graham 提到，虽然要有宏伟的目标，但更重要的是从小处着手。很多伟大的想法和项目，往往是从简单、实际的小目标开始的。逐步积累经验并且在过程中发现新的机会，最终才能实现更大的突破。</p>
<h3 id="7-坚持和耐心是成功的关键"><a href="#7-坚持和耐心是成功的关键" class="headerlink" title="7. 坚持和耐心是成功的关键"></a>7. <strong>坚持和耐心是成功的关键</strong></h3><p>最后，Graham 强调，伟大的作品不会一蹴而就。成功需要时间和耐心。在遇到挫折时，我们需要保持坚持不懈的态度，并从失败中吸取教训。只有通过不断努力，才能迎来成功的曙光。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Graham 的文章提供了一种如何做伟大工作的框架，强调好奇心、热情、冒险精神、同伴合作等多个因素的综合作用。他的观点适用于各个领域，尤其是在面对创作或创新任务时，能够为我们提供有价值的指导。这些思想不仅帮助我们理解成就伟大作品的路径，也启发我们在日常工作中如何提高自己的效率和成果。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>[转] how-to-learn-stuff-quickly</title>
    <url>/posts/a40a7f50/</url>
    <content><![CDATA[<blockquote>
<p>原文：<span class="exturl" data-url="aHR0cHM6Ly93d3cuam9zaHdjb21lYXUuY29tL2Jsb2cvaG93LXRvLWxlYXJuLXN0dWZmLXF1aWNrbHkv">how-to-learn-stuff-quickly<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p><strong>总结文章《How to Learn Stuff Quickly》（如何快速学习）</strong>  </p>
<p>这篇文章由 Josh W. Comeau 撰写，探讨了如何高效学习新知识，尤其是技术类内容。作者分享了自己的学习方法，并提供了一些实用技巧，帮助读者更快掌握复杂概念。  </p>
<hr>
<h3 id="文章主要内容梳理"><a href="#文章主要内容梳理" class="headerlink" title="文章主要内容梳理"></a><strong>文章主要内容梳理</strong></h3><h4 id="1-传统学习-vs-高效学习"><a href="#1-传统学习-vs-高效学习" class="headerlink" title="1. 传统学习 vs. 高效学习"></a><strong>1. 传统学习 vs. 高效学习</strong></h4><p>作者认为，传统的学习方法（如阅读文档、看教程）效率不高，容易导致被动学习。他提倡<strong>主动学习</strong>，即通过实际应用和刻意练习来加深理解。  </p>
<hr>
<h4 id="2-关键学习方法"><a href="#2-关键学习方法" class="headerlink" title="2. 关键学习方法"></a><strong>2. 关键学习方法</strong></h4><p>Josh 介绍了几个核心的学习策略，以提高学习速度和效果：  </p>
<p><strong>（1）基于项目的学习（Project-Based Learning）</strong>  </p>
<ul>
<li>直接动手做项目，逼迫自己在实践中学习。  </li>
<li>通过解决实际问题，更快掌握知识点，而不是仅仅阅读或观看教程。  </li>
<li>举例：如果学习 React，应该尝试自己构建一个小型应用，而不是只看官方文档。</li>
</ul>
<p><strong>（2）自我解释（The Feynman Technique）</strong>  </p>
<ul>
<li>费曼学习法：用自己的话解释概念，直到能够清晰、简洁地表述。  </li>
<li>通过写博客、录制视频或教别人来巩固知识。  </li>
<li>避免“假性学习”（看似懂了但无法真正应用）。</li>
</ul>
<p><strong>（3）学习的分层结构（Layered Learning）</strong>  </p>
<ul>
<li>先掌握基础概念，不追求一开始就精通所有细节。  </li>
<li>例如，在学习新技术时，先了解核心功能，然后再深入学习优化和高级用法。  </li>
<li>逐步建立知识体系，避免信息过载。</li>
</ul>
<hr>
<h4 id="3-避免常见的学习陷阱"><a href="#3-避免常见的学习陷阱" class="headerlink" title="3. 避免常见的学习陷阱"></a><strong>3. 避免常见的学习陷阱</strong></h4><p><strong>（1）过度依赖教程（Tutorial Hell）</strong>  </p>
<ul>
<li>一直跟着教程走，导致无法独立解决问题。  </li>
<li>解决方案：尝试摆脱教程，自行实现功能，即使遇到困难也不要立刻依赖外部答案。</li>
</ul>
<p><strong>（2）害怕犯错（Fear of Failure）</strong>  </p>
<ul>
<li>过于害怕犯错会阻碍学习。错误本身是学习的一部分，遇到问题时，应该主动调试、查找解决方案。</li>
</ul>
<p><strong>（3）过度优化（Premature Optimization）</strong>  </p>
<ul>
<li>一开始不必追求完美，先把基本功能实现，再逐步优化。</li>
</ul>
<hr>
<h4 id="4-具体应用举例"><a href="#4-具体应用举例" class="headerlink" title="4. 具体应用举例"></a><strong>4. 具体应用举例</strong></h4><p>Josh 用自己的经验说明这些方法的有效性，例如：  </p>
<ul>
<li>他在学习新技术时，通常会在几小时内搭建一个小项目，而不是先读完所有文档。  </li>
<li>他发现用<strong>博客文章</strong>记录自己的学习过程，对理解和记忆帮助很大。</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Josh W. Comeau 提倡<strong>主动、实践导向的学习方法</strong>，而不是被动吸收知识。他的核心建议包括：  </p>
<ol>
<li><strong>动手做项目</strong>，从实践中学习，而不是单纯看教程。  </li>
<li><strong>费曼学习法</strong>，通过教别人或自我解释来加深理解。  </li>
<li><strong>分层学习</strong>，先掌握核心概念，再逐步深入。  </li>
<li><strong>避免依赖教程</strong>，尽早独立尝试解决问题。  </li>
<li><strong>允许自己犯错</strong>，通过错误学习，而不是追求完美。</li>
</ol>
<p>如果想快速学习新技术或概念，最好的方法是<strong>尽快开始动手做项目，并在过程中不断调整和优化自己的理解</strong>。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>[转] The best way to get unstuck</title>
    <url>/posts/52aeb676/</url>
    <content><![CDATA[<blockquote>
<p>原文：<span class="exturl" data-url="aHR0cHM6Ly9wYXVsZ3JhaGFtLmNvbS9ncmVhdHdvcmsuaHRtbA==">How to Do Great Work<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>这篇文章探讨了<strong>当我们在学习、工作或创作中遇到瓶颈时，如何快速摆脱困境</strong>。作者分享了一种心理学驱动的策略，帮助人们在思维受阻时找到突破口。  </p>
<hr>
<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a><strong>核心思想</strong></h3><p>当我们感到“卡住”时，通常是因为<strong>思维陷入了死胡同</strong>，不断在同一个方向上寻找答案，却没有跳出当前的思维模式。文章提出了一种<strong>打破思维僵局的方法</strong>，核心是<strong>用不同的方式表达问题</strong>，或者<strong>换一种角度思考</strong>。  </p>
<hr>
<h3 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a><strong>具体方法</strong></h3><ol>
<li><p><strong>重新表述问题（Reframe the Problem）</strong>  </p>
<ul>
<li>有时候，我们的问题本身限制了我们的思维。例如：  <ul>
<li>❌ “为什么我不能解决这个问题？”  </li>
<li>✅ “如果换一个人来解决，他们会怎么做？”</li>
</ul>
</li>
<li>通过改变提问方式，我们的大脑会自动寻找新的路径，而不是在旧的模式里循环。</li>
</ul>
</li>
<li><p><strong>用不同的媒介表达（Use Different Mediums）</strong>  </p>
<ul>
<li>如果文字思考卡住了，可以尝试<strong>画图、列清单、口述</strong>。  </li>
<li>例如：写不出文章时，可以<strong>用语音记录自己的想法</strong>，然后再整理成文字。  </li>
<li>视觉化思考（如画思维导图）能帮助我们跳脱线性思维模式，看到新的可能性。</li>
</ul>
</li>
<li><p><strong>切换环境（Change Your Environment）</strong>  </p>
<ul>
<li>在同一个地方久了，思维容易陷入固定模式。  </li>
<li>解决方案：<strong>换个地方思考</strong>，比如去咖啡馆、公园，甚至只是换个房间。  </li>
<li>研究表明，<strong>环境变化会刺激大脑的创造力</strong>，有助于找到新的思路。</li>
</ul>
</li>
<li><p><strong>降低思维负担（Reduce Cognitive Load）</strong>  </p>
<ul>
<li>“卡住”有时候是因为大脑处理的信息过多，导致超载。  </li>
<li>解决方案：<strong>先休息一下，做点简单的事情</strong>（如散步、冥想、洗澡），让大脑自动整理信息。  </li>
<li>许多灵感都在“放空”时冒出来，而不是在拼命思考时。</li>
</ul>
</li>
<li><p><strong>借助外部视角（Seek External Input）</strong>  </p>
<ul>
<li>有时候，我们需要别人给一个<strong>不同的观点</strong>，哪怕是一个简单的问题。  </li>
<li>例如：向朋友描述问题，或者假设自己是导师，向学生解释问题。  </li>
<li>这个过程会暴露盲点，并促使大脑重组信息。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a><strong>实际应用</strong></h3><p>文章举了一些<strong>实际案例</strong>，比如：</p>
<ul>
<li><strong>作家写作卡壳</strong> → 录音口述自己的想法，再转成文字。  </li>
<li><strong>程序员调试代码</strong> → 向同事描述问题，甚至是对着橡皮鸭解释（橡皮鸭调试法）。  </li>
<li><strong>创业者陷入决策困境</strong> → 换个视角，比如问：“如果我是竞争对手，我会怎么看这个问题？”</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>如果你在学习、工作、创作中遇到瓶颈，可以尝试：</p>
<ol>
<li><strong>换个方式描述问题</strong>，找到新的思考角度。  </li>
<li><strong>用不同的表达媒介</strong>（画图、口述、列表），打破固定思维模式。  </li>
<li><strong>改变环境</strong>，让大脑获得新的刺激。  </li>
<li><strong>降低思维负担</strong>，先做点简单的事，让潜意识自动整理信息。  </li>
<li><strong>寻求外部视角</strong>，让他人的反馈帮助自己发现盲点。</li>
</ol>
<p>这篇文章的核心观点是：<strong>思维卡住时，最好的办法不是硬想，而是换个方式思考</strong>。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>[转] 对贡献有激情，对回报有信心</title>
    <url>/posts/ee47234e/</url>
    <content><![CDATA[<blockquote>
<p>本文摘录自是一位前辈的Blog</p>
</blockquote>
<p>一般的生意人，都在反复评估，自己的贡献和回报的关系。如果贡献大于回报，就说是吃亏了。贡献小于回报，就说占了便宜。<br>而我看到的伟大的公司，或者成功的生意人，发现他们有一种惊人的相似之处，总结出来，就是：<br>对贡献有激情，对回报有信心。</p>
<p><strong>贡献和回报</strong><br>打个比方，一个作家，可以关注自己写的稿子的质量（就是自己的贡献），也可以关注自己的稿酬。<br>只对自己稿酬感兴趣的，却不关心如何提高自己写的文章的质量，他会是一个越来越失败的作家。相反的，如果把所有激情投入提高自己的文章质量，而不关心稿酬的话，他才可能成为伟大的作家。<br>有“理想”的公司，都是贡献真诚的感兴趣的公司。微软的任何产品，都在看怎样提高生产率；Google的两个创始人关心的是如何更好的组织世界的信息；皮埃尔关心让世界的任何人都有可能在互联网上实现交易，而爱迪生关心的是给人类光明。。。</p>
<p><strong>回报和坚持</strong><br>如果一件事情是为了回报，这件事情很难持久。这和一个人的毅力无关。<br>当一个人还没有真正意识到自己做这件事情的意义的时候，常常会为了显而易见的回报来坚持做一些事情。但很少有事情可以让你立刻看到回报，于是会选择放弃。放弃，多半不是因为无法坚持而放弃，而是因为感觉到自己做这件事失去了意义，所以放弃。<br>写blog就是这样。如果只是很希望别人来看，来评论，就会一天访问十次自己的blog，看一看有没有人回复。不久就会精疲力尽，而且会发现，自己的努力并不会直接换来多少人回复（像我每天一篇写了第四个年头了，也不会有多少回复的）。这时，就会怀疑自己做这件事情的意义，于是就不写了。不用埋怨自己的毅力，这件事本来和毅力毫无关系。<br>而凡是能坚持的blogger，要么是把blog写给自己的，意识到每天的记录是帮助自己来整理思路，为了自己生活得更好，要么是为了兴趣，写BLOG仅仅是为了帮助别人，只关心分享，而不关心评论或者浏览量的。无论什么样的动机，只要能看到自己的努力是为了贡献，而不是回报，就会坚持。<br>只有对贡献有激情，不在乎回报的时候，你才能坚持做一件事情，就像伟大的公司因为有一个贡献的理念，才可以持久的保持激情，在取得巨大的成功以后，接着日复一日的寻找更大的贡献。<br>需要说明回报，绝不仅仅是钱，它可以是各种你追求的东西，甚至仅仅是一个指标。比如，锻炼身体，身体健康就是回报。如果不享受锻炼的过程，而是苦巴巴的咬着牙，说只要我坚持，就一定会身体好。。。八成，这种坚持不会超过一个月。这就是为了回报而坚持的例子。减肥不成功，不用怀疑自己的毅力。当你对一种新的生活方式本身没有兴趣而只是为了这种方式带来的回报来勒紧裤腰带不吃东西，又怎能让你长期的坚持？</p>
<p><strong>网站的贡献和回报</strong><br>网站如何提供给用户更多的价值，这就是贡献；如何提高访问量，这是回报。<br>我个人的体会是，回报这个东西，就像一个电闸。当你把手摸上去的话，就像摸到了高压电一样，瞬间就会感觉的迷茫，压力，并看到投机取巧的办法看起来很有吸引力，就会像一个商人一样买卖流量。但如果把手抽回来，不去碰那一个电闸，感觉立刻好了很多，开始思考比如如何帮助用户，如何给予更多，贡献更多。世界于是又回到了鸟语花香，海阔天空的状态。<br>彻底想明白自己努力到底是为了贡献了，还是为了回报，是是否可以持久的，优秀的做好一件事情的关键。</p>
<p><strong>对贡献有激情的时候，还要对回报有信心</strong><br>和对贡献的激情同等重要的是，对回报的信心，而不是置之不理。历史上成功的企业和个人，不但做出了巨大的贡献，也取得了与之相应的巨额的报酬，以及电影明星般的盛名。并不是每一个对贡献有激情的人都做得到这一点。<br>比如历史上有一个伟大的发明家（或许是最伟大的发明家之一），却鲜为人知。他就是Nikola Tesla。他发现或者开发了一系列伟大创新的基础技术，从无线电信号传输，到交流电，从特斯拉变压器到X光，荧光灯直到现代电网。他和爱迪生一起工作，却相比之下，却回报寥寥。不但老年穷困潦倒，也很少有人听说过他。1943年，这位为人类迎来电力时代的天才去世的时候，身边只有几只他捡来的病鸽子。<br>这是一个对贡献的激情却没有回报的例子。John Battelle在最近一本新书《The Search》里面就提到，Google的创始人Page就是一个深受这个故事感染的年轻人。Page说“Nikola是个伟大的发明家，但他没有取得他应该取得的成就。我喜欢发明，但同时也希望改变世界。我希望能把我的发明带到人们的手里，这样他们就可以使用我的发明，因为只有这才是真正重要的”。在发明了PageRank算法以后，到底是按照学术传统分享自己的成果，还是像商业公司一样保护自己的知识产权，是两个创办者在1997年夏天最大的问题。<br>当然，结果证明了，他们可以在像Tesla一样贡献的同时，用一种方式，来保证自己的回报。这种把贡献转换为回报方法给了他们信心，可以更专注的在贡献部分。</p>
<p><strong>回报是贡献的影子</strong><br>回报是贡献影子。我是说，如果安排得得当的话。<br>当一个人奔向太阳的时候，影子会跟着你。<br>当他追随影子的时候，他将远离太阳，远离光明，最终失去影子。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>我的几何人生-丘成桐</title>
    <url>/posts/54c0a81a/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <span class="exturl" data-url="aHR0cDovL3BhcGVyLnBlb3BsZS5jb20uY24vcm1yYi9wYy9jb250ZW50LzIwMjQxMi8yMS9jb250ZW50XzMwMDQ3NDE0Lmh0bWw=">丘成桐：我的几何人生<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>


<p> 我的几何人生 </p>
<p>   月前我在汕头参观了我出生的小洋房。这小洋房是我父母新中国成立前购置，作为我们一家人居住的。75年的老房子经汕头市大修得以重睹，非常感激人民政府的厚爱。</p>
<p>　　我也见到父亲走过的路。我发觉它和我一生走过的路、想要做的事情，何其相似！只是大时代的走向不一样，我比他幸运得多！</p>
<p>　　父亲成长于粤东蕉岭的农村，在祖父去世后生活艰苦的条件下，到厦门大学学习政治经济学，随后东渡留学日本早稻田大学。回国后正值日寇侵华，父亲奔走广东、福建、江西3省30多个地方，奋力抗日救国。</p>
<p>　　抗战胜利后，他帮助联合国救济总署在潮汕地区散发救济物品。这是个肥缺，但父亲清廉自持，不同流合污。</p>
<p>　　后来，我们一家人到了香港，我在新界元朗的农村长大，父亲在几所大专院校任教，其中一间叫崇基书院，是香港中文大学的前身。开始时父亲研究中国哲学，要从基础上认识中国文化。为了彻底了解中国儒道，他花了很多时间去研究西方哲学及印度佛学，和中国哲学比较，希望能揭橥中国文化的精髓。</p>
<p>　　我们一家10口，生活由父亲一人独支，肩负之重可以想见。但他仍然对教学充满热情，并常常写作直至深夜。他每个星期都会在家中向诸生讲述哲学，我虽不懂，但在不知不觉之间，东西哲学的精神在我心中已经产生了潜移默化的作用。</p>
<p>　　父亲一生为国，为了国家愿意舍弃一切。作为读书人，他不畏强权，不为富贵所屈。他秉持读书人的气节，颠沛中以读书思考为乐，直至英年去世，不改其志！</p>
<p>　　我现在年过七十，回顾走过的路，和父亲何其相似。只不过我屡遇明师，才有所成就。父亲去世后这61年，祖国经历了巨大的变化，改革开放大大地改变了整个社会，教育不断提升，国家欣欣向荣，华侨在海外也得到保护。</p>
<p>　　我13岁得到父亲的鼓励，开始对数学发生兴趣。父亲对我标示从哲学高台看众学的重要观点，海纳百川，而又要脚踏实地、虚怀若谷，以成就不朽之业。为学需要标心于万古之上，送怀于千载之下。这样的胸怀，对我一辈子的行事为人，影响甚深。</p>
<p>　　然而好景不长，次年父亲去世。对年幼的我可谓晴天霹雳！一家人顿失支撑，家无居留之所，食无隔夜之粮，前途茫茫，情何以堪？</p>
<p>　　幸赖母亲坚持，学业得以继续！</p>
<p>　　母亲在全家极度困难的时候，还坚持让我们上进，让我有机会去追寻我父亲向往的不朽之业。直至今天，我还记得她慈祥却是坚定的目光。</p>
<p>　　10岁时，父亲教我古文，第一篇是《礼记·檀弓下》的《嗟来之食》，第二篇是陶渊明的《五柳先生传》。</p>
<p>　　以后我才知道父亲在教我做人的道理。第一篇告诉我们做人的尊严，富贵不能淫，贫贱不能移，威武不能屈。第二篇描述陶渊明好读书，不求甚解。研求之乐，使我一生受用不尽。</p>
<p>　　父亲写他的《西洋哲学史》，在引言中引用《文心雕龙·诸子》：“嗟夫！身与时舛，志共道申，标心于万古之上，而送怀于千载之下！”</p>
<p>　　在学问上能够做出不朽的工作，这个宏愿一直激励着我。</p>
<p>　　正如“孔子厄于陈蔡”，不朽的工作，不可能都是坦途，所以父亲说：“寻孔颜乐处，拓万古心胸。”</p>
<p>　　做学问要达到这个境界，要学孟子说的：“我知言，我善养吾浩然之气。”</p>
<p>　　一个人的际遇，对生命的领会，会影响到我们对美的追求，对真理的认识。</p>
<p>　　所以太史公年轻时遍历天下名山大川，访寻古代遗迹民情，始得天人之际，成一家之言。</p>
<p>　　我喜欢历史，它使我增加对人生的经验，我也喜欢《史记》《左传》的文字，直抒胸臆，令我情不自已。以后我做科研遇到困难时，会朗诵秦汉古文，也会诵咏诗词，它们使我心旷神怡，回观科研，竟然若有所得。</p>
<p>　　人生的经历，不可能都是顺境，科研也如此。没有经过逆境而得到的成果，一般来说，深度总会不够。</p>
<p>　　《红楼梦》是一部伟大的作品，它花了很大的功夫去描述一个大家族的荣华富贵，通过一群妙龄女子和贾宝玉吟咏风月的爱情故事，又通过贾蓉父子、刘姥姥、尤二姐的眼睛和行止，描述秦可卿和王熙凤的种种，指出家族的问题。</p>
<p>　　小说最动人心弦的部分，却是这个大家族最后的破落。小说通过凄美的爱情故事、奢侈浮华的贵族生活、封建社会对年轻男女的桎梏，呈现大家族破落的原因和经过，引起大家深深的共鸣。</p>
<p>　　我第一次读《红楼梦》时11岁，入世不深，对书中这些男女的行为甚为不解。父亲又要求我背诵其中的诗词，初时觉得辛苦。但是在父亲去世后，我心情相当波动，也开始了解人情冷暖，家庭经济极度困难，能否继续读书成为一个重要的问题。</p>
<p>　　家庭经济产生的种种问题以外，我丧失了精神上的支柱！以前父亲告诉我做人的道理，做学问的方向，我一直跟随他的步伐，深信不疑。但是他不在了，我必须自己做决断。在极度哀伤的心情下，我决定继承父亲的遗志，这辈子必须要做出一番不朽的事业，因此必须继续我的学业。</p>
<p>　　为了能够按时交学费，我必须忍受别人的歧视，必须承接别人的白眼。在这个时候，才终于体会到孟子说的：“独孤臣孽子，其操心也危，其虑患也深”。</p>
<p>　　我在念高一那一年，对历史特别感兴趣，阅读吕思勉先生的《中国通史》，开始了解中国古代的历史，也培养了我的家国情怀。在书中的最后一页，吕先生引用了梁启超翻译的英国拜伦的诗篇，是拜伦在希腊看到波斯古墓而吟咏的作品，中间有句说，“难道我为奴为隶，今生便了？不信我为奴为隶，今生便了！”这首诗一直在鼓励我向上。</p>
<p>　　我决定要在学问上出人头地，当时实在没有其他道路可走。我可以望尽天涯路，但是我必须解决眼前的经济问题。最简单的办法是替学生补习数学，争取给家庭一点补助。我走遍了香港岛、九龙各地区，上门教授学生，我的第一个学生只低我一年级。收入也很微薄，但我还是兴致勃勃地去做。有时要走相当长的山路。为了争取时间读书，一路上拿着书本看，有时候也思考数学的问题。</p>
<p>　　当时我读遍了能找到的数学书籍，有些书籍是从吃饭钱省下来到旧书档买的。这些书并不连贯，要看运气，都是从内地运出来的，有些是中学用书，有些则是大学用书。这样子念着，虽然不求甚解，但努力用功，还是有不少裨益。</p>
<p>　　当时没有图书馆，我常跑到市区中的书店，站在书架前看书，一看就是一个多钟头！书店老板居然没有阻止我，大概是认为我好学不倦吧。</p>
<p>　　需要说的是，我看的书不是准备高考的书，任何有意义的书我都会阅读。我养成了一个习惯，无论到什么地方，我总会带着一本书，一有空就拿出来看。</p>
<p>　　尽管我在中学名列前茅，但没有得过任何奖项，我不在乎。我始终没有忘记人生的目标是成就不朽的学问。我也很清楚，如果我长期在当时的香港，顶多做个井底之蛙，香港的老师们，不可能带领我望尽天涯路。到了大学的时候，我数学的水平已经远超同侪，但是我觉得没有什么值得骄傲的地方，因为这个不是我的目标。</p>
<p>　　念大学时，我常到图书馆借书看，但是那里书并不多，也不知道主流学问的方向，走了很多冤枉路。幸好得到一位年轻老师的赏识，推荐我到加州大学伯克利分校，最终师从陈省身先生。这可以说是我做学问最大的转折点！</p>
<p>　　陈先生的名字我早有所闻。父亲去世那年，《明报月刊》转载了一篇文章，是陈先生的简要自传，叫作《学算四十年》。</p>
<p>　　看了文章，我才知道中国有数学家在海外出人头地，甚至还有如陈先生这样完成不朽之业的大师，这使我茅塞顿开，有大丈夫当如是的感觉。现在在他做学问的地方念书，教授中又不乏大师，我的精神至为振奋！</p>
<p>　　我在伯克利的第一年，陈先生到外地休假去了，但是围绕在我旁边的都是良师益友。老师有非线性微分方程大师查尔斯·莫里（Charles Morrey）、拓扑学大师埃德温·斯帕尼尔（Edwin Spanier）；年轻教授有布莱恩·劳森（Blaine Lawson）、凯伦·乌伦贝克（Karen Uhlenbeck）、多里安·戈德菲尔德（Dorian Goldfeld）、鲁弗斯·鲍恩（Rufus Bowen）、伍鸿熙；同学则有比尔·瑟斯顿（Bill Thurston）、比尔·米克斯（Bill Meeks）、约翰·米尔森（John Millson）、郑绍远等，真可谓一时之盛！</p>
<p>　　在这样的环境下，我在当年冬假20岁时完成了人生中第一篇比较有意思的论文，这篇论文在我21岁那年夏天发表在《数学年刊》（Annals of Mathematics）上。</p>
<p>　　陈先生刚好休假回来，见到我的时候，一脸笑容，大概是高兴没有押错宝吧。毕竟我在香港中文大学还没有毕业，由他力挺，进入了伯克利的研究院，虽然他是大教授，难度也还是不小的。他回到伯克利后，我请求他当我的博士指导老师。</p>
<p>　　他对我期望很高，一开始就要我解决黎曼猜想，作为博士论文的题目。但是我对这个题目的兴趣不大。陈先生是很宽容的导师，大概见我没有继续和他讨论这问题，就放弃了要我朝着这个方向走。</p>
<p>　　过了两个月后，他要求我在他的几何讨论班演讲，介绍我刚到伯克利时做的文章。这是一个很著名的几何讨论班，能够在讨论班上做演讲是个荣誉。</p>
<p>　　当天来了50多位听众，讲堂挤得水泄不通。听众中有约瑟夫·沃尔夫（Joseph Wolf）教授，他是陈先生在芝加哥大学时的博士生，是我演讲题目的专家，看来他很满意我的工作。</p>
<p>　　过了两天，陈先生叫我到他的办公室，告诉我可以毕业了，着实让我吓了一跳。</p>
<p>　　我自问学问还是不够扎实，还需要学习，但又考虑到香港家人经济不好，早一点毕业，可以让母亲和兄弟姊妹生活舒适些，所以听从了陈先生的建议。</p>
<p>　　我师从陈先生，学习了复几何的陈氏特征类，对我的学问有裨益。陈先生60岁那年，在我行将毕业时，送了一本他写的书给我，书名叫《不具位势原理的复流形》（Complex Manifolds without Potential Theory）。他在书中亲题赠言，说：“余生六十矣，薪传有人，愿共勉之。”</p>
<p>　　这几句话使我受宠若惊。30年后，我写了一副对联给陈先生，中间有句叙述此事：“留书赠言，墨迹犹在，相期未负平生。”</p>
<p>　　我父亲早逝，陈先生无论在学问还是在事业发展上的教导，都继续了我父亲的遗训，影响了我一辈子。</p>
<p>　　但是，正如我少年时没有全部听从父亲的教导一样，我喜欢探索自己的研究方向。研究院一年级时，我师事莫里先生。受他启发，我决定要以新的观点来研究几何学，利用非线性微分方程去构造几何结构，也通过几何的观念来研究非线性方程。以后郑绍远、孙理察（Richard Schoen）、凯伦·乌伦贝克、莱昂·西蒙（Leon Simon）、克利福·陶布斯（Clifford Taubes）、理查德·汉密尔顿（Richard Hamilton）、李伟光（Peter Li）等人都有同样的想法。我们共同努力，解决了一大批重要的问题。</p>
<p>　　我们创立的这个学科被称为几何分析（Geometric Analysis），直到如今，它还是数学中最重要的分支之一。</p>
<p>　　这个分支的开花结果，得到的成就，可以说无愧于先人，可以传诸后世矣！</p>
<p>　　几十年来，我希望这些科研工作也能够在祖国落地生根。在我名下毕业的博士生已经超过70名，其中大部分是华裔学者，他们不少已经回到中国，在各院校发热发光。</p>
<p>　　在国家的大力支持下，我们在清华大学成立了求真书院，期望在未来10年，能培养出一大批中国数学领军人才，使中国基础科学得以自强于世界，不负国人的厚望！</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>[转] 通配符（Wildcard）</title>
    <url>/posts/163f6156/</url>
    <content><![CDATA[<blockquote>
<p>原文：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29tcHV0ZXJob3BlLmNvbS9qYXJnb24vdy93aWxkY2FyZC5odG0=">https://www.computerhope.com/jargon/w/wildcard.htm<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>文章讲解了通配符（wildcard）的概念及其在计算机和搜索中的应用。通配符是一种特殊字符，用于替代一个或多个字符，使用户能够进行模糊搜索或匹配多个文件。常见的通配符包括星号（*）和问号（?），分别表示任意数量的字符和单个字符。文章还讨论了不同环境中通配符的具体使用方法和场景。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>OKR</title>
    <url>/posts/126fb5f9/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9PS1I=">https://baike.baidu.com/item/OKR<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>软素质</category>
      </categories>
      <tags>
        <tag>OKR</tag>
      </tags>
  </entry>
  <entry>
    <title>优势管理</title>
    <url>/posts/3b7aa6d9/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="打开自己的“乔哈里窗”"><a href="#打开自己的“乔哈里窗”" class="headerlink" title="打开自己的“乔哈里窗”"></a>打开自己的“乔哈里窗”</h2><p>分为几个维度</p>
<table>
<thead>
<tr>
<th>自己知道</th>
<th>自己不知道</th>
</tr>
</thead>
<tbody><tr>
<td>他人知道</td>
<td>他人不知道</td>
</tr>
</tbody></table>
<p>自己知道: 开放区, 知道自己喜欢和擅长，快速打造自己核心竞争力<br>自己不知道: 盲目区, 找好友列出优缺点，自己列出优缺点；比较发现自己的盲区<br>他人知道: 隐藏区, 选定1-2个天赋可以练习，主动给自己创造外化输出的机会<br>他人不知道: 未知区，多尝试开发和探索多种可能</p>
<h2 id="自我认识的五大误区"><a href="#自我认识的五大误区" class="headerlink" title="自我认识的五大误区"></a>自我认识的五大误区</h2><p><strong>误区一：自己最了解自己</strong></p>
<p>成熟的自我认知，不会因为一时的成败而撼动自信心，从而产生自我的价值怀疑。</p>
<p><strong>误区二：盲目复制</strong></p>
<p>不能盲目的活在过去的成功模式中。</p>
<p>自我认知的难点在于如何剖析自己在面对“未知世界”的生存能力，分析以往的经历中做到锐意进取、思而奋进。</p>
<p><strong>误区三：成王败寇的过山车心态</strong></p>
<p>自我认知的历程实际是一个对自己的价值逐步建立内部评测体系的过程，成熟的自我认知使得领导者不会因为一时的成败而撼动自信心，从而产生对自己价值的怀疑。</p>
<p><strong>误区四：排斥扩展个人领导风格</strong></p>
<p>成功的领导者都能采取两种以上不同的领导风格。</p>
<p>领导风格：领跑、辅助、指令、民主、亲和</p>
<p>领导风格因地制宜与坚定个人价值观并不冲突。</p>
<p><strong>误区五：战略思维与生俱来</strong></p>
<p>战略思维是可以通过实战获取经验</p>
<p>自我认知是一切管理的基石，只有了解自己才能根据自身特点选择适合的管理方式，才能成为一个合格的管理者。</p>
<h2 id="打破职业发展误区"><a href="#打破职业发展误区" class="headerlink" title="打破职业发展误区"></a>打破职业发展误区</h2><p><strong>误区一：成长过程中，人的个性会不断改变</strong></p>
<ul>
<li>真相：价值观、自我意识、技能等会变，但个性中最为核心的部分却永远不会变</li>
</ul>
<p><strong>误区二：在最弱的方面才会去的最大的进步</strong></p>
<ul>
<li>真相：在最强的方面，才会获得最大的进步</li>
</ul>
<p><strong>误区三：一个优秀的团队成员为了团队利益是愿意做任何事</strong></p>
<ul>
<li>真相：一个优秀的成员会主动发挥自己的优势，不需要为团队愿意做任何事</li>
</ul>
<p>想要摒除这些误区，问自己三个问题：</p>
<ol>
<li>是什么原因让你相信，xxx</li>
<li>如果不再相信，xxx，会有什么损失</li>
<li>如果相信xxx，你会得到什么好处</li>
</ol>
<p>打破职业发展误区，发展优势是应对竞争的最佳方式</p>
<h2 id="如何使自己的成长不跑偏"><a href="#如何使自己的成长不跑偏" class="headerlink" title="如何使自己的成长不跑偏"></a>如何使自己的成长不跑偏</h2><p>导致偏离的原因</p>
<ol>
<li>外部环境影响，如周围的人都不学习和成长</li>
<li>自身原因，如心情不好、没动力</li>
</ol>
<p>TPA 三步法：</p>
<ol>
<li><p><strong>Timing 发现时机</strong></p>
<ul>
<li>设定d定期反思时间，如每三个月时间反思</li>
<li>状态不好时</li>
<li>他人反馈时</li>
</ul>
</li>
<li><p><strong>Problem 直面问题</strong></p>
<ul>
<li>觉得自己没问题，有问题都是他人的问题</li>
<li>知道自己又问题，承认问题会让自己很不舒服</li>
<li>直面问题，拖的越久，后果越大，直面问题，写出来</li>
</ul>
</li>
<li><p><strong>Action 找出方案</strong></p>
<ul>
<li>针对主要原因，写出简单的解决方案</li>
</ul>
</li>
</ol>
<p>愿意主动反思的人都是强者，真正的强者是敢于面对自己的问题，并超越自己的问题。</p>
]]></content>
      <categories>
        <category>软素质</category>
      </categories>
      <tags>
        <tag>优势</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>六色思考帽</title>
    <url>/posts/65c3010a/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQUQlRTklQTElQjYlRTYlODAlOUQlRTglODAlODMlRTUlQjglQkQ=">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<p>六顶思考帽，是指使用六种不同颜色的帽子代表六种不同的思维模式。任何人都有能力使用以下六种基本思维模式：</p>
<p>白色思考帽：白色是中立而客观的。戴上白色思考帽，人们思考的是关注客观的事实和数据。<br>绿色思考帽：绿色代表茵茵芳草，象征勃勃生机。绿色思考帽寓意创造力和想象力。具有创造性思考、头脑风暴、求异思维等功能。<br>黄色思考帽：黄色代表价值与肯定。戴上黄色思考帽，人们从正面考虑问题，表达乐观的、满怀希望的、建设性的观点。<br>黑色思考帽：戴上黑色思考帽，人们可以运用否定、怀疑、质疑的看法，合乎逻辑的进行批判，尽情发表负面的意见，找出逻辑上的错误。<br>红色思考帽：红色是情感的色彩。戴上红色思考帽，人们可以表现自己的情绪，人们还可以表达直觉、感受、预感等方面的看法。<br>蓝色思考帽：蓝色思考帽负责控制和调节思维过程。负责控制各种思考帽的使用顺序，规划和管理整个思考过程，并负责做出结论。</p>
<p>不同场合、场景下使用不同的思考帽。</p>
]]></content>
      <categories>
        <category>软素质</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>职场效率小工具</title>
    <url>/posts/dfea4626/</url>
    <content><![CDATA[<p>这些工具都是我平时工作中经常用到的，可以帮助我们提高工作效率，提升工作质量。</p>
<span id="more"></span>

<h2 id="目标设定与管理"><a href="#目标设定与管理" class="headerlink" title="目标设定与管理"></a>目标设定与管理</h2><h3 id="SMART-法则"><a href="#SMART-法则" class="headerlink" title="SMART 法则"></a>SMART 法则</h3><p>如何设定目标</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TTUFSVCVFNSU4RSU5RiVFNSU4OCU5OS84NTc1ODUwP2Zyb210aXRsZT1TTUFSVCZmcm9taWQ9MjIzMDg4Mw==">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>S&#x3D;Specific，目标必须是具体的</li>
<li>M&#x3D;Measurable，目标必须是可以衡量的</li>
<li>A&#x3D;Attainable，目标必须是可以达到的</li>
<li>R&#x3D;Relevant，目标要与其他目标具有一定的相关性</li>
<li>T&#x3D;Time-bound，目标必须具有明确的戒指期限</li>
</ul>
<h3 id="高效-PDCA-循环法"><a href="#高效-PDCA-循环法" class="headerlink" title="高效 PDCA 循环法"></a>高效 PDCA 循环法</h3><p>Plan Do Check Act, 周而复始不断进行这四个动作，一个循环中可以解决一些问题， 未解决的问题便进入到下一次循环之中，直至问题最终解决。</p>
<ul>
<li>Plan (计划): 根据任务的目标和要求，制定科学的活动规划。</li>
<li>Do (执行)：按照预定的计划、标准，根据已知的信息，设计具体的、可运作的方案和计划，实现预期目标的过程。</li>
<li>Check (检查): 检查执行计划的实施方案和结果是否达到了目标。</li>
<li>Act (处理): 就是对总结检查的结果进行处理，总结经验并吸取教训。</li>
</ul>
<h2 id="思维与分析工具"><a href="#思维与分析工具" class="headerlink" title="思维与分析工具"></a>思维与分析工具</h2><h3 id="5W2H-分析法"><a href="#5W2H-分析法" class="headerlink" title="5W2H 分析法"></a>5W2H 分析法</h3><p>提供解决问题思路；问题分析，高效决策。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS81VzJIJUU1JTg4JTg2JUU2JTlFJTkwJUU2JUIzJTk1P2Zyb210aXRsZT01VzJIJmZyb21pZD0xNzIwMjQ1NiZmcm9tTW9kdWxlPWxlbW1hX3NlYXJjaC1ib3g=">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<p>（1）WHAT——做什么事情？如何才能做到？ - 确定工作任务<br>（2）WHY——为什么要做？理由是什么？ - 确定工作目的<br>（3）WHO——有谁参与？谁来完成？ - 确定负责人及参与人的角色和职责<br>（4）WHEN——什么时间开始？什么时间完成？ - 确定工作安排<br>（5）WHERE——在哪里做？ - 确定工作地点<br>（6）HOW ——要怎么做？如何实施？ - 确定具体方法<br>（7）HOW MUCH——做到什么程度？数量如何？费用如何？ - 盘点资源和数据</p>
<h3 id="SWOT-分析法"><a href="#SWOT-分析法" class="headerlink" title="SWOT 分析法"></a>SWOT 分析法</h3><p>Strength Weakness Opportunity Threats, 态势分析法, 将研究对象(人、公司、产品)密切相关的内部优劣势和外部机会威胁进行系统分析，得出决策性结论。</p>
<ul>
<li>S即strength（优势），是指企业自身拥有的特长或者资源，是有竞争优势的。</li>
<li>W即weakness（劣势），是指与竞争对手相比，做的不太好或没有竞争优势的地方。</li>
<li>O即opportunity（机会），是指外部环境可以寻求的发展机会。</li>
<li>T即threats（威胁），是指外部环境有可能对企业造成的不利因素。</li>
</ul>
<h3 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a>金字塔原理</h3><p>理清逻辑思路；先总后分思维模式。任何问题都可以归纳出一个中心论点，并由多个论据支持，如此延伸，状如金字塔。</p>
<p>这篇讲解的非常清晰，可供参考，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMURNNHkxNzdZcS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJnZkX3NvdXJjZT02YTlhNTdjNTkwZTIyNzJmYTZkZmNkMzdhNThlNDE1Yg==">【庞颖】专治嘴笨，帮你更高效地思考、表达和解决问题 ｜奇葩说辩手庞颖 x 《金字塔原理》<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklODclOTElRTUlQUQlOTclRTUlQTElOTQlRTUlOEUlOUYlRTclOTAlODYvMjk1OD9mcm9tTW9kdWxlPWxlbW1hX3NlYXJjaC1ib3g=">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<p>一、结论先行，以上统下：<br>先说结论，再说理由，每个理由在双击展开，上一层是下一层的总结和归纳，下一层是对上一层具体的展开的解释；</p>
<p>二、归纳分组：<br>表达的事物内容用第一第二第三罗列，这是最容易记得方法；</p>
<p>三、逻辑统一：<br>分“线性逻辑”和“平行逻辑”两者不能混用，线性逻辑让人感觉重复啰嗦，还不可与平性逻辑共同使用，“平行逻辑”是更精简，更容易被听懂接受的方法；</p>
<p>四、提炼更高的洞见：<br>从上面第二点的归纳分组延伸，找到事物之间的顺序关系，总结共性，发现更多的问题；</p>
<p>五、结构化拆解分题，MECE(Mutually Exclusive Collectively Exhaustive) 结构性解决：<br>把总体拆分成部分且部分之间不重合，帮我们更加有结构性系统性的分析问题找出解决问题</p>
<p>整体拆分成部分，之间是不重合的。<br>部分整合起来，是一个整体。</p>
<h2 id="项目管理工具"><a href="#项目管理工具" class="headerlink" title="项目管理工具"></a>项目管理工具</h2><h3 id="WBS-工作分解法"><a href="#WBS-工作分解法" class="headerlink" title="WBS 工作分解法"></a>WBS 工作分解法</h3><p>Work Breakdown Structure，工作分解结构；拆解工作项目分配</p>
<p>分解原则</p>
<ul>
<li>将主体项目逐步细化分解，每个人物要求分解到不能再细化为止，最底层的任务活动直接分派到个人完成。即项目→任务→工作→日常活动</li>
</ul>
<p>分解方式</p>
<ul>
<li>基于交付成果，上层一般以可交付成果为导向；下层一般为可交付成果的工作内容</li>
<li>基于工作过程，一般是将上层按照工作流程分解，下层按照工作内容划分</li>
</ul>
<h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><ul>
<li>可视化展现项目进度，还可详细区分出计划和实际活动完成情况</li>
<li>适合小型项目，绘制项一般不超过30项，过多会导致增加阅读难度</li>
</ul>
<h2 id="决策与优先级管理"><a href="#决策与优先级管理" class="headerlink" title="决策与优先级管理"></a>决策与优先级管理</h2><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><ul>
<li>决策树一般是自上而下生成的，每个决策或事件(即非自然状态)都可能引出两个或多个时间，导致不同结果</li>
<li>决策树一般由方块节点、圆形节点、方案支、概率支等组成</li>
<li>应用决策树进行决策时，必须具备目标、方案、变量、损益和概率等条件</li>
</ul>
<h3 id="时间管理矩阵"><a href="#时间管理矩阵" class="headerlink" title="时间管理矩阵"></a>时间管理矩阵</h3><p>时间安排规划</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTclQjYlRTklOTclQjQlRTclQUUlQTElRTclOTAlODYlRTQlQkMlOTglRTUlODUlODglRTclOUYlQTklRTklOTglQjU/ZnJvbXRpdGxlPSVFNiU5NyVCNiVFOSU5NyVCNCVFNyVBRSVBMSVFNyU5MCU4NiVFNyU5RiVBOSVFOSU5OCVCNSZmcm9taWQ9MTQ3NDc5NDgmZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<p>重要且紧急：优先去做<br>重要但不紧急：有计划的去做，避免成为重要且紧急<br>紧急但不重要：交给别人做（不认同此观点）<br>不紧急不重要：尽量少做</p>
<p>tips：推荐高效能人士的七个习惯里的时间管理方式</p>
<h2 id="团队与沟通分析"><a href="#团队与沟通分析" class="headerlink" title="团队与沟通分析"></a>团队与沟通分析</h2><h3 id="DISC-矩阵"><a href="#DISC-矩阵" class="headerlink" title="DISC 矩阵"></a>DISC 矩阵</h3><p>沟通策略，提升沟通效率；</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ESVNDLzE1ODYyMjc=">百度百科<i class="fa fa-external-link-alt"></i></span></p>
<p>DISC矩阵分析模型类似于一种测评工具，目的是通过预测他人行为性格的倾向性，更好的了解他人，获得最佳沟通策略，提高沟通效率。</p>
<p>D：Dominance属于老板型／指挥者，表现为目标明确、执行力强。不要挑战主控这类人整个沟通的欲望，显现出接纳和温和的态度，利用提供建议和暗示的方式让人更容易接受。<br>I：Influence属于社交型／影响者，表现为热爱分享、外向活泼。渴望认同和赞美；沟通前提，建立良好的社交关系，激励他们接受新主张或建议；完全对立的方式只会带来负面效果。<br>S：Steadiness属于被动型／支持者，表现为依赖和迁就。隐忍，渴望尊重和支持，给予对方帮助、安慰和指导。<br>C：Compliance属于修正型／思考者，表现为注重细节、追求卓越。工作中要拿出实际数据，证明理论无误；生活上，要有理有据不能胡编乱造不经过大脑。</p>
<h2 id="分析与解决问题"><a href="#分析与解决问题" class="headerlink" title="分析与解决问题"></a>分析与解决问题</h2><h3 id="麦肯锡七步分析法"><a href="#麦肯锡七步分析法" class="headerlink" title="麦肯锡七步分析法"></a>麦肯锡七步分析法</h3><p>理清解决问题思路</p>
<ul>
<li>明确问题<br>拆解维度：目的、效果、效率、标准等<ul>
<li>清晰的问题描述</li>
<li>界定问题考虑的方向</li>
</ul>
</li>
<li>分解问题<br>运用结构化图标，根据问题描述拆解成多个全面且、清晰易于操作的子议题，或是提出以事实的假设</li>
<li>优先排序<br>需根据关键要素、重要性程度进行排序</li>
<li>议题分析<br>根据重要问题将与其香馆的关键影响因素进行分类及分工，并制定详细地可事实计划</li>
<li>关键因素分析，分析方法如下<ul>
<li>因果分析: <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUIlQTAlRTYlOUUlOUMlRTUlODglODYlRTYlOUUlOTAvNzI1MDA4MA==">为了确定引起某一现象变化原因的分析，主要解决“为什么”的问题<i class="fa fa-external-link-alt"></i></span></li>
<li>标杆分析: <span class="exturl" data-url="aHR0cHM6Ly93aWtpLm1iYWxpYi5jb20vd2lraS8lRTYlQTAlODclRTYlOUQlODYlRTUlODglODYlRTYlOUUlOTAlRTYlQjMlOTU=">是一个系统的、持续性的评估过程，通过不断地将企业流程与世界上居领先地位的企业相比较，以获得帮助企业改善经营绩效的信息<i class="fa fa-external-link-alt"></i></span></li>
<li>趋势分析: <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjYlOEIlRTUlOEElQkYlRTUlODglODYlRTYlOUUlOTAlRTYlQjMlOTU=">通过对有关指标的各期对基期的变化趋势的分析，从中发现问题，为追索和检查账目提供线索的一种分析方法。<i class="fa fa-external-link-alt"></i></span></li>
<li>比例分析: <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQUYlOTQlRTclOEUlODclRTUlODglODYlRTYlOUUlOTAlRTYlQjMlOTUvNzk1NTQwNA==">通过财务报表的有关指标的比率计算，分析企业财务状况和经营成果，了解企业发展前景的分析方法<i class="fa fa-external-link-alt"></i></span></li>
<li>模型分析</li>
</ul>
</li>
<li>综合确认<br>对前面的计划进行分析，优化，不断完善工作计划</li>
<li>组织实施<ul>
<li>让相关人员了解分析的结果与行动方案，按既定的计划进行实施</li>
<li>对实施过程进行监督、跟踪、反馈</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>软素质</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>初入职场小白需掌握</title>
    <url>/posts/728b077a/</url>
    <content><![CDATA[<h2 id="锦囊妙计"><a href="#锦囊妙计" class="headerlink" title="锦囊妙计"></a>锦囊妙计</h2><h3 id="锦囊一"><a href="#锦囊一" class="headerlink" title="锦囊一"></a>锦囊一</h3><ul>
<li>互惠原则：长期的关系基于互惠，而非短期利益</li>
<li>心里相容：尊重差异，互为对方所接受与认同</li>
<li>自我了解：了解自我特点及不足，发挥长处</li>
<li>差异化沟通：基于 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ESVNDLzE1ODYyMjc=">DISC<i class="fa fa-external-link-alt"></i></span> 风格的差异化沟通</li>
</ul>
<h3 id="锦囊二"><a href="#锦囊二" class="headerlink" title="锦囊二"></a>锦囊二</h3><ul>
<li>真诚至上：基于双方的尊重、信任和关心</li>
<li>化繁为简：工作沟通要用 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9ub3RlLzczMDM4OTA0Ny8/X2k9NzM1Nzg5M2gyWWJQT28sNzM3NDg4M2gyWWJQT28=">PREP<i class="fa fa-external-link-alt"></i></span> 归纳法</li>
<li>数据为王：数字时代让数据说话</li>
<li>价值共创：沟通有没有打动对方？痛点或痒点</li>
<li>合适渠道：书面与口头组合</li>
</ul>
<h3 id="锦囊三"><a href="#锦囊三" class="headerlink" title="锦囊三"></a>锦囊三</h3><ul>
<li>认知清晰：为什么要做？如何可以做成？目的比目标更重要</li>
<li>问题解决：防火重于救火，行动为了达成而不是打卡</li>
<li>行动力量：保持成事所需的高水准行动不打折</li>
<li>价值制胜：工作的价值取绝于解决问题的难度</li>
</ul>
]]></content>
      <categories>
        <category>软素质</category>
      </categories>
      <tags>
        <tag>沟通</tag>
      </tags>
  </entry>
  <entry>
    <title>春招面经</title>
    <url>/posts/734ea54a/</url>
    <content><![CDATA[<blockquote>
<p>更多面经请移步：<span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL3Byb2ZpbGUvNDY0NjQ3NTg5L215RGlzY3Vzc1Bvc3Q=">https://www.nowcoder.com/profile/464647589/myDiscussPost<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="微店"><a href="#微店" class="headerlink" title="微店"></a>微店</h2><h3 id="一面电面（25min-左右）"><a href="#一面电面（25min-左右）" class="headerlink" title="一面电面（25min 左右）"></a>一面电面（25min 左右）</h3><blockquote>
<p>面了不到半个小时，我以为凉了，，，没想到中午约二面了</p>
</blockquote>
<ul>
<li>自我介绍</li>
<li>ES 6 class 继承怎么理解</li>
<li>深浅拷贝</li>
<li>实现深拷贝思路</li>
<li>如何判断函数、对象</li>
<li>从 url 输入一个地址到页面渲染经历了什么</li>
<li>https 建立过程</li>
<li>浏览器如何渲染页面，渲染过程（之前这里说的不够详细）</li>
<li>http 缓存（协商缓存少说一个，尴尬）</li>
<li>强缓存返回 http code 是多少，协商缓存返回的 http code 是多少</li>
<li>http 2.0 聊一下</li>
<li>自己实现一个脚手架，你觉得需要考虑什么</li>
<li>webpack 的 loader 和 plugin有自己写过，去了解它的原理吗</li>
<li>总结自己，竞争前端岗位，你觉得自己有哪些优势</li>
</ul>
<h3 id="二面视频面（40min）"><a href="#二面视频面（40min）" class="headerlink" title="二面视频面（40min）"></a>二面视频面（40min）</h3><blockquote>
<p>基本毫无准备，一天面两次，还是有点累的。</p>
<p>话说面试感觉面试官怕我是过来练手的，太难了。</p>
</blockquote>
<ul>
<li>自我介绍</li>
<li>介绍目前正在做的项目，在项目中负责的部分</li>
<li>项目中遇到的困难</li>
<li>栈和堆有什么区别</li>
<li>有没有深入了解过 Vue，了解的 Vue 原理有哪些</li>
<li>从 url 输入一个地址到页面渲染经历了什么</li>
<li>知道的 HTTP 请求头有哪些</li>
<li>referer 知道是什么吗</li>
<li>什么是跨域，如何解决</li>
<li>浏览器本地缓存有什么，localStorage、sessionStorage、cookie 区别</li>
<li>cookie 不能使用 js 获取或设置吗（上一题说区别时候，说cookie 一般只在服务端调用就被问了）</li>
<li>cookie 有什么字段，http-only 作用是什么</li>
<li>ts 中对 装饰器 Decorators 怎么理解</li>
<li>垂直居中布局</li>
<li>px、rpx、em、rem、vw&#x2F;vh 区别</li>
<li>有没有关注新技术的发展</li>
<li>聊一下什么是微前端（上一个问题，我提到了一嘴，就被问了）</li>
<li>场景题，移动端一个商品搜索结果页面，如果数据过大，怎么解决？（其实这里没有 get 到面试官想问的点，所以我就大概提了下服务端渲染和分页）</li>
<li>还能怎么解决，导致前端卡顿，怎么优化（长列表怎么优化，滑动窗口）</li>
<li>服务端渲染是什么</li>
<li>AST 有没有听过</li>
<li>你觉得自己竞争有什么优缺点</li>
<li>反问阶段</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>秋招实习面经</title>
    <url>/posts/11e548/</url>
    <content><![CDATA[<blockquote>
<p>更多面经请移步：<span class="exturl" data-url="aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL3Byb2ZpbGUvNDY0NjQ3NTg5L215RGlzY3Vzc1Bvc3Q=">https://www.nowcoder.com/profile/464647589/myDiscussPost<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="个人校招面经"><a href="#个人校招面经" class="headerlink" title="个人校招面经"></a>个人校招面经</h2><blockquote>
<p>有些可能写的不全，没有及时总结（这是个坏习惯），有的只是总结了下个人回答的不太好的部分，仅供参考。</p>
</blockquote>
<span id="more"></span>

<p>阿里一面（杭州）</p>
<p>面试时长：20min 左右</p>
<ul>
<li>自我介绍</li>
<li>cdn 原理</li>
<li>dns解析 原理</li>
<li>如何寻找最近一级的节点</li>
</ul>
<p>腾讯一面（深圳）</p>
<p>面试时长：20min 左右</p>
<ul>
<li>自我介绍</li>
<li>http状态码</li>
<li>输入url，到页面渲染经历了什么</li>
<li>diff 算法</li>
<li>koa 洋葱模型</li>
</ul>
<p>易的网络科技有限公司公司（厦门）</p>
<p>面试时长：30min</p>
<ul>
<li>展示下你的项目</li>
<li>介绍一下你最有成就的项目</li>
<li>了解跨域吗？有什么方法可以跨域</li>
<li>项目中用到的 axios，有用到拦截器吗？</li>
<li>后端如何进行鉴权，换句话说 token是怎么传输给后端的</li>
</ul>
<p>厦门升迅信息科技有限公司</p>
<p>面试时长：30min左右</p>
<ul>
<li>MVVM 是什么</li>
<li>Vue 和 jQuery 区别在哪里</li>
<li>Vue 生命周期函数</li>
<li>Vue 3 了解吗？和 Vue 2有哪些不一样的地方</li>
<li>localStorage 和 Vuex 区别</li>
<li>有 java 基础吗</li>
<li>想来厦门发展吗</li>
<li>什么时候可以来厦门</li>
</ul>
<p>广州市网讯信息技术有限公司</p>
<p>面试时间：30min左右</p>
<ul>
<li>自我介绍</li>
<li>有做过微信端开发吗</li>
<li>有做过移动端开发吗</li>
<li>跨域方法、jsonp原理</li>
<li>看你项目有些是后端，准备做后端吗</li>
<li>职业规划</li>
<li>什么时候可以来广州</li>
<li>期望薪资</li>
<li>反问</li>
</ul>
<p>阅文集团 - 笔试（上海）</p>
<ul>
<li>在一段时间内只允许一个进程访问的资源，称为  <u>临界资源</u>（选一个：共享资源、独占资源、临界资源、共享区）</li>
<li>以下不会显示的是<ul>
<li><code>&lt;span hidden&gt;&lt;/span&gt;</code></li>
<li><code>&lt;style style=&quot;display:block;&quot;&gt;body&#123;&#125;&lt;/style&gt;</code></li>
<li><code>&lt;input type=&quot; hidden&quot; name=&quot;token&quot;&gt;</code></li>
<li><code>&lt;template&gt;文本&lt;/template&gt;</code></li>
</ul>
</li>
<li>字母K所在ASCII表中十六进制是4B，则二进制 1001000 字符是 </li>
<li>对称算法有什么</li>
<li>css属性不支持负值的是<ul>
<li>padding</li>
<li>vertical-center</li>
<li>margin</li>
<li>letter-spaceing</li>
</ul>
</li>
<li>hive 关键字</li>
<li>setTimeout、Promise 相关执行顺序</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> wrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wrapper&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  wrap.<span class="property">onclick</span> = click</span></span><br><span class="line"><span class="language-javascript">  inner.<span class="property">onclick</span> = click</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>ones - 笔试（深圳）</p>
<ul>
<li>InnoDB</li>
<li>创建索引</li>
<li>归并排序</li>
<li>SATAII 7.2k rpm，随机访问 1KB，访问次数大约是多少</li>
<li>linux 权限 755</li>
<li>数据集A波动范围大，以下算法比较合适的是 （DNN、gbdt、SVM、决策树）</li>
<li>算法题；最长重复子串，青蛙跳台阶</li>
</ul>
<p>猫眼 - 一面（北京）</p>
<p>面试时间：1h多</p>
<blockquote>
<p>代码题部分答案：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvcHJpbmcvZGVtby90cmVlL21hc3Rlci9pbnRlcnZpZXcvJUU3JThDJUFCJUU3JTlDJUJDJUU0JUI4JTgwJUU5JTlEJUEy">链接<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li><p>自我介绍</p>
</li>
<li><p>讲讲 vuex</p>
</li>
<li><p>跨域？jsonp实现原理？postMessage可以发送到服务器吗？</p>
</li>
<li><p>前端安全</p>
</li>
<li><p><code>xss</code>和 <code>csrf</code> 具体是什么情况，讲一下？如何防御？</p>
</li>
<li><pre><code class="js">class Foo &#123;
  name = &#39;Foo&#39;
    a() &#123; console.log(this.name) &#125;
    b = function() &#123; console.log(this.name) &#125;
    c = () =&gt; console.log(this.name)
&#125;

let f = new Foo()
let b = &#123; name: &#39;bar&#39;, a: f.a, b: f.b, c: f.c&#125;
b.a()
b.b()
b.c()
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // 下面代码会输出什么，如果有问题，怎么改正。最少两种方法</span><br><span class="line">  for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      console.log(i)</span><br><span class="line">    &#125;, i * 100)</span><br><span class="line">    console.log(i)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><pre><code class="js">var vue = &#123;
  $on(event, callback) &#123;
    // 开始敲你的代码
  &#125;,
  $emit(event) &#123;
      // 这里也一样 
  &#125;,
&#125;

// 监听
vue.$on(&#39;msg&#39;, function (a) &#123;
  console.log(a)
&#125;)
vue.$on(&#39;msg&#39;, function (a, b) &#123;
  console.log(a, b)
&#125;)
// 触发
vue.$emit(&#39;msg&#39;, 1, 2)
vue.$emit(&#39;msg&#39;, 1)
</code></pre>
</li>
<li><p>手写出栈入栈（不能使用数组）</p>
</li>
</ul>
<p>有鱼智能科技 （深圳）</p>
<p>面试时间：30min</p>
<ul>
<li>自我介绍</li>
<li>上拉刷新、下拉加载 如何实现的，难度在哪</li>
<li>如果遇到那种用户一直反复刷新的，应怎么做性能优化？防抖节流（面试官说这只是一种，还有别的，没赶上问）</li>
<li>html 布局 垂直居中</li>
<li>css 画一个三角形、圆形</li>
<li>看你简历有node项目，那你说说跨域方法？CORS是怎么实现的？请求头（没说上来具体叫啥）</li>
<li>你说跨域请求投值是 <code>*</code>，那这样可以携带cookie吗？（不能，只能设置指定的域，而且还需要<code>withCrendial</code>，前后端都需要配合）</li>
<li>如何实现继承：原型链、构造函数、组合继承、es6 extends</li>
<li>this指向问题</li>
<li>es6了解哪些</li>
<li>Promise底层如何实现？generator 怎么用？</li>
<li>Proxy 有了解吗？</li>
<li>webpack 有做过配置吗？本地库替换为cdn、sass、less</li>
<li>vue computed和watch 有什么区别？</li>
<li>vue 传值方法有哪些？父传子、子传父、兄弟组件传值、vuex、sessionStorage、localStorage</li>
<li>sessionStorage 能跨页面使用吗？localStorage用在哪些地方？</li>
<li>vuex 用过哪些方法？</li>
<li>vue 可持续化组件是用的哪个？<code>keep-alive</code></li>
<li>做过的性能优化</li>
<li>如何设计移动端和PC端共用一套页面？媒体查询，面试官提示后更愿意听到<code>rem</code></li>
<li>还有什么想问的</li>
</ul>
<p>微医（杭州）</p>
<p>面试时间：45min</p>
<ul>
<li>自我介绍，包括自己所做的一些项目</li>
<li>vue 双向数据流了解吗？（这里理解错了，<code>v-model</code> 只是语法糖）</li>
<li>vue 数据流和 react 数据流有什么区别</li>
<li>设计模式这块了解吗，比如观察者模式、发布&#x2F;订阅模式这些区别是什么</li>
<li>跨域了解吗，<code>jsonp</code> 原理和缺点，CORS设置的请求头是什么？除了 <code>Access-Control-Allow-Origin</code> ，还有什么（当时思路走偏了，应该还包括 <code>Access-Control-Allow-Methods</code>、<code>xxx-Headers</code> <code>xxx-Credentials</code> 这类）</li>
<li>聊聊 <code>options</code> 请求</li>
<li>短时间内如果发送多次post请求，浏览器每次都会进行options请求检验吗（options 请求默认会有缓存）</li>
<li>http缓存了解多少</li>
<li>如果不想用到强缓存，只想用协商缓存，我要怎么设置 cache-control</li>
<li>讲一下事件循环（这里我讲的有点问题）</li>
<li>按照之前你讲的，浏览器是执行完微任务就回去执行宏任务，往复一直循环，那么这样是不是就阻塞了其他的渲染进程</li>
<li>如果你了解浏览器底层相关知识，你可以从那个思路讲讲。</li>
<li>进程和线程区别</li>
<li>webpack 了解吗</li>
<li>抛开一些使用层面上的，你觉得它是为了解决什么问题出来？（之前说了很多废话，但是重点就在嘴边没说出来，主要是解决模块化）</li>
<li>你谈到了 ES6的 import 和 CommondJS require，那你知道他们除了使用层面的区别，还有什么区别</li>
<li>这么想，如果在a模块引入了b模块，同时在b模块又引入了a模块，那么在<code>import</code>和<code>require</code>表现又分别是什么</li>
<li>如果让你设计一个webpack你会怎么考虑</li>
<li>反问阶段</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
</search>
